  name: 'Automated review labels'

  on:
    issue_comment:
      types: [created]
    issues:
      types: [unlabeled]
    pull_request_target:
      types: [unlabeled]

  permissions:
    issues: write # for adding label to an issue
    pull-requests: write # for adding label to a pr

  jobs:

    add-review-team-label:
      name: 'When pinged, label a PR with review team'
      if: >
        github.event.issue
        && github.event.issue.pull_request
        && !contains(github.event.issue.labels.*.name, 'review-requested')
      runs-on: ubuntu-latest
      steps:
        - name: check-teams
          id: check_teams
          uses: actions/github-script@v6
          with:
            script: |
              const teams = [
                '@conda-forge/staged-recipes',
                '@conda-forge/help-c-cpp',
                '@conda-forge/help-cdts',
                '@conda-forge/help-go',
                '@conda-forge/help-java',
                '@conda-forge/help-julia',
                '@conda-forge/help-nodejs',
                '@conda-forge/help-perl',
                '@conda-forge/help-python',
                '@conda-forge/help-python-c',
                '@conda-forge/help-r',
                '@conda-forge/help-ruby'
              ];
              let found_label = false;
              for (const team of teams) {
                  let text = context.payload.comment.body;
                  const regex = new RegExp(team + '[^\-]|' + team + '$');
                  let result = regex.test(text);
                  if (result) {
                      const slug = team.replace("@conda-forge/", "");
                      const label = slug.replace("help-", "");
                      found_label = true;
                      github.rest.issues.addLabels({
                          issue_number: context.issue.number,
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          labels: [label, 'review-requested']
                      });
                      // NOTE: GitHub Actions default token lacks permission to
                      // assign teams for review; external bot required for
                      // that feature.
                      //
                      https://github.com/conda-forge/staged-recipes/issues/18023#issuecomment-1080451231
                      console.log(`Somebody mentioned ${slug}.`);
                  }
              }
              return found_label;
        - name: remove-labels
          if: >
            (steps.check_teams.outputs.result == 'true')
            && contains(github.event.issue.labels.*.name, 'Awaiting author contribution')
          uses: actions/github-script@v6
          with:
            script: |
              github.rest.issues.removeLabel({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: ['Awaiting author contribution']
              })

    check-remove-review-requested-label:
      name: 'Check that review-requested label was removed by a team member'
      if: >
        github.event.action == 'unlabeled'
        && github.event.label.name == 'review-requested'
      runs-on: ubuntu-latest
      steps:
        - name: check-team-membership
          id: check_team_review
          uses: actions/github-script@v6
          with:
            github-token: ${{ secrets.GH_TOKEN }}
            script: |
              console.log(`Label was removed by ${context.payload.sender.login}`);
              let memberships = [];
              for (const team of ['staged-recipes', 'core']) {
                  const membership = github.rest.teams.getMembershipForUserInOrg({
                      org: 'conda-forge',
                      team_slug: team,
                      username: context.payload.sender.login,
                  });
                  memberships.push(membership.then((result) => {
                      if (result.status == 200 && result.data.state == 'active') {
                          console.log('User is authorized');
                          return true;
                      } else {
                          console.log('User is nonactive');
                          return false;
                      }
                  }).catch((error) => {
                      // Non-membership raises an HttpError
                      return false;
                  }));
              }
              return Promise.all(memberships).then((values) => {
                  let is_authorized = false;
                  for (const m of values) {
                      is_authorized = is_authorized || m;
                  }
                  return is_authorized;
              });
        - name: add-labels
          if: >
            (steps.check_team_review.outputs.result == 'true')
          uses: actions/github-script@v6
          with:
            script: |
              github.rest.issues.addLabels({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  labels: ['Awaiting author contribution']
              });
        - name: readd-review-label
          if: >
            (steps.check_team_review.outputs.result == 'false')
          uses: actions/github-script@v6
          with:
            script: |
              github.rest.issues.addLabels({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  labels: ['review-requested']
              });
              console.log('Non-members of staged recipes cannot remove this label.')
