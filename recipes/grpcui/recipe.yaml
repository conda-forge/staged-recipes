context:
  version: "1.4.3"

package:
  name: grpcui
  version: ${{ version }}

source:
  url: https://github.com/fullstorydev/grpcui/archive/refs/tags/v${{ version }}.tar.gz
  sha256: 7fa3039bfa6c06a688c1094177445f759c592be2f04574a234da7a88ab2d0efd
  target_directory: src

build:
  number: 0
  script:
    - cd src
    - go-licenses save . --save_path ../library_licenses
    - if: win
      then: go build -ldflags "-s -w -X main.version=v${{ version }}" -o %LIBRARY_BIN%/ ./cmd/grpcui/
      else: go build -ldflags "-s -w -X main.version=v${{ version }}" -o $PREFIX/bin/ ./cmd/grpcui/

requirements:
  build:
    - ${{ compiler("go-nocgo") }}
    - go-licenses

tests:
  - script: grpcui --help
  - package_contents:
      bin:
        - grpcui
      strict: true

about:
  homepage: https://github.com/fullstorydev/grpcui
  summary: An interactive web UI for gRPC, along the lines of postman.
  description: |
    grpcui is a command-line tool that lets you interact with gRPC servers via a browser.
    It's sort of like Postman, but for gRPC APIs instead of REST.

    In some ways, this is like an extension to grpcurl.
    Whereas grpcurl is a command-line interface, grpcui provides a web/browser-based GUI.
    This lets you interactively construct requests to send to a gRPC server.

    With this tool you can also browse the schema for gRPC services,
    which is presented as a list of available endpoints.
    This is enabled either by querying a server that supports server reflection,
    by reading proto source files,
    or by loading in compiled "protoset" files (files that contain encoded file descriptor protos).
    In fact, the way the tool transforms JSON request data into a binary encoded protobuf is using that very same schema.
    So, if the server you interact with does not support reflection,
    you will either need the proto source files that define the service or need protoset files that grpcui can use.
  license: MIT
  license_file:
    - src/LICENSE
    - library_licenses/
  documentation: https://pkg.go.dev/github.com/fullstorydev/grpcui
  repository: https://github.com/fullstorydev/grpcui

extra:
  recipe-maintainers:
    - maurosilber
