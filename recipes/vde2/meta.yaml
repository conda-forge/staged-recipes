{% set name = "vde2" %}
{% set version = "2.3.2" %}
#{% set version = environ.get('GIT_DESCRIBE_TAG', 'untagged')|string|replace('-','_') %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://downloads.sourceforge.net/project/vde/vde2/{{ version }}/vde2-{{ version }}.tar.bz2
  sha256: cbea9b7e03097f87a6b5e98b07890d2275848f1fe4b9fcda77b8994148bc9542
  patches:
    - patches/0001-configure-do-not-test-for-CXX-it-s-not-needed.patch
    - patches/0002-build-Fix-parallel-make.patch
    
    Could add https://git.alpinelinux.org/aports/tree/main/vde2/vde_cryptcab-compile-against-openssl-1.1.0.patch?h=3.14-stable to fix for newer openssl
    
  # url: https://github.com/virtualsquare/vde-2/archive/refs/tags/vde-2.tar.gz  # comment is that this was v2.3.2 on sourceforge
  #git_url: https://github.com/virtualsquare/vde-2.git

build:
  number: 0
  skip: True  # [win]

#source:
#  # url: https://github.com/virtualsquare/vde-2/archive/refs/tags/vde-2.tar.gz  # comment is that this was v2.3.2 on sourceforge
#  #git_url: https://github.com/virtualsquare/vde-2.git
#
#build:
#  number: {{ environ.get('GIT_DESCRIBE_NUMBER', '0') }}
#  string: {{ [environ.get('PKG_BUILDNUM', ''), ('h' + environ.get('PKG_HASH', '')), environ.get('GIT_DESCRIBE_HASH', '')]|join('_') }}

requirements:
  build:
    # If your project compiles code (such as a C extension) then add the required compilers as separate entries here.
    # Compilers are named 'c', 'cxx' and 'fortran'.
    - {{ compiler('c') }}
    - autoconf
    - automake
    - libtool
    - make
  host:
    - libpcap
    # 2.3.2 breaks after openssl 1.1.0 with
    # cryptcab.c:25:23: error: storage size of 'ctx' isn't known
    #  25 | static EVP_CIPHER_CTX ctx;
    #     |                       ^~~
    # see https://github.com/openssl/openssl/issues/4749
    - openssl<1.1 # changes to wolfssl for new cryptcab at 2019-01-14 8599321526d0a31925fe55cabbe132b752cb268a
    # and then we can no longer solve for modern python because 
    # The reported errors are:
    # - Encountered problems while solving:
    # - package python-3.7.5-hffdb5ce_0_cpython requires openssl >=1.1.1i,<1.1.2a, but none of the providers can be installed
    - python
  run:
    - python

# XXX Add some tests!
#test:
#  # Some packages might need a `test/commands` key to check CLI.
#  # List all the packages/modules that `run_test.py` imports.
#  imports:
#    - simplejson
#    - simplejson.tests
#  # For python packages, it is useful to run pip check. However, sometimes the
#  # metadata used by pip is out of date. Thus this section is optional if it is
#  # failing.
#  requires:
#    - pip
#  commands:
#    - pip check

about:
  home: https://github.com/virtualsquare/vde-2
  # XXX double check the licenses, there are varying ones depending on which part of the repo
  license: GPL-2.0-only
  license_family: GPL
  license_file: 
      - COPYING
      - COPYING.libvdeplug
  summary: 'Virtual Distributed Ethernet'
  description: |
    Components of the VDE architecture:
    - VDE switches: virtual counterpart of ethernet switches.
    - VDE cables: virtual counterpart of a crossed-cable used to connect two switches.

    - VDE 2 includes:
    - switch management both from console and from a "unix socket terminal"
    - VLAN 801.1q *almost* compatible
    - FSTP (fast spanning tree) already incomplete and currently not tested for 802.1d/w/s
      compatibility. under development. (vde_switch must be compiled with the FSTP flag on)

    Using VDE:
    - All units connected to the VDE see each other as they were on a real ethernet.
    - A real Linux box can be connected to the VDE using a tap interface (TUNTAP)  
      (packets can be further routed using standard linux methods). 
    - It is possible to join two VDE switches -- also running on different
      real conputers -- using virtual VDE cables
    - UML (user-mode-linux) virtual machines can be connected to the VDE
    - MPS (MIPS emulated machines (c) Morsiani/Davoli) can be connected 
      to the virtual VDE.

    Examples of VDE uses:
    - With VDE it is possible to create a virtual network of UML machines running
      on several real computer
    - VDE can be used to create tunnels (even crossing masquerated networks)
    - VDE can provide mobility support. Changing a VDE cable with another does not
      affect the communications in place. The new VDE cable can use a completely 
      different path on the real net. VDE supports also multiple concurrent VDE cables
      between a pair of VDE-switches during the hand-off. This eliminates when possible
      hich-ups of communications due to hand-offs.
  dev_url: https://github.com/virtualsquare/vde-2

extra:
  recipe-maintainers:
    - timsnyder
