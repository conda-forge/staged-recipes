{% set name = "vde2" %}
#{% set version = "2.3.2" %}
{% set version = environ.get('GIT_DESCRIBE_TAG', 'untagged')|string|replace('-','_') %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  #url: https://sourceforge.net/projects/vde/files/vde2/{{ version }}/vde2-{{ version }}.tar.gz/download
  #https://downloads.sourceforge.net/project/vde/vde2/2.3.2/vde2-2.3.2.tar.bz2
  #?ts=gAAAAABiMRgVKsFCOs_5zIkVOVNElOLtWTXzwU7bLITHEGkxqxhQ-eBCKErqFvo9ozr8EXRbQdjZpzn8KAtw2J98b5lphmJJuw%3D%3D&r=https%3A%2F%2Fsourceforge.net%2Fprojects%2Fvde%2Ffiles%2Fvde2%2F2.3.2%2Fvde2-2.3.2.tar.bz2%2Fdownload
  # url: https://github.com/virtualsquare/vde-2/archive/refs/tags/vde-2.tar.gz  # comment is that this was v2.3.2 on sourceforge
  git_url: https://github.com/virtualsquare/vde-2.git

build:
  #number: 0
  number: {{ environ.get('GIT_DESCRIBE_NUMBER', '0') }}
  string: {{ [PKG_BUILDNUM, ('h' + PKG_HASH), environ.get('GIT_DESCRIBE_HASH', '')]|join('_') }}
  skip: True  # [win]

requirements:
  build:
    # If your project compiles code (such as a C extension) then add the required compilers as separate entries here.
    # Compilers are named 'c', 'cxx' and 'fortran'.
    - {{ compiler('c') }}
    - autoconf
    - automake
    - libtool
    - make
  host:
    - wolfssl
    - libpcap

# XXX Add some tests!
#test:
#  # Some packages might need a `test/commands` key to check CLI.
#  # List all the packages/modules that `run_test.py` imports.
#  imports:
#    - simplejson
#    - simplejson.tests
#  # For python packages, it is useful to run pip check. However, sometimes the
#  # metadata used by pip is out of date. Thus this section is optional if it is
#  # failing.
#  requires:
#    - pip
#  commands:
#    - pip check

about:
  home: https://github.com/virtualsquare/vde-2
  # XXX double check the licenses, there are varying ones depending on which part of the repo
  license: GPL-2.0-only
  license_family: GPL
  license_file: 
      - COPYING
      - COPYING.libvdeplug
  summary: 'Virtual Distributed Ethernet'
  description: |
    Components of the VDE architecture:
    - VDE switches: virtual counterpart of ethernet switches.
    - VDE cables: virtual counterpart of a crossed-cable used to connect two switches.

    - VDE 2 includes:
    - switch management both from console and from a "unix socket terminal"
    - VLAN 801.1q *almost* compatible
    - FSTP (fast spanning tree) already incomplete and currently not tested for 802.1d/w/s
      compatibility. under development. (vde_switch must be compiled with the FSTP flag on)

    Using VDE:
    - All units connected to the VDE see each other as they were on a real ethernet.
    - A real Linux box can be connected to the VDE using a tap interface (TUNTAP)  
      (packets can be further routed using standard linux methods). 
    - It is possible to join two VDE switches -- also running on different
      real conputers -- using virtual VDE cables
    - UML (user-mode-linux) virtual machines can be connected to the VDE
    - MPS (MIPS emulated machines (c) Morsiani/Davoli) can be connected 
      to the virtual VDE.

    Examples of VDE uses:
    - With VDE it is possible to create a virtual network of UML machines running
      on several real computer
    - VDE can be used to create tunnels (even crossing masquerated networks)
    - VDE can provide mobility support. Changing a VDE cable with another does not
      affect the communications in place. The new VDE cable can use a completely 
      different path on the real net. VDE supports also multiple concurrent VDE cables
      between a pair of VDE-switches during the hand-off. This eliminates when possible
      hich-ups of communications due to hand-offs.
  dev_url: https://github.com/virtualsquare/vde-2

extra:
  recipe-maintainers:
    - timsnyder
