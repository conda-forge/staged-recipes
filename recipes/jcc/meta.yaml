# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Jinja variables help maintain the recipe as you'll update the version only here.
{% set name = "jcc" %}
{% set version = "3.0" %}
{% set sha256 = "52dc7ae13a8e81d78afbc0f13e88ecbdf969673923425a4d65021ae241d99b91" %}
# sha256 is the prefered checksum -- you can get it for a file with:
#  `openssl sha256 <file name>`.
# You may need the openssl package, available on conda-forge
#  `conda install openssl -c conda-forge``

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  fn: {{ name }}-{{ version }}.tar.gz
  # url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  url: https://pypi.python.org/packages/c1/79/de30ac0a450a66be9c679a80a05b943b40c27ea962d79770698cf1c737b7/JCC-3.0.tar.gz
  sha256: {{ sha256 }}

  patches:
    #- setup.patch # [win]   # Make windows type separators
    - setup_lpython.patch [linux]

build:
  skip: true  # [win32 or linux32 or osx]

  number: 2

  rpaths: # only valid for linux
    - lib
    - jre/lib/amd64/
    - jre/lib/amd64/server/

  has_prefix_files:
    - $SP_DIR/jcc/config.py

  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  script: python setup.py install --single-version-externally-managed --record record.txt


requirements:
  build:
    - python
    # When setuptools is available add the `--single-version-externally-managed --record record.txt` above.
    - setuptools
    # if your project compiles code (such as a C extension) then add `toolchain` as a build requirement.
    - toolchain
    - openjdk

  run:
    - python
    - openjdk

test:
  # Some package might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  imports:
    # - simplejson
    #- simplejson.tests
  
  files:
    - test/myrun_test.py

  commands:
    - java -version
    - conda inspect linkages -p ${PREFIX} openjdk  # [linux]
    - conda inspect objects -p ${PREFIX} openjdk   # [osx]

about:
  home: http://lucene.apache.org/pylucene/jcc/index.html
  # Remember to specify the license variants for BSD, Apache, GPL, and LGLP.
  # Prefer the short version, e.g: GPL-2.0 instead of GNU General Public License version 2.0
  # See https://opensource.org/licenses/alphabetical
  license: Apache
  # The license_family, i.e. "BSD" if license is "BSD-3-Clause". (optional)
  # license_family: 
  # It is strongly encouraged to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # See http://conda.pydata.org/docs/building/meta-yaml.html#license-file
  # license_file: LICENSE.txt
  summary: 'a C++ code generator for calling Java from C++/Python'

  # The remaining entries in this section are optional, but recommended
  description: |
    JCC is a C++ code generator for producing the code necessary to call into Java classes from CPython via Javaâ€™s Native Invocation Interface (JNI).

  doc_url: http://lucene.apache.org/pylucene/jcc/index.html
  #dev_url: https://github.com/simplejson/simplejson

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - petrushy
    # - LandoCalrissian
