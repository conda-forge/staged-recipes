# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe
# If your package is python based, we recommend using Grayskull to generate it instead:
# https://github.com/conda-incubator/grayskull

# Jinja variables help maintain the recipe as you'll update the version only here.
# Using the name variable with the URL in line 16 is convenient
# when copying and pasting from another recipe, but not really needed.
{% set name = "smspp-project" %}
{% set version = "0.0.0" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.org/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  # If getting the source from GitHub, remove the line above,
  # uncomment the line below, and modify as needed. Use releases if available:
  # url: https://github.com/simplejson/simplejson/releases/download/{{ version }}/simplejson-{{ version }}.tar.gz
  # and otherwise fall back to archive:
  # url: https://github.com/simplejson/simplejson/archive/v{{ version }}.tar.gz
  sha256: 2b3a0c466fb4a1014ea131c2b8ea7c519f9278eba73d6fcb361b7bdb4fd494e9
  # sha256 is the preferred checksum -- you can get it for a file with:
  #  `openssl sha256 <file name>`.
  # You may need the openssl package, available on conda-forge:
  #  `conda install openssl -c conda-forge``

build:
  # Uncomment the following line if the package is pure Python and the recipe is exactly the same for all platforms.
  # It is okay if the dependencies are not built for all platforms/versions, although selectors are still not allowed.
  # See https://conda-forge.org/docs/maintainer/knowledge_base.html#noarch-python for more details.
  # noarch: python
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  # More info about selectors can be found in the conda-build docs: 
  # https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#preprocessing-selectors
  script: {{ PYTHON }} -m pip install . -vv
  number: 0

requirements:
  build:
    # If your project compiles code (such as a C extension) then add the required compilers as separate entries here.
    # Compilers are named 'c', 'cxx', 'fortran', among others
    - {{ compiler('c') }}
    # this is necessary for all compiled recipes
    - {{ stdlib('c') }}
    - compilers
    - boost
    - boost-mpi
    - netcdf-cxx4
    - eigen
    - coin-or-utils
    - coin-or-clp
    - coin-or-osi
    - scip
    - highs
    - bzip2
    - lapack
    - openblas
    - zlib
  host:
    - scip
    - highs
  run:
    - scip
    - highs

test:
  commands:
    - ucblock_solver --help

about:
  home: https://gitlab.com/smspp/smspp-project
  summary: 'A powerful tool to model and solve optimization problems.'
  description: |
    SMS++ project provides is a system for modeling complex, block-structured mathematical models, and solving them via sophisticated, structure-exploiting algorithms.
  license: GPL-3.0
  license_family: GPL
  license_file: LICENSE.txt
  doc_url: https://smspp.gitlab.io/
  dev_url: https://gitlab.com/smspp/smspp-project

extra:
  recipe-maintainers:
    - davide-f
    - frangio68
    - dmeoli
