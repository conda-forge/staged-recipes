{% set name = "scikit-plots" %}
{% set version = "0.4.0rc4" %}
{% set tag = "v" ~ version %}  # sometimes used to match PyPI releases

# Update the numpy value here to the most recent released version
# when updating to a new scipy feature release; override default pins
{% set numpy = "2.2.1" %}
{% set numpy_minor = numpy.split(".")[1] | int %}

# ensure is_freethreading gets detected as a used variable
# [is_freethreading]

{% if CI is not defined %}{% set CI=False %}{% endif %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:  # Need one of source dist (github, pypi, pypi.anaconda)
  ## https://github.com/{{ name }}/{{ name }}/archive/{{ tag }}.tar.gz  # ‚ùå not include submodules
  ## https://pypi.org/packages/source/{{ name[0] }}/{{ name }}/{{ name | replace("-", "_") }}-{{ version }}.tar.gz  # ‚úÖ include submodules
  ## https://pypi.anaconda.org/scikit-plots-wheels-staging-nightly/simple/{{ name }}/{{ version }}/{{ name | replace("-", "_") }}-{{ version }}.tar.gz  # ‚úÖ include submodules
  # If getting the source from GitHub, remove the line above,
  # uncomment the line below, and modify as needed. Use releases if available:
  # url: https://github.com/simplejson/simplejson/releases/download/{{ version }}/simplejson-{{ version }}.tar.gz
  # and otherwise fall back to archive:
  # url: https://github.com/simplejson/simplejson/archive/v{{ version }}.tar.gz
  # url: https://github.com/{{ name }}/{{ name }}/archive/{{ tag }}.tar.gz
  # sha256 is the preferred checksum -- you can get it for a file with:
  #  `openssl sha256 <file name>`.
  # You may need the openssl package, available on conda-forge:
  #  `conda install openssl -c conda-forge``
  # sha256: 6e3731d677b25f7e1a3529d591906effaaf31f4392d66280226f1515ba8f1e10
  # Conda Recipe: Specify the tag in the git_url using the @tag syntax.
  git_url: https://github.com/scikit-plots/scikit-plots.git@{{ tag }} 
  # git_rev: {{ tag }}       # üîí use a tag or commit hash for reproducibility
  #  fetching only the latest commit (or the commit specified by git_rev) and no history
  # git_depth: 1             # (optional) shallow clone for faster builds to speed up CI

build:
  number: 0
  # skip: true  # [python_impl == "pypy"]
  skip: true  # [py<310]
  # Uncomment the following line if the package is pure Python and the recipe is exactly the same for all platforms.
  # It is okay if the dependencies are not built for all platforms/versions, although selectors are still not allowed.
  # See https://conda-forge.org/docs/maintainer/knowledge_base.html#noarch-python for more details.
  # noarch: python
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  # More info about selectors can be found in the conda-build docs: 
  # https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#preprocessing-selectors
  # script: bash build.sh    # or python -m build / meson / cmake / etc.
  # script: {{ PYTHON }} -m pip install . -vv --no-deps --no-build-isolation

requirements:
  build:
    - python                                 # [build_platform != target_platform]
    - cross-python_{{ target_platform }}     # [build_platform != target_platform]
    - meson-python                           # [build_platform != target_platform]
    - ninja                                  # [build_platform != target_platform]
    - cython                                 # [build_platform != target_platform]
    - pybind11                               # [build_platform != target_platform]
    - numpy                                  # [build_platform != target_platform]
    - scipy                                  # [build_platform != target_platform]
    - pkg-config                             # [build_platform != target_platform]
    - cmake                                  # [build_platform != target_platform]
    # only need these for the strong run exports
    # this is necessary for all compiled recipes
    - {{ stdlib('c') }}
    # If your project compiles code (such as a C extension) then add the required compilers as separate entries here.
    # Compilers are named 'c', 'cxx', 'fortran', among others
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    # pythran code needs clang-cl on windows
    - clang                                  # [win]
    - {{ compiler('fortran') }}
    - llvm-openmp  # [osx]
    - libgomp  # [linux]
  host:
    - git  # Git is required to clone the repository and checkout specific revisions
    - git-lfs  # Git LFS is required for large files stored in LFS
    - libblas
    - libcblas
    - liblapack
    - python
    - meson
    - ninja
    - meson-python
    - cython
    - pybind11
    - pythran
    - numpy >=1.20,!=1.24.0
    - scipy >=1.6.0  # [not aarch64]
    - scipy >=1.8  # [aarch64]
    - joblib
    - threadpoolctl
    - pip
    - pkg-config
    - python-build
   # See https://github.com/conda-forge/openmp-feedstock/issues/126
    - llvm-openmp  # [osx]
    - libgomp  # [linux]
  run:
    - python
    # numpy's run-export only requires <3 because not every package
    # is exposed as deeply to its ABI. scipy however only supports
    # the two next minor versions after the numpy we build against, see
    # https://scipy.github.io/devdocs/dev/core-dev/index.html#version-ranges-for-numpy-and-other-dependencies
    - numpy <2.{{ numpy_minor + 3 }}
    # double-check lower bound from
    # https://github.com/scipy/scipy/blob/v{{ version }}/pyproject.toml#L55
    - numpy >=1.20,!=1.24.0
    - scipy >=1.7.0
    - pandas >=1.2.0
    - matplotlib-base >=3.4,!=3.6.1
    - threadpoolctl >=3.1.0
    - joblib >=1.2.0
    - scikit-learn >=1.3.0rc1
    - pillow >=6.2.0
    - aggdraw >=1.3.11
    - importlib-metadata  # [py<310]

test:
  imports:
    - scikitplot
  requires:
    - pytest
    - hypothesis
    - pip
  commands:
    # - pip check
    - python -c "import scikitplot; scikitplot.show_config()"

about:
  # The doc_url and dev_url are optional.
  dev_url: https://github.com/scikit-plots/scikit-plots
  doc_url: https://scikit-plots.github.io/dev
  home: https://scikit-plots.github.io/dev
  summary: |-
    An intuitive library that seamlessly adds plotting capabilities and functionality to any model objects or outputs,
    compatible with tools like scikit-learn, XGBoost, TensorFlow, and more.
  # Remember to specify the license variants for BSD, Apache, GPL, and LGPL.
  # Use the SPDX identifier, e.g: GPL-2.0-only instead of GNU General Public License version 2.0
  # See https://spdx.org/licenses/
  license: BSD-3-Clause
  # The license_family, i.e. "BSD" if license is "BSD-3-Clause". 
  # Optional
  license_family: BSD
  # It is required to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # Please also note that some projects have multiple license files which all need to be added using a valid yaml list.
  # See https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#license-file
  license_file:
    - LICENSE
  license_url: https://scikit-plots.github.io/dev/project/license.html

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - celik-muhammed
  feedstock-name: scikit-plots
