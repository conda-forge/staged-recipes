# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Jinja variables help maintain the recipe as you'll update the version only here.
# Using the name variable with the URL in line 13 is conviniet
# when copying and paster from another recipe, but not really needed.
{% set name = "asap3" %}
{% set version = "3.10.10" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  # If getting the source from GitHub remove the line above
  # uncomment the line below and modify as needed
  # url: https://github.com/simplejson/{{ name }}/archive/{{ version }}.tar.gz
  sha256: 58cc70379ff3de727ad2e19882082c40a4780c72ae86e21decd15a8df1e202f0
  # sha256 is the prefered checksum -- you can get it for a file with:
  #  `openssl sha256 <file name>`.
  # You may need the openssl package, available on conda-forge
  #  `conda install openssl -c conda-forge``

build:
  # Uncomment the following line if the package is pure python and the recipe is exactly the same for all platforms.
  # It is okay if the dependencies are not built for all platforms/versions, although selectors are still not allowed.
  # See https://conda-forge.org/docs/meta.html#building-noarch-packages for more details.
  # noarch: python
  number: 0
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  script: "{{ PYTHON }} -m pip install . --no-deps --ignore-installed --no-cache-dir -vvv"
  skip: True  # [win]

requirements:
  build:
    # if your project compiles code (such as a C extension) then add the required compilers as separate entries here.
    # compilers are named 'c', 'cxx' and 'fortran'.
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
  host:
    - python
    - pip
    - numpy
  run:
    - python
    - {{ pin_compatible('numpy') }}
    - ase

test:
  # Some package might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  files:
    - Verlet*.pickle
  source_files:
    - Test
  imports:
    - asap3
  commands:
    - mv Verlet*.pickle Test
    - cd Test
    - python TestAll.py

about:
  home: https://wiki.fysik.dtu.dk/asap
  # Remember to specify the license variants for BSD, Apache, GPL, and LGLP.
  # Prefer the short version, e.g: GPL-2.0 instead of GNU General Public License version 2.0
  # See https://opensource.org/licenses/alphabetical
  license: LGPLv3
  # The license_family, i.e. "BSD" if license is "BSD-3-Clause". (optional)
  license_family: LGPL
  # It is strongly encouraged to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # See http://conda.pydata.org/docs/building/meta-yaml.html#license-file
  license_file: LICENSE.txt
  summary: 'ASAP is a calculator for doing large-scale classical molecular dynamics within ASE.'

  # The remaining entries in this section are optional, but recommended
  description: |
     Asap is a tool for doing atomic-scale computer simulations 
     (mainly molecular dynamics) using classical potentials 
     (mainly Effective Medium Theory). 
     Asap is intended to work as an energy calculator in connection 
     with the Atomic Simulation Environment (ASE). 
     However, some parts of the ASE are either extended or 
     reimplemented for reasons of efficiency and ease-of-use 
     on parallel computers.
  doc_url: https://wiki.fysik.dtu.dk/asap/Manual
  dev_url: https://gitlab.com/asap/asap

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - jochym
