# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe
# If your package is python based, we recommend using Grayskull to generate it instead:
# https://github.com/conda-incubator/grayskull

# Jinja variables help maintain the recipe as you'll update the version only here.
# Using the name variable with the URL in line 16 is convenient
# when copying and pasting from another recipe, but not really needed.
{% set name = "antspyx" %}
{% set version = "0.3.8" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  # url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  # If getting the source from GitHub, remove the line above,
  # uncomment the line below, and modify as needed. Use releases if available:
  # url: https://github.com/simplejson/simplejson/releases/download/{{ version }}/simplejson-{{ version }}.tar.gz
  # and otherwise fall back to archive:
  url: https://github.com/ANTsX/ANTsPy/archive/refs/tags/v{{ version }}.tar.gz
  sha256: c13d4ad6c3bb4fd1b894c887187486a2a6b4d7a2d11a29953e34a27429d4fbef
  # sha256 is the preferred checksum -- you can get it for a file with:
  #  `openssl sha256 <file name>`.
  # You may need the openssl package, available on conda-forge:
  #  `conda install openssl -c conda-forge``

build:
  # Uncomment the following line if the package is pure Python and the recipe is exactly the same for all platforms.
  # It is okay if the dependencies are not built for all platforms/versions, although selectors are still not allowed.
  # See https://conda-forge.org/docs/maintainer/knowledge_base.html#noarch-python for more details.
  # noarch: python
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  # More info about selectors can be found in the conda-build docs: 
  # https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#preprocessing-selectors
  script: {{ PYTHON }} -m pip install . -vv
  number: 0

requirements:
  build:
    # If your project compiles code (such as a C extension) then add the required compilers as separate entries here.
    # Compilers are named 'c', 'cxx' and 'fortran'.
    - python                                 # [build_platform != target_platform]
    - cross-python_{{ target_platform }}     # [build_platform != target_platform]
    - {{ compiler('cxx') }}
    - cmake >=3.16.3
    - ninja
  host:
    - python
    - pip
    - boost-cpp
    - libitk-devel
    - libpng
    - pandas
    - pyyaml
    - numpy
    - scikit-image
    - scikit-learn
    - statsmodels
    - webcolors
    - matplotlib
    - pillow
    - nibabel
  run:
    - python
    - libitk

test:
  # Some packages might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  imports:
    - ants
  # For python packages, it is useful to run pip check. However, sometimes the
  # metadata used by pip is out of date. Thus this section is optional if it is
  # failing.
  requires:
    - pip
  commands:
    - pip check

about:
  home: https://github.com/ANTsX/ANTsPy
  summary: 'Advanced Normalization Tools in Python'
  description: |
    ANTsPy is a Python library which wraps the C++ biomedical image processing 
    library ANTs <https://github.com/ANTsX/ANTs>, matches much of the 
    statistical capabilities of ANTsR <https://github.com/ANTsX/ANTsR>, and 
    allows seamless integration with numpy, scikit-learn, and the greater 
    Python community.
    ANTsPy includes blazing-fast IO (~40% faster than nibabel for loading 
    Nifti images and converting them to numpy arrays), registration, 
    segmentation, statistical learning, visualization, and other useful 
    utility functions.
    ANTsPy also provides a low-barrier opportunity for users to quickly wrap 
    their ITK (or general C++) code in Python without having to build an entire 
    IO/plotting/wrapping code base from scratch.
  license: Apache-2.0
  # Optional
  license_family: Apache
  license_file: LICENSE.txt
  doc_url: https://stnava.github.io/ANTsDoc/
  dev_url: https://github.com/ANTsX/ANTs/wiki

extra:
  recipe-maintainers:
    - dipterix
