# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Jinja variables help maintain the recipe as you'll update the version only here.
# Using the name variable with the URL in line 14 is convenient
# when copying and pasting from another recipe, but not really needed.
{% set name = "feat" %}
{% set version = "0.5.1" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  # url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  # If getting the source from GitHub, remove the line above,
  # uncomment the line below, and modify as needed. Use releases if available:
  # https://github.com/cavalab/feat/archive/refs/tags/0.5.1.tar.gz
  url: https://github.com/cavalab/feat/archive/refs/tags/{{ version }}.tar.gz
  # and otherwise fall back to archive: 
  # url: https://github.com/simplejson/simplejson/archive/v{{ version }}.tar.gz
  sha256: 459855df250153e41fcaf3e0d2b1fae860acf1610529138b4ad5caea12e43935
  # sha256 is the preferred checksum -- you can get it for a file with:
  #  `openssl sha256 <file name>`.
  # You may need the openssl package, available on conda-forge:
  #  `conda install openssl -c conda-forge``

build:
  # Uncomment the following line if the package is pure Python and the recipe is exactly the same for all platforms.
  # It is okay if the dependencies are not built for all platforms/versions, although selectors are still not allowed.
  # See https://conda-forge.org/docs/maintainer/knowledge_base.html#noarch-python for more details.
  # noarch: python
  number: 0
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  skip: True  # [py<35]
  script: "{{ PYTHON }} -m pip install . -vv"

requirements:
  build:
    # If your project compiles code (such as a C extension) then add the required compilers as separate entries here.
    # Compilers are named 'c', 'cxx' and 'fortran'.
    - {{ compiler('cxx') }}
    - cmake 3.18.*
    - ninja
    - setuptools 45.*
    - wheel 0.35.*
  host:
    - python
    - pip
    - eigen 3.3.*
    - cython 0.29.*
  run:
    - python
    - shogun-cpp 6.1.4
    - pandas 1.1.*
    - scikit-learn 0.23.*

test:
  # Some packages might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  imports:
    - feat
    - feat.FeatRegressor
    - feat.FeatClassifier
  requires:
    - sklearn
    - pandas
    - numpy
    - jupyter
    - scipy
  commands: 
    - python tests/wrappertest.py -v
    - python test/nb_tests.py

about:
  home: https://cavalab.org/feat
  # Remember to specify the license variants for BSD, Apache, GPL, and LGPL.
  # Use the SPDX identifier, e.g: GPL-2.0-only instead of GNU General Public License version 2.0
  # See https://spdx.org/licenses/
  license: GPL-2.0-or-later
  # The license_family, i.e. "BSD" if license is "BSD-3-Clause". (optional)
  license_family: GPL
  # It is strongly encouraged to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # See https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#license-file
  license_file: LICENSE
  summary: 'A Feature Engineering Automation Tool'
  # The remaining entries in this section are optional, but recommended.
  description: |
    FEAT is a feature engineering automation tool that learns new representations of raw data 
    to improve classifier and regressor performance. The underlying methods use Pareto 
    optimization and evolutionary computation to search the space of possible transformations.
  doc_url: https://cavalab.org/feat/
  dev_url: https://github.com/cavalab/feat

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - lacava
