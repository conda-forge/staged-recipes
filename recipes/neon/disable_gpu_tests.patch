diff --git tests/test_conv_layer.py tests/test_conv_layer.py
index 9861f12..8100376 100644
--- tests/test_conv_layer.py
+++ tests/test_conv_layer.py
@@ -19,10 +19,15 @@ import itertools as itt
 import numpy as np
 import pytest
 from neon import NervanaObject
-from neon.backends.nervanagpu import NervanaGPU
 from neon.layers.layer import Convolution
 from neon.initializers.initializer import Uniform
 from utils import allclose_with_out
+try:
+    from neon.backends.nervanagpu import NervanaGPU
+except:
+    # stub out the class
+    class NervanaGPU(object):
+        pass
 
 
 def pytest_generate_tests(metafunc):
@@ -344,7 +349,7 @@ class ConvLayerRef(object):
         self.z = np.zeros((mbs, self.nout), dtype=dtypeu)
         self.y = np.zeros((mbs, self.nout), dtype=dtypeu)
         ofmstarts = np.array(list(range(0, (self.ofmsize * nofm), self.ofmsize)))
-        self.ofmlocs = np.zeros((self.ofmsize, nofm), dtype='i32')
+        self.ofmlocs = np.zeros((self.ofmsize, nofm), dtype=np.int32)
         for dst in range(self.ofmsize):
             self.ofmlocs[dst, :] = ofmstarts + dst
         # Figure out the connections with the previous layer.
diff --git tests/test_deconv_layer.py tests/test_deconv_layer.py
index 4988d9e..0c67951 100644
--- tests/test_deconv_layer.py
+++ tests/test_deconv_layer.py
@@ -16,9 +16,14 @@ import itertools as itt
 import numpy as np
 import pytest
 from neon import NervanaObject
-from neon.backends.nervanagpu import NervanaGPU
 from neon.layers import Deconvolution
 from neon.initializers import Uniform
+try:
+    from neon.backends.nervanagpu import NervanaGPU
+except:
+    # stub out the class
+    class NervanaGPU(object):
+        pass
 
 
 def pytest_generate_tests(metafunc):
@@ -265,7 +270,7 @@ class DeconvRefLayer(object):
         self.y = np.zeros((mbs, self.nout), dtype=dtypeu)
         ofmstarts = np.array(
             list(range(0, (self.ofmsize * self.nofm), self.ofmsize)))
-        self.ofmlocs = np.zeros((self.ofmsize, self.nofm), dtype='i32')
+        self.ofmlocs = np.zeros((self.ofmsize, self.nofm), dtype=np.int32)
         for dst in range(self.ofmsize):
             self.ofmlocs[dst, :] = ofmstarts + dst
 
