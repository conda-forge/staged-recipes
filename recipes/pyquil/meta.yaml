# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Jinja variables help maintain the recipe as you'll update the version only here.
{% set name = "pyquil" %}
{% set version = "1.8.0" %}
{% set sha256 = "08b30661e32eddd1fe609d8b55e83740443fbda76ae1b56191f2b2e816d4a4ae" %}
# sha256 is the prefered checksum -- you can get it for a file with:
#  `openssl sha256 <file name>`.
# You may need the openssl package, available on conda-forge
#  `conda install openssl -c conda-forge``

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  fn: {{ name }}-{{ version }}.tar.gz
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: {{ sha256 }}

build:
  noarch: python
  number: 0
  skip: True  # [py<36]
  entry_points:
    - pyquil-config-setup=pyquil.setup.pyquil_config_setup:main
  script: python setup.py install --single-version-externally-managed --record record.txt

requirements:
  build:
    - python
    - setuptools
    - requests >=2.4.2
    - numpy >=1.10
    - matplotlib >=1.5
    - typing >=3.6
    - urllib3 >=1.21.1
    - antlr-python-runtime >=4.7
    - pytest-runner
  run:
    - python
    - requests >=2.4.2
    - numpy >=1.10
    - matplotlib >=1.5
    - typing >=3.6
    - urllib3 >=1.21.1
    - antlr-python-runtime >=4.7

test:
  imports:
    - pyquil
    - pyquil._parser
    - pyquil._parser.gen2
    - pyquil._parser.gen3
    - pyquil.api
    - pyquil.latex
    - pyquil.setup
  commands:
  # This command configures pyquil to connect to Riggeti Forest. It prompts the
  # user for an API key and username. Appropriate for local testing, but not
  # conda forge. see http://pyquil.readthedocs.io/en/latest/start.html#connecting-to-the-rigetti-forest
    # - pyquil-config-setup --help
  requires:
    - mock
    - pytest >=3.0.0
    - pytest-runner

about:
  home: 'https://www.rigetti.com/index.php/forest'
  license: Apache-2.0
  license_family: Apache
  license_file: LICENSE
  summary: A library for easily generating Quil programs to be executed using the Rigetti Forest platform.
  description: |
    pyQuil is an open source Python library developed at Rigetti Computing that
    constructs programs for quantum computers. More concretely, pyQuil produces
    programs in the Quantum Instruction Language (Quil). Quil is an opinionated
    quantum instruction language - its basic belief is that in the near term
    quantum computers will operate as coprocessors, working in concert with
    traditional CPUs. This means that Quil is designed to execute on a Quantum
    Abstract Machine that has a shared classical/quantum architecture at its
    core.
  doc_url: 'http://pyquil.readthedocs.io/en/latest/'
  dev_url: 'https://github.com/rigetticomputing/pyquil.git'

extra:
  recipe-maintainers:
    - pbronez

