# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Jinja variables help maintain the recipe as you'll update the version only here.
# Using the name variable with the URL in line 14 is convenient
# when copying and pasting from another recipe, but not really needed.
{% set name = "daetools" %}
{% set version = "1.9.1" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  # url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  # If getting the source from GitHub, remove the line above,
  # uncomment the line below, and modify as needed. Use releases if available:
  # url: https://github.com/simplejson/simplejson/releases/download/{{ version }}/simplejson-{{ version }}.tar.gz
  # and otherwise fall back to archive: 
  url: https://github.com/v1kko/daetools/archive/v{{ version }}.tar.gz 
  sha256: c15d60bf279235e82527589112881a4d36ad55eed866be34aef662973ab6a290
  #path: /home/conda/staged-recipes/recipes/daetools
  # sha256 is the preferred checksum -- you can get it for a file with:
  #  `openssl sha256 <file name>`.
  # You may need the openssl package, available on conda-forge:
  #  `conda install openssl -c conda-forge``

build:
  # Uncomment the following line if the package is pure Python and the recipe is exactly the same for all platforms.
  # It is okay if the dependencies are not built for all platforms/versions, although selectors are still not allowed.
  # See https://conda-forge.org/docs/maintainer/knowledge_base.html#noarch-python for more details.
  # noarch: python
  number: 0
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  # script: "{{ PYTHON }} -m pip install . -vv"
  skip: True  # [not linux]
  skip: True  # [py<38]

requirements:
  build:
    - {{ compiler('cxx') }}
  host:
    - python
    - coolprop
    - qt
    - make
    - cmake
    - boost
    - superlu
#    - sundials Not yet ... Upgrade interface to IDAS (1.3.0) to current version of Sundials (5.4.1)
# Python bindings
    - numpy 
    - scipy
    - matplotlib
    - lxml
    - pandas
    - openpyxl
    - setuptools
    - et-xmlfile

  run:
    - python
    - matplotlib
    - boost
    - boost-cpp
    - libopenblas
    - libgfortran5
    - _openmp_mutex
    - coolprop

test:
  commands:
    - python -c "import daetools"

about:
  home: https://github.com/v1kko/daetools
  # Remember to specify the license variants for BSD, Apache, GPL, and LGPL.
  # Use the SPDX identifier, e.g: GPL-2.0-only instead of GNU General Public License version 2.0
  # See https://spdx.org/licenses/
  license: GPL-3.0-only
  # The license_family, i.e. "BSD" if license is "BSD-3-Clause". (optional)
  license_family: GPL
  # It is strongly encouraged to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # See https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#license-file
  license_file: licence.txt
  summary: 'DAE Tools: equation-based object-oriented modelling, simulation and optimisation software'
  # The remaining entries in this section are optional, but recommended.
  description: |
    DAE Tools is a cross-platform equation-based object-oriented modelling, simulation and optimisation software. It is not a modelling language nor a collection of numerical libraries but rather a higher level structure â€“ an architectural design of interdependent software components providing an API for 
    - Model development/specification
    - Activities on developed models, such as simulation, optimisation, sensitivity analysis and parameter estimation
    - Processing of the results, such as plotting and exporting to various file formats
    - Report generation
    - Code generation, co-simulation and model exchange

  doc_url: https://daetools.com
  dev_url: https://github.com/v1kko/daetools

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - v1kko
