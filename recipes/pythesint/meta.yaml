# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Jinja variables help maintain the recipe as you'll update the version only here.
{% set name = "pythesint" %}
{% set version = "1.2.0" %}
{% set sha256 = "457ae24b8ffcee7a03ff9515c1578aec81d2bf3dd7a599d7cafc6e146e441b65" %}
# sha256 is the prefered checksum -- you can get it for a file with:
#  `openssl sha256 <file name>`.
# You may need the openssl package, available on conda-forge
#  `conda install openssl -c conda-forge``

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  fn: {{ name }}-{{ version }}.tar.gz
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: {{ sha256 }}

build:
  # Uncomment the following line if the package is pure python and the recipe is exactly the same for all platforms.
  # See https://conda-forge.org/docs/meta.html#building-noarch-packages for more details.
  noarch: python
  number: 0
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  script: python setup.py install --single-version-externally-managed --record record.txt
  skip: True # [py<2.7]

requirements:
  build:
    - python
    - pyyaml
    - requests
    # When setuptools is available add the `--single-version-externally-managed --record record.txt` above.
    - setuptools
    # if your project compiles code (such as a C extension) then add `toolchain` as a build requirement.
  run:
    - python
    - pyyaml
    - requests

test:
  # Some package might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  imports:
    - pythesint
    - pythesint.tests

about:
  home: https://github.com/nansencenter/py-thesaurus-interface
  # Remember to specify the license variants for BSD, Apache, GPL, and LGLP.
  # Prefer the short version, e.g: GPL-2.0 instead of GNU General Public License version 2.0
  # See https://opensource.org/licenses/alphabetical
  license: GPL-3.0
  # The license_family, i.e. "BSD" if license is "BSD-3-Clause". (optional)
  license_family: GPL
  # It is strongly encouraged to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # See http://conda.pydata.org/docs/building/meta-yaml.html#license-file
  # license_file: LICENSE.txt
  summary: 'An interface to metadata vocabularies for geospatial and other geophysical data'

  # The remaining entries in this section are optional, but recommended
  description: |
    pythesint provides access to controled vocabularies following
    the standards defined at NASA's Global Change Master Directory (GCMD)
    (http://gcmd.gsfc.nasa.gov) and the NetCDF-CF conventions
    (http://cfconventions.org/), plus possibly others that will be added as
    needs emerge. The standards are mapped in Python dictionaries and saved
    to json-files.
  doc_url: https://github.com/nansencenter/py-thesaurus-interface
  dev_url: https://github.com/nansencenter/py-thesaurus-interface

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - akorosov
