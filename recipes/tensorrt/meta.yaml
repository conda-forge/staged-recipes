{% set full_version = "10.9.0.34" %}
{% set version = full_version.split('.')[:3] | join('.') %}

package:
  name: tensorrt-sdk
  version: {{ full_version }}

{% set arm_variant_type = arm_variant_type | default("None") %}
{% set cuda_compiler_version = cuda_compiler_version | default("None") %}

source:
  - url: https://developer.nvidia.com/downloads/compute/machine-learning/tensorrt/{{ version }}/tars/TensorRT-{{ full_version }}.Linux.aarch64-gnu.cuda-12.8.tar.gz  # [linux and arm64 and (cuda_compiler_version or "").startswith("12") and arm_variant_type == "sbsa"]
  - url: https://developer.nvidia.com/downloads/compute/machine-learning/tensorrt/{{ version }}/tars/TensorRT-{{ full_version }}.Linux.x86_64-gnu.cuda-11.8.tar.gz  # [linux and x86_64 and (cuda_compiler_version or "").startswith("11")]
  - url: https://developer.nvidia.com/downloads/compute/machine-learning/tensorrt/{{ version }}/tars/TensorRT-{{ full_version }}.Linux.x86_64-gnu.cuda-12.8.tar.gz  # [linux and x86_64 and (cuda_compiler_version or "").startswith("12")]
  - url: https://developer.nvidia.com/downloads/compute/machine-learning/tensorrt/{{ version }}/zip/TensorRT-{{ full_version }}.Windows.win10.cuda-11.8.zip  # [win and x86_64 and (cuda_compiler_version or "").startswith("11")]
  - url: https://developer.nvidia.com/downloads/compute/machine-learning/tensorrt/{{ version }}/zip/TensorRT-{{ full_version }}.Windows.win10.cuda-12.8.zip  # [win and x86_64 and (cuda_compiler_version or "").startswith("12")]

build:
  number: 0
  skip: true  # [(cuda_compiler_version or "None") == "None"]

requirements:
  build:
    - cf-nvidia-tools 1
    - python  # Must exist for conda-build to inject PYTHON jinja variable

outputs:
  # - name: nvinfer
  # - name: nvinfer-lean
  # - name: nvinfer-dispatch
  # - name: libnvnfer-dev
  # - name: libnvnfer
  # - name: libnvnfer-static
# Python APIs
  - name: tensorrt
    build:
      script:
        - {{ PYTHON }} -m pip install ${SRC_DIR}/python/tensorrt-{{ full_version }}-cp{{ py }}* -vv  # [linux]
        - {{ PYTHON }} -m pip install %SRC_DIR%\python\tensorrt-{{ full_version }}-cp{{ py }}* -vv  # [win]
    requirements:
      build:
        - cross-python_{{ target_platform }}    # [build_platform != target_platform]
        - python                                # [build_platform != target_platform]
      host:
        - python
        - pip
    test:
      requires:
        - pip
      import:
        - tensorrt
      script:
        - pip check
        - python -c "import tensorrt; assert tensorrt.__version__ == "{{ full_version }}"; assert tensorrt.Builder(tensorrt.Logger())"
  - name: tensorrt-lean
    build:
      script:
        - {{ PYTHON }} -m pip install ${SRC_DIR}/python/tensorrt_lean-{{ full_version }}-cp{{ py }}* -vv  # [linux]
        - {{ PYTHON }} -m pip install %SRC_DIR%\python\tensorrt_lean-{{ full_version }}-cp{{ py }}* -vv  # [win]
    requirements:
      build:
        - cross-python_{{ target_platform }}    # [build_platform != target_platform]
        - python                                # [build_platform != target_platform]
      host:
        - python
        - pip
    test:
      requires:
        - pip
      import:
        - tensorrt_lean
      script:
        - pip check
        - python -c "import tensorrt_lean; assert tensorrt_lean.__version__ == "{{ full_version }}"; assert tensorrt_lean.Runtime(tensorrt.Logger())"
  - name: tensorrt-dispatch
    build:
      script:
        - {{ PYTHON }} -m pip install ${SRC_DIR}/python/tensorrt_dispatch-{{ full_version }}-cp{{ py }}* -vv  # [linux]
        - {{ PYTHON }} -m pip install %SRC_DIR%\python\tensorrt_dispatch-{{ full_version }}-cp{{ py }}* -vv  # [win]
    requirements:
      build:
        - cross-python_{{ target_platform }}    # [build_platform != target_platform]
        - python                                # [build_platform != target_platform]
      host:
        - python
        - pip
    test:
      requires:
        - pip
      import:
        - tensorrt_dispatch
      script:
        - pip check
        - python -c "import tensorrt_dispatch; assert tensorrt_dispatch.__version__ == "{{ full_version }}"; assert tensorrt_dispatch.Runtime(tensorrt.Logger())"
