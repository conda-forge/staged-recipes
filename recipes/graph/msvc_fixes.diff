diff --git a/include/andres/graph/lifting.hxx b/include/andres/graph/lifting.hxx
index 2919c52..2f0ff4b 100755
--- a/include/andres/graph/lifting.hxx
+++ b/include/andres/graph/lifting.hxx
@@ -203,7 +203,7 @@ lift(
                 {
                     if (metric == LiftingMetric::PathLength)
                     {
-                        const std::size_t distance = std::abs(x - cv[0]) + std::abs(y - cv[1]);
+                        const std::size_t distance = std::abs(static_cast<long>(x - cv[0])) + std::abs(static_cast<long>(y - cv[1]));
 
                         if (distance > distanceLowerBound)
                         {
diff --git a/src/andres/graph/unit-test/graph-grid.cxx b/src/andres/graph/unit-test/graph-grid.cxx
index ffe050e..ad7bde1 100755
--- a/src/andres/graph/unit-test/graph-grid.cxx
+++ b/src/andres/graph/unit-test/graph-grid.cxx
@@ -196,7 +196,7 @@ public:
 
     static_assert(std::is_same<pointer,value_type*>::value,"Iterator pointer type mismatch.");
     static_assert(std::is_same<reference,value_type&>::value,"Iterator pointer type mismatch.");
-    
+
     void operator()(iterator begin,iterator end) {
         difference_type d = std::distance(begin,end);
         assert(d>0);
@@ -223,7 +223,7 @@ void testIteratorCompile(G& g, size_t pivot) {
     typedef typename GridGraph::AdjacencyIterator AdjacencyIterator ;
     typedef typename GridGraph::VertexIterator VertexIterator;
     typedef typename GridGraph::EdgeIterator EdgeIterator;
-    
+
     {
         VertexIterator begin = g.verticesFromVertexBegin(pivot);
         VertexIterator end = g.verticesFromVertexEnd(pivot);
@@ -509,9 +509,9 @@ void testConstructionAndNumbers() {
     // Simple examples
     {
         GridGraphType gridGraph({6,5});
-        VertexCoordinate originCoordinate({{0,0}});
+        VertexCoordinate originCoordinate{{0,0}};
         size_t originIndex(0);
-        VertexCoordinate tenthCoordinate({{3,1}});
+        VertexCoordinate tenthCoordinate{{3,1}};
         size_t tenthIndex(9);
         test(originIndex == gridGraph.vertex(originCoordinate));
         test(tenthIndex == gridGraph.vertex(tenthCoordinate));
diff --git a/src/command-line-tools/fast-marching.hxx b/src/command-line-tools/fast-marching.hxx
index c584f02..4218a54 100755
--- a/src/command-line-tools/fast-marching.hxx
+++ b/src/command-line-tools/fast-marching.hxx
@@ -101,7 +101,7 @@ fastMarching(
     typedef typename InputGraph::AdjacencyType Adjacency;
     typedef typename InputGraph::EdgeCoordinate EdgeCoordinate;
     typedef typename std::iterator_traits<TARGET_EDGE_VALUE_ITERATOR>::value_type Value;
-    typedef typename detail::my_make_signed<Value>::type signedValue;
+    typedef typename ::detail::my_make_signed<Value>::type signedValue;
     if(interpolationOrder > 1) {
         throw std::runtime_error("specified interpolation order not implemented.");
     }
