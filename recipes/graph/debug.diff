diff --git a/src/andres/graph/unit-test/multicut/greedy-additive.cxx b/src/andres/graph/unit-test/multicut/greedy-additive.cxx
index e304dc7..1a75a77 100755
--- a/src/andres/graph/unit-test/multicut/greedy-additive.cxx
+++ b/src/andres/graph/unit-test/multicut/greedy-additive.cxx
@@ -3,8 +3,11 @@
 #include "andres/graph/graph.hxx"
 #include "andres/graph/multicut/greedy-additive.hxx"
 
-inline void test(const bool& pred) { 
-    if(!pred) throw std::runtime_error("Test failed."); 
+inline void test(const bool& pred) {
+    if(!pred) {
+std::cout << "Test failing\n";
+	throw std::runtime_error("Test failed.");
+	}
 }
 
 void testMulticut() {
@@ -32,13 +35,28 @@ void testMulticut() {
     std::vector<char> edge_labels(graph.numberOfEdges());
     andres::graph::multicut::greedyAdditiveEdgeContraction(graph, weights, edge_labels);
 
+std::cout << "Test\n";
+std::cout << (long long)edge_labels[0] << '\n';
     test(edge_labels[0] == 0);
+std::cout << "Test\n";
+std::cout << (long long)edge_labels[1] << '\n';
     test(edge_labels[1] == 1);
+std::cout << "Test\n";
+std::cout << (long long)edge_labels[2] << '\n';
     test(edge_labels[2] == 0);
+std::cout << "Test\n";
+std::cout << (long long)edge_labels[3] << '\n';
     test(edge_labels[3] == 1);
+std::cout << "Test\n";
+std::cout << (long long)edge_labels[4] << '\n';
     test(edge_labels[4] == 1);
+std::cout << "Test\n";
+std::cout << (long long)edge_labels[5] << '\n';
     test(edge_labels[5] == 0);
+std::cout << "Test\n";
+std::cout << (long long)edge_labels[6] << '\n';
     test(edge_labels[6] == 0);
+std::cout << "Finished\n";
 }
 
 int main()
