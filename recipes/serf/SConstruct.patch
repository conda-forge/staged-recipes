--- SConstruct.orig	2020-05-23 00:39:06.624400482 -0500
+++ SConstruct	2020-05-23 15:46:50.200481533 -0500
@@ -8,9 +8,9 @@
 #    to you under the Apache License, Version 2.0 (the
 #    "License"); you may not use this file except in compliance
 #    with the License.  You may obtain a copy of the License at
-# 
+#
 #      http://www.apache.org/licenses/LICENSE-2.0
-# 
+#
 #    Unless required by applicable law or agreed to in writing,
 #    software distributed under the License is distributed on an
 #    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@@ -55,7 +55,7 @@
 # To be used to ensure a PREFIX directory is only created when installing.
 def createPathIsDirCreateWithTarget(target):
   def my_validator(key, val, env):
-    build_targets = (map(str, BUILD_TARGETS))
+    build_targets = (list(map(str, BUILD_TARGETS)))
     if target in build_targets:
       return PathVariable.PathIsDirCreate(key, val, env)
     else:
@@ -116,7 +116,7 @@
   RawListVariable('LINKFLAGS', "Extra flags for the linker (space-separated)",
                   None),
   RawListVariable('CPPFLAGS', "Extra flags for the C preprocessor "
-                  "(space separated)", None), 
+                  "(space separated)", None),
   )
 
 if sys.platform == 'win32':
@@ -157,8 +157,10 @@
                   CPPPATH=['.', ],
                   )
 
+env.Append( ENV = {'PATH': os.environ['PATH'] } )
+
 env.Append(BUILDERS = {
-    'GenDef' : 
+    'GenDef' :
       Builder(action = sys.executable + ' build/gen_def.py $SOURCES > $TARGET',
               suffix='.def', src_suffix='.h')
   })
@@ -166,7 +168,7 @@
 match = re.search('SERF_MAJOR_VERSION ([0-9]+).*'
                   'SERF_MINOR_VERSION ([0-9]+).*'
                   'SERF_PATCH_VERSION ([0-9]+)',
-                  env.File('serf.h').get_contents(),
+                  env.File('serf.h').get_contents().decode('utf-8'),
                   re.DOTALL)
 MAJOR, MINOR, PATCH = [int(x) for x in match.groups()]
 env.Append(MAJOR=str(MAJOR))
@@ -183,7 +185,7 @@
 
 unknown = opts.UnknownVariables()
 if unknown:
-  print 'Warning: Used unknown variables:', ', '.join(unknown.keys())
+  print('Warning: Used unknown variables:', ', '.join(unknown.keys()))
 
 apr = str(env['APR'])
 apu = str(env['APU'])
@@ -248,7 +250,7 @@
   env = conf.Finish()
 
   if have_gcc:
-    env.Append(CFLAGS=['-std=c89'])
+    #env.Append(CFLAGS=['-std=c89'])
     env.Append(CCFLAGS=['-Wdeclaration-after-statement',
                         '-Wmissing-prototypes',
                         '-Wall'])
