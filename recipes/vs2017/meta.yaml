# version numbering is explained at https://stackoverflow.com/questions/42730478/version-numbers-for-visual-studio-2017-boost-and-cmake
#     This version number follows the "platform toolset"
{% set vcver = "14.1" %}
{% set vsyear = "2017" %}
# VS2017 is fundamentally compatible with VS2015.  We name our package vs2015_runtime so that it can't be
#    mixed up with the runtime from VS2015 - you do actually need VS2017 runtime for things compiled with
#    VS2017, and the runtime we have here is backwards-compatible with things compiled with VS2015.
{% set runtime_year = "2015" %}

package:
  name: vs_activation_and_runtime
  version: 1.0.0

source:
  url: https://aka.ms/vs/15/release/vc_redist.x{{ cross_compiler_target_platform }}.exe

build:
  skip: True  # [not win]
  number: 1
  script:
    # This is bad bad conda building
    # But basically, we are installing this in a system directory
    # Then copying them in in the subpackages
    # This is a littlebit of a conda-forge/VS2017 workaround
    - vc_redist.x{{ cross_compiler_target_platform }}.exe /quiet /norestart

outputs:
  - name: vs{{ vsyear }}_{{ cross_compiler_target_platform }}
    version: {{ cl_version }}
    script: install_activate.bat
    build:
      track_features:
        - vc{{ vcver.split(".")[0] }}
      run_exports:
        strong:
          # compatible within major version.  This is MSFT's incrementing of the UCRT version.  It was
          #    14.0 with VS2015, and 14.1 with VS2017 - if the major version changes, we're assuming
          #    that binary compatibility breaks.  This has a minimum bound equal to vcver, so building with
          #    vs2017 here will require the vs2017-era runtime (the package is named vs2015_runtime, but the
          #    version differs)
          - {{ pin_subpackage('vc') }}
    about:
      summary: Activation and version verification of MSVC {{ vcver }} (VS {{ vsyear }} compiler, update {{ update_version }})
      license: BSD 3-clause
  - name: vs{{ runtime_year }}_runtime
    version: {{ runtime_version }}
    script: install_runtime.bat
    build:
      no_link:
        - |
          *.dll
        - Library/bin/*.dll
    about:
      summary: MSVC runtimes associated with cl.exe version {{ cl_version  }} (VS {{ vsyear }} update {{ update_version }})
  - name: vc
    version: {{ vcver }}
    build:
      number: 4
      track_features:
        - vc{{ vcver.split(".")[0] }}
    requirements:
      run:
        # Set lower bound for runtime (no upper bound).  Upper bound is still present, but
        #    it's part of the run_exports for the compiler: assume that when vcver's major version changes,
        #    MSFT has broken our binary compatibility.
        - {{ pin_subpackage('vs' ~ runtime_year ~ '_runtime', max_pin=None) }}
    about:
      home: https://github.com/conda/conda/wiki/VC-features
      license: BSD 3-clause
      license_family: BSD
      summary: A meta-package to impose mutual exclusivity among software built with different VS versions
      description: |
          This metapackage is used to enforce consistency of runtime
          dependencies within an environment
      doc_url: https://github.com/conda/conda/wiki/VC-features
      dev_url: https://github.com/conda/conda/wiki/VC-features


about:
  home: https://github.com/conda/conda/wiki/VC-features
  license: BSD 3-clause
  license_family: BSD
  summary: Activation and version verification of MSVC {{ vcver }} (VS {{ vsyear }} compiler, update {{ update_version }})

extra:
  recipe-maintainers:
    - hmaarrfk
