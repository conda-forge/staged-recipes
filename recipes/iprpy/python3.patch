From ac5adfa8b3e72c53e634d21eeaab3e237a480ab5 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jan=20Jan=C3=9Fen?= <janssen@mpie.de>
Date: Thu, 11 Jun 2020 11:17:07 +0200
Subject: [PATCH] print fix

---
 iprPy/calculation/bain_transformation_map/prepare.py          |  4 ++--
 iprPy/calculation/dislocation_crss/prepare.py                 |  4 ++--
 .../elastic_constants_dynamic/calc_dynamic_elastic.py         | 16 ++++++++--------
 3 files changed, 12 insertions(+), 12 deletions(-)

diff --git a/iprPy/calculation/bain_transformation_map/prepare.py b/iprPy/calculation/bain_transformation_map/prepare.py
index 18b6b5d..5911cc0 100644
--- a/iprPy/calculation/bain_transformation_map/prepare.py
+++ b/iprPy/calculation/bain_transformation_map/prepare.py
@@ -204,7 +204,7 @@ def __initial_setup(inline_terms, global_variables):
         
         #Issue a warning if the keyword is defined in global_variables
         if keyword in global_variables:
-            print 'Warning: high-throughput of', __calc_type__, 'ignores term', keyword
+            print('Warning: high-throughput of', __calc_type__, 'ignores term', keyword)
             
     #Convert 'copy_files' to boolean flag
     if calculation_variables['copy_files'].lower() == 'true':
@@ -276,4 +276,4 @@ def isclose(a, b, rel_tol=1e-09, abs_tol=0.0):
         try:
             return abs(a-b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol) 
         except:
-            return False
\ No newline at end of file
+            return False
diff --git a/iprPy/calculation/dislocation_crss/prepare.py b/iprPy/calculation/dislocation_crss/prepare.py
index afd09e5..ac9b0d0 100644
--- a/iprPy/calculation/dislocation_crss/prepare.py
+++ b/iprPy/calculation/dislocation_crss/prepare.py
@@ -227,7 +227,7 @@ def __initial_setup(inline_terms, global_variables):
         
         #Issue a warning if the keyword is defined in global_variables
         if keyword in global_variables:
-            print 'Warning: high-throughput of', __calc_type__, 'ignores term', keyword
+            print('Warning: high-throughput of', __calc_type__, 'ignores term', keyword)
             
     #Convert 'copy_files' to boolean flag
     if calculation_variables['copy_files'].lower() == 'true':
@@ -295,4 +295,4 @@ def isclose(a, b, rel_tol=1e-09, abs_tol=0.0):
         try:
             return abs(a-b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol) 
         except:
-            return False
\ No newline at end of file
+            return False
diff --git a/iprPy/calculation/elastic_constants_dynamic/calc_dynamic_elastic.py b/iprPy/calculation/elastic_constants_dynamic/calc_dynamic_elastic.py
index 9f49df8..1d6f461 100644
--- a/iprPy/calculation/elastic_constants_dynamic/calc_dynamic_elastic.py
+++ b/iprPy/calculation/elastic_constants_dynamic/calc_dynamic_elastic.py
@@ -402,7 +402,7 @@ def estimate_elastic_constants(raw_dict):
         
         # Calculate elastic constants
         delta_strain = raw_dict[eps[0]]['strain'][i] - raw_dict[eps[1]]['strain'][i]
-        print delta_strain
+        print(delta_strain)
         delta_stress = - np.array([ raw_dict[eps[0]]['pxx'][0] - raw_dict[eps[1]]['pxx'][0], 
                                     raw_dict[eps[0]]['pyy'][0] - raw_dict[eps[1]]['pyy'][0], 
                                     raw_dict[eps[0]]['pzz'][0] - raw_dict[eps[1]]['pzz'][0], 
@@ -409,7 +409,7 @@ def estimate_elastic_constants(raw_dict):
                                     raw_dict[eps[0]]['pyz'][0] - raw_dict[eps[1]]['pyz'][0], 
                                     raw_dict[eps[0]]['pxz'][0] - raw_dict[eps[1]]['pxz'][0], 
                                     raw_dict[eps[0]]['pxy'][0] - raw_dict[eps[1]]['pxy'][0] ])
-        print np.array_str(delta_stress, precision=4, supress_small=True)
+        print(np.array_str(delta_stress, precision=4, supress_small=True))
         cij[i] = delta_stress / delta_strain
         
         # Calculate error
@@ -420,18 +420,18 @@ def estimate_elastic_constants(raw_dict):
                                 raw_dict[eps[0]]['pxz'][1]**2 + raw_dict[eps[1]]['pxz'][1]**2,
                                 raw_dict[eps[0]]['pxy'][1]**2 + raw_dict[eps[1]]['pxy'][1]**2 ])**0.5 / delta_strain
 
-    print
-    print np.array_str(cij, precision=4, suppress_small=True)
-    print np.array_str(cij_std, precision=4, suppress_small=True)
+    print()
+    print(np.array_str(cij, precision=4, suppress_small=True))
+    print(np.array_str(cij_std, precision=4, suppress_small=True))
     
     # Average symmetric terms
     for i in xrange(6):
         for j in xrange(i):
             cij[i,j] = cij[j,i] = (cij[i,j] + cij[j,i]) / 2
             cij_std[i,j] = cij_std[j,i] = (cij_std[i,j] + cij_std[j,i]) / 2
-    print
-    print np.array_str(cij, precision=4, suppress_small=True)
-    print np.array_str(cij_std, precision=4, suppress_small=True)
+    print()
+    print(np.array_str(cij, precision=4, suppress_small=True))
+    print(np.array_str(cij_std, precision=4, suppress_small=True))
             
     results_dict['C'] = am.ElasticConstants(Cij=cij)
     results_dict['cij_std'] = cij_std
