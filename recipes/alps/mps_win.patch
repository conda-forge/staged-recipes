Index: applications/dmrg/mps/framework/dmrg/models/op_handler.h
===================================================================
--- applications/dmrg/mps/framework/dmrg/models/op_handler.h	(revision 7814)
+++ applications/dmrg/mps/framework/dmrg/models/op_handler.h	(working copy)
@@ -143,6 +143,7 @@
     typedef TagHandler<Matrix, SymmGroup> base;
     typedef typename OPTable<Matrix, SymmGroup>::tag_type tag_type;
     typedef typename base::op_t op_t;
+    typedef typename base::pair_map_it_t pair_map_it_t;
 
 public:
 
Index: applications/dmrg/mps/framework/dmrg/models/op_handler.hpp
===================================================================
--- applications/dmrg/mps/framework/dmrg/models/op_handler.hpp	(revision 7814)
+++ applications/dmrg/mps/framework/dmrg/models/op_handler.hpp	(working copy)
@@ -94,14 +94,10 @@
 
     // return tag of product, if already there
     try {
-#if defined(__xlC__) || defined(__FCC_VERSION)
-        if (product_tags.count(std::make_pair(t1, t2)) == 0)
+        pair_map_it_t match = product_tags.find(std::make_pair(t1, t2));
+        if (match == product_tags.end())
             throw std::out_of_range("");
-
-        return product_tags[std::make_pair(t1, t2)];
-#else
-        return product_tags.at(std::make_pair(t1, t2));
-#endif
+        return match->second;
     }
 
     // compute and register the product, then return the new tag
@@ -167,14 +163,10 @@
 
     // return tag of kronecker product, if already there
     try {
-#if defined(__xlC__) || defined(__FCC_VERSION)
-        if (kron_tags.count(std::make_pair(t1, t2)) == 0)
-            throw std::out_of_range("");
-
-        return kron_tags[std::make_pair(t1, t2)].first;
-#else
-        return kron_tags.at(std::make_pair(t1, t2)).first;
-#endif
+      pair_map_it_t match = kron_tags.find(std::make_pair(t1, t2));
+      if (match == kron_tags.end())
+          throw std::out_of_range("");
+      return match->second.first;
     }
     // compute and register the product, then return the new tag
     catch(const std::out_of_range& e) {
Index: applications/dmrg/mps/framework/dmrg/sim/sim.hpp
===================================================================
--- applications/dmrg/mps/framework/dmrg/sim/sim.hpp	(revision 7814)
+++ applications/dmrg/mps/framework/dmrg/sim/sim.hpp	(working copy)
@@ -148,12 +148,8 @@
 {
     std::ostringstream oss;
     oss.str("");
-#if defined(__xlC__) || defined(__FCC_VERSION)
     typename status_type::const_iterator match = status.find("sweep");
     oss << "/spectrum/iteration/" << match->second;
-#else
-    oss << "/spectrum/iteration/" << status.at("sweep");
-#endif
     return oss.str();
 }
 
Index: applications/dmrg/mps/framework/dmrg/mp_tensors/mps_initializers.h
===================================================================
--- applications/dmrg/mps/framework/dmrg/mp_tensors/mps_initializers.h	(revision 7814)
+++ applications/dmrg/mps/framework/dmrg/mp_tensors/mps_initializers.h	(working copy)
@@ -443,6 +443,7 @@
 class basis_mps_init : public mps_initializer<Matrix, SymmGroup>
 {
 public:
+    typedef std::vector<boost::tuple<typename SymmGroup::charge, std::size_t> > state_type;
     basis_mps_init(BaseParameters & params,
                    std::vector<Index<SymmGroup> > const& phys_dims_,
                    std::vector<int> const& site_type_)
@@ -459,10 +460,10 @@
         typedef typename SymmGroup::charge charge;
         charge C = SymmGroup::IdentityCharge;
         
-        std::vector<boost::tuple<charge, size_t> > state(mps.length());
+        state_type state(mps.length());
         for (int i=0; i<mps.length(); ++i)
             state[i] = boost::make_tuple(C, occupation[i]);
-        mps = state_mps<Matrix>(state, phys_dims, site_type);
+        mps = state_mps<Matrix, SymmGroup>(state, phys_dims, site_type);
     }
     
 private:
@@ -494,10 +495,10 @@
         using std::sqrt;
         size_t N = sqrt(double(phys_rho_dims[0][0].second));
         
-        std::vector<boost::tuple<charge, size_t> > state(mps.length());
+        std::vector<boost::tuple<charge, std::size_t> > state(mps.length());
         for (int i=0; i<mps.length(); ++i)
             state[i] = boost::make_tuple(C, occupation[i] + occupation[i]*N);
-        mps = state_mps<Matrix>(state, phys_rho_dims, site_type);
+        mps = state_mps<Matrix, SymmGroup>(state, phys_rho_dims, site_type);
     }
     
 private:
@@ -510,7 +511,7 @@
 class basis_mps_init_generic : public mps_initializer<Matrix, SymmGroup>
 {
 public:
-    typedef std::vector<boost::tuple<typename SymmGroup::charge, size_t> > state_type;
+    typedef std::vector<boost::tuple<typename SymmGroup::charge, std::size_t> > state_type;
     basis_mps_init_generic(BaseParameters & params,
                            std::vector<Index<SymmGroup> > const& phys_dims_,
                            typename SymmGroup::charge right_end_,
@@ -546,7 +547,7 @@
         if (mps.length() != state.size())
             throw std::runtime_error("Size of the initial state does not match the MPS size.");
         
-        mps = state_mps<Matrix>(state, phys_dims, site_type);
+        mps = state_mps<Matrix, SymmGroup>(state, phys_dims, site_type);
         if (mps[mps.length()-1].col_dim()[0].first != right_end)
             throw std::runtime_error("Initial state does not satisfy total quantum numbers.");
     }
Index: applications/dmrg/mps/framework/dmrg/mp_tensors/state_mps.h
===================================================================
--- applications/dmrg/mps/framework/dmrg/mp_tensors/state_mps.h	(revision 7814)
+++ applications/dmrg/mps/framework/dmrg/mp_tensors/state_mps.h	(working copy)
@@ -31,8 +31,8 @@
 
 #include <boost/tuple/tuple.hpp>
 
-template <class Matrix, class SymmGroup>
-MPS<Matrix, SymmGroup> state_mps(std::vector<boost::tuple<typename SymmGroup::charge, size_t> > const & state,
+template <class Matrix, class SymmGroup, class Charge>
+MPS<Matrix, SymmGroup> state_mps(std::vector<boost::tuple<Charge, std::size_t> > const & state,
                                  std::vector<Index<SymmGroup> > const& phys_dims, std::vector<int> const& site_type)
 {
     typedef typename SymmGroup::charge charge;
Index: applications/dmrg/mps/CMakeLists.txt
===================================================================
--- applications/dmrg/mps/CMakeLists.txt	(revision 7814)
+++ applications/dmrg/mps/CMakeLists.txt	(working copy)
@@ -60,10 +60,20 @@
 
 
   ### LIBRARY TARGETS
-  add_library(mps_utils SHARED ${MPS_UTILS_SOURCES})
+  if(NOT WIN32 AND BUILD_SHARED_LIBS)
+    add_library(mps_utils SHARED ${MPS_UTILS_SOURCES})
+  else()
+    add_library(mps_utils STATIC ${MPS_UTILS_SOURCES})
+  endif(NOT WIN32 AND BUILD_SHARED_LIBS)
   target_link_libraries(mps_utils alps ${LAPACK_LIBRARY} ${BLAS_LIBRARY} ${HDF5_LIBRARIES})
-  add_library(mps_models SHARED ${MPS_MODELS_SOURCES})
+  
+  if(NOT WIN32 AND BUILD_SHARED_LIBS)
+    add_library(mps_models SHARED ${MPS_MODELS_SOURCES})
+  else()
+    add_library(mps_models STATIC ${MPS_MODELS_SOURCES})
+  endif(NOT WIN32 AND BUILD_SHARED_LIBS)
   target_link_libraries(mps_models mps_utils alps ${LAPACK_LIBRARY} ${BLAS_LIBRARY} ${HDF5_LIBRARIES})
+
   #### SCHEDULER
   add_library(mps_pscan STATIC libpscan/scheduler.cpp libpscan/options.cpp)
 
