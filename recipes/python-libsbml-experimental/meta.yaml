{% set name = "python-libsbml-experimental" %}
{% set version = "5.18.3" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  # the url points to: python-libsbml.tar.gz, as the experimental package 
  # provides additional SBML extensions that are not yet ratified, and are 
  # disabled in the `python-libsbml` build. 
  url: https://github.com/sbmlteam/python-libsbml/releases/download/v{{ version }}/python-libsbml.tar.gz
  sha256: de7afd8fd7911849967ea9126fc5302595c08d49a1916176421341b01ead9f7b

build:
  number: 0

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - cmake

  host:
    - python
    - setuptools
    - pip
    - swig >=3.0.12

  run:
    - python

test:
  # Python imports
  imports:
    - libsbml

about:
  home: http://sbml.org
  license: LGPL-2.1-only
  license_file: LICENSE.txt
  license_family: LGPL
  summary: "LibSBML is an application programming interface library for reading, writing, manipulating and validating content expressed in the Systems Biology Markup Language (SBML) format."
  doc_url: http://sbml.org/Software/libSBML
  dev_url: https://github.com/sbmlteam/python-libsbml/
  description: |
      LibSBML is an application programming interface library for
      reading, writing, manipulating and validating content
      expressed in the Systems Biology Markup Language (SBML)
      format.
      
      It is written in ISO C and C++, provides language bindings
      for Common Lisp, Java, Python, Perl, MATLAB and Octave, and
      includes many features that facilitate adoption and use of
      both SBML and the library. Developers can embed libSBML in
      their applications, saving themselves the work of
      implementing their own SBML parsing, manipulation and
      validation software.
      
      Where python-libsbml holds all officially accepted SBML
      Level 3 extensions, python-libsbml-experimental
      additionally also contains extensions that are not
      officially ratified yet. That means that changes to the
      object structure and API are possible.

extra:
  recipe-maintainers:
    - fbergmann
