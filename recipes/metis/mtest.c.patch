--- Lib/proto.h	2013-03-22 20:12:01.547763581 +0900
+++ Lib/proto.h	2013-03-22 20:12:12.767843231 +0900
@@ -492,14 +492,14 @@
 /***************************************************************
 * Test Directory
 ****************************************************************/
-void Test_PartGraph(int, idxtype *, idxtype *);
+int Test_PartGraph(int, idxtype *, idxtype *);
 int VerifyPart(int, idxtype *, idxtype *, idxtype *, idxtype *, int, int, idxtype *);
 int VerifyWPart(int, idxtype *, idxtype *, idxtype *, idxtype *, int, float *, int, idxtype *);
-void Test_PartGraphV(int, idxtype *, idxtype *);
+int Test_PartGraphV(int, idxtype *, idxtype *);
 int VerifyPartV(int, idxtype *, idxtype *, idxtype *, idxtype *, int, int, idxtype *);
 int VerifyWPartV(int, idxtype *, idxtype *, idxtype *, idxtype *, int, float *, int, idxtype *);
-void Test_PartGraphmC(int, idxtype *, idxtype *);
+int Test_PartGraphmC(int, idxtype *, idxtype *);
 int VerifyPartmC(int, int, idxtype *, idxtype *, idxtype *, idxtype *, int, float *, int, idxtype *);
-void Test_ND(int, idxtype *, idxtype *);
+int Test_ND(int, idxtype *, idxtype *);
 int VerifyND(int, idxtype *, idxtype *);
 
--- Test/mtest.c	2013-03-22 19:56:41.517775367 +0900
+++ Test/mtest.c	2013-03-22 20:14:23.442104097 +0900
@@ -20,9 +20,10 @@
 /*************************************************************************
 * Let the game begin
 **************************************************************************/
-main(int argc, char *argv[])
+int main(int argc, char *argv[])
 {
   int i, nparts, options[10];
+  int n_err = 0;
   idxtype *part;
   float lbvec[MAXNCON], rubvec[MAXNCON];
   GraphType graph;
@@ -41,19 +42,21 @@
   printf("Graph Information ---------------------------------------------------\n");
   printf("  Name: %s, #Vertices: %d, #Edges: %d\n", argv[1], graph.nvtxs, graph.nedges/2);
 
-  Test_PartGraph(graph.nvtxs, graph.xadj, graph.adjncy);
+  n_err += Test_PartGraph(graph.nvtxs, graph.xadj, graph.adjncy);
 
-  Test_PartGraphV(graph.nvtxs, graph.xadj, graph.adjncy);
+  n_err += Test_PartGraphV(graph.nvtxs, graph.xadj, graph.adjncy);
 
-  Test_PartGraphmC(graph.nvtxs, graph.xadj, graph.adjncy);
+  n_err += Test_PartGraphmC(graph.nvtxs, graph.xadj, graph.adjncy);
 
-  Test_ND(graph.nvtxs, graph.xadj, graph.adjncy);
+  n_err += Test_ND(graph.nvtxs, graph.xadj, graph.adjncy);
 
   printf("\n---------------------------------------------------------------------\n");
   printf(" Testing completed.\n");
   printf("**********************************************************************\n");
 
   GKfree(&graph.xadj, &graph.adjncy, &graph.vwgt, &graph.adjwgt, LTERM);
+
+  return n_err;
 }  
 
 
@@ -61,11 +64,12 @@
 /*************************************************************************
 * This function tests the regular graph partitioning routines
 **************************************************************************/
-void Test_PartGraph(int nvtxs, idxtype *xadj, idxtype *adjncy)
+int Test_PartGraph(int nvtxs, idxtype *xadj, idxtype *adjncy)
 {
   int i, j, jj, k, tstnum, rcode;
   int nparts, numflag, wgtflag, edgecut, options[10];
   idxtype *part, *vwgt, *adjwgt;
+  int n_err = 0;
   float tpwgts[256];
 
   vwgt = idxmalloc(nvtxs, "vwgt");
@@ -112,7 +116,10 @@
   if ((rcode = VerifyPart(nvtxs, xadj, adjncy, NULL, NULL, nparts, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -125,7 +132,10 @@
   if ((rcode = VerifyPart(nvtxs, xadj, adjncy, NULL, adjwgt, nparts, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -138,7 +148,10 @@
   if ((rcode = VerifyPart(nvtxs, xadj, adjncy, vwgt, NULL, nparts, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -151,7 +164,10 @@
   if ((rcode = VerifyPart(nvtxs, xadj, adjncy, vwgt, adjwgt, nparts, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -164,7 +180,10 @@
   if ((rcode = VerifyPart(nvtxs, xadj, adjncy, vwgt, adjwgt, nparts, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -177,7 +196,10 @@
   if ((rcode = VerifyPart(nvtxs, xadj, adjncy, vwgt, adjwgt, nparts, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
   printf("\n");
@@ -198,7 +220,10 @@
   if ((rcode = VerifyWPart(nvtxs, xadj, adjncy, NULL, NULL, nparts, tpwgts, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -211,7 +236,10 @@
   if ((rcode = VerifyWPart(nvtxs, xadj, adjncy, NULL, adjwgt, nparts, tpwgts, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -224,7 +252,10 @@
   if ((rcode = VerifyWPart(nvtxs, xadj, adjncy, vwgt, NULL, nparts, tpwgts, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -237,7 +268,10 @@
   if ((rcode = VerifyWPart(nvtxs, xadj, adjncy, vwgt, adjwgt, nparts, tpwgts, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -250,7 +284,10 @@
   if ((rcode = VerifyWPart(nvtxs, xadj, adjncy, vwgt, adjwgt, nparts, tpwgts, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -263,7 +300,10 @@
   if ((rcode = VerifyWPart(nvtxs, xadj, adjncy, vwgt, adjwgt, nparts, tpwgts, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
   printf("\n");
@@ -283,7 +323,10 @@
   if ((rcode = VerifyPart(nvtxs, xadj, adjncy, NULL, NULL, nparts, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -296,7 +339,10 @@
   if ((rcode = VerifyPart(nvtxs, xadj, adjncy, NULL, adjwgt, nparts, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -309,7 +355,10 @@
   if ((rcode = VerifyPart(nvtxs, xadj, adjncy, vwgt, NULL, nparts, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -322,7 +371,10 @@
   if ((rcode = VerifyPart(nvtxs, xadj, adjncy, vwgt, adjwgt, nparts, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -335,7 +387,10 @@
   if ((rcode = VerifyPart(nvtxs, xadj, adjncy, vwgt, adjwgt, nparts, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -348,7 +403,10 @@
   if ((rcode = VerifyPart(nvtxs, xadj, adjncy, vwgt, adjwgt, nparts, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -361,7 +419,10 @@
   if ((rcode = VerifyPart(nvtxs, xadj, adjncy, vwgt, adjwgt, nparts, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -374,7 +435,10 @@
   if ((rcode = VerifyPart(nvtxs, xadj, adjncy, vwgt, adjwgt, nparts, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
   printf("\n");
@@ -395,7 +459,10 @@
   if ((rcode = VerifyWPart(nvtxs, xadj, adjncy, NULL, NULL, nparts, tpwgts, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -408,7 +475,10 @@
   if ((rcode = VerifyWPart(nvtxs, xadj, adjncy, NULL, adjwgt, nparts, tpwgts, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -421,7 +491,10 @@
   if ((rcode = VerifyWPart(nvtxs, xadj, adjncy, vwgt, NULL, nparts, tpwgts, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -434,7 +507,10 @@
   if ((rcode = VerifyWPart(nvtxs, xadj, adjncy, vwgt, adjwgt, nparts, tpwgts, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -447,7 +523,10 @@
   if ((rcode = VerifyWPart(nvtxs, xadj, adjncy, vwgt, adjwgt, nparts, tpwgts, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -460,7 +539,10 @@
   if ((rcode = VerifyWPart(nvtxs, xadj, adjncy, vwgt, adjwgt, nparts, tpwgts, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -473,7 +555,10 @@
   if ((rcode = VerifyWPart(nvtxs, xadj, adjncy, vwgt, adjwgt, nparts, tpwgts, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -486,12 +571,17 @@
   if ((rcode = VerifyWPart(nvtxs, xadj, adjncy, vwgt, adjwgt, nparts, tpwgts, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
   printf("\n");
 
   GKfree(&vwgt, &adjwgt, &part, LTERM);
+
+  return n_err;
 }
 
 
@@ -603,10 +693,11 @@
 /*************************************************************************
 * This function tests the regular graph partitioning routines
 **************************************************************************/
-void Test_PartGraphV(int nvtxs, idxtype *xadj, idxtype *adjncy)
+int Test_PartGraphV(int nvtxs, idxtype *xadj, idxtype *adjncy)
 {
   int i, j, jj, k, tstnum, rcode;
   int nparts, numflag, wgtflag, totalv, options[10];
+  int n_err = 0;
   idxtype *part, *vwgt, *vsize;
   float tpwgts[256];
 
@@ -641,7 +732,10 @@
   if ((rcode = VerifyPartV(nvtxs, xadj, adjncy, NULL, NULL, nparts, totalv, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -654,7 +748,10 @@
   if ((rcode = VerifyPartV(nvtxs, xadj, adjncy, NULL, vsize, nparts, totalv, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -667,7 +764,10 @@
   if ((rcode = VerifyPartV(nvtxs, xadj, adjncy, vwgt, NULL, nparts, totalv, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -680,7 +780,10 @@
   if ((rcode = VerifyPartV(nvtxs, xadj, adjncy, vwgt, vsize, nparts, totalv, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -693,7 +796,10 @@
   if ((rcode = VerifyPartV(nvtxs, xadj, adjncy, vwgt, vsize, nparts, totalv, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -706,7 +812,10 @@
   if ((rcode = VerifyPartV(nvtxs, xadj, adjncy, vwgt, vsize, nparts, totalv, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -719,7 +828,10 @@
   if ((rcode = VerifyPartV(nvtxs, xadj, adjncy, vwgt, vsize, nparts, totalv, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
   printf("\n");
@@ -740,7 +852,10 @@
   if ((rcode = VerifyWPartV(nvtxs, xadj, adjncy, NULL, NULL, nparts, tpwgts, totalv, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -753,7 +868,10 @@
   if ((rcode = VerifyWPartV(nvtxs, xadj, adjncy, NULL, vsize, nparts, tpwgts, totalv, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -766,7 +884,10 @@
   if ((rcode = VerifyWPartV(nvtxs, xadj, adjncy, vwgt, NULL, nparts, tpwgts, totalv, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -779,7 +900,10 @@
   if ((rcode = VerifyWPartV(nvtxs, xadj, adjncy, vwgt, vsize, nparts, tpwgts, totalv, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -792,7 +916,10 @@
   if ((rcode = VerifyWPartV(nvtxs, xadj, adjncy, vwgt, vsize, nparts, tpwgts, totalv, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -805,7 +932,10 @@
   if ((rcode = VerifyWPartV(nvtxs, xadj, adjncy, vwgt, vsize, nparts, tpwgts, totalv, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -818,13 +948,18 @@
   if ((rcode = VerifyWPartV(nvtxs, xadj, adjncy, vwgt, vsize, nparts, tpwgts, totalv, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
   printf("\n");
 
 
   GKfree(&vwgt, &vsize, &part, LTERM);
+
+  return n_err;
 }
 
 
@@ -949,10 +1084,11 @@
 /*************************************************************************
 * This function tests the regular graph partitioning routines
 **************************************************************************/
-void Test_PartGraphmC(int nvtxs, idxtype *xadj, idxtype *adjncy)
+int Test_PartGraphmC(int nvtxs, idxtype *xadj, idxtype *adjncy)
 {
   int i, j, jj, k, tstnum, rcode;
   int nparts, ncon, numflag, wgtflag, edgecut, options[10];
+  int n_err = 0;
   idxtype *part, *vwgt, *adjwgt;
   float ubvec[MAXNCON];
 
@@ -997,7 +1133,10 @@
   if ((rcode = VerifyPartmC(nvtxs, ncon, xadj, adjncy, vwgt, NULL, nparts, ubvec, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1011,7 +1150,10 @@
   if ((rcode = VerifyPartmC(nvtxs, ncon, xadj, adjncy, vwgt, adjwgt, nparts, ubvec, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1025,7 +1167,10 @@
   if ((rcode = VerifyPartmC(nvtxs, ncon, xadj, adjncy, vwgt, adjwgt, nparts, ubvec, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1039,7 +1184,10 @@
   if ((rcode = VerifyPartmC(nvtxs, ncon, xadj, adjncy, vwgt, adjwgt, nparts, ubvec, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1053,7 +1201,10 @@
   if ((rcode = VerifyPartmC(nvtxs, ncon, xadj, adjncy, vwgt, adjwgt, nparts, ubvec, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1067,7 +1218,10 @@
   if ((rcode = VerifyPartmC(nvtxs, ncon, xadj, adjncy, vwgt, adjwgt, nparts, ubvec, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1081,7 +1235,10 @@
   if ((rcode = VerifyPartmC(nvtxs, ncon, xadj, adjncy, vwgt, adjwgt, nparts, ubvec, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1095,7 +1252,10 @@
   if ((rcode = VerifyPartmC(nvtxs, ncon, xadj, adjncy, vwgt, adjwgt, nparts, ubvec, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1109,7 +1269,10 @@
   if ((rcode = VerifyPartmC(nvtxs, ncon, xadj, adjncy, vwgt, adjwgt, nparts, ubvec, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1123,7 +1286,10 @@
   if ((rcode = VerifyPartmC(nvtxs, ncon, xadj, adjncy, vwgt, adjwgt, nparts, ubvec, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
   printf("\n  ");
@@ -1138,7 +1304,10 @@
   if ((rcode = VerifyPartmC(nvtxs, ncon, xadj, adjncy, vwgt, adjwgt, nparts, ubvec, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1152,7 +1321,10 @@
   if ((rcode = VerifyPartmC(nvtxs, ncon, xadj, adjncy, vwgt, adjwgt, nparts, ubvec, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
   printf("\n");
@@ -1172,7 +1344,10 @@
   if ((rcode = VerifyPartmC(nvtxs, ncon, xadj, adjncy, vwgt, NULL, nparts, ubvec, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1186,7 +1361,10 @@
   if ((rcode = VerifyPartmC(nvtxs, ncon, xadj, adjncy, vwgt, adjwgt, nparts, ubvec, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1200,7 +1378,10 @@
   if ((rcode = VerifyPartmC(nvtxs, ncon, xadj, adjncy, vwgt, adjwgt, nparts, ubvec, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1214,7 +1395,10 @@
   if ((rcode = VerifyPartmC(nvtxs, ncon, xadj, adjncy, vwgt, adjwgt, nparts, ubvec, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1228,7 +1412,10 @@
   if ((rcode = VerifyPartmC(nvtxs, ncon, xadj, adjncy, vwgt, adjwgt, nparts, ubvec, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1242,7 +1429,10 @@
   if ((rcode = VerifyPartmC(nvtxs, ncon, xadj, adjncy, vwgt, adjwgt, nparts, ubvec, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1256,7 +1446,10 @@
   if ((rcode = VerifyPartmC(nvtxs, ncon, xadj, adjncy, vwgt, adjwgt, nparts, ubvec, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1270,7 +1463,10 @@
   if ((rcode = VerifyPartmC(nvtxs, ncon, xadj, adjncy, vwgt, adjwgt, nparts, ubvec, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1284,7 +1480,10 @@
   if ((rcode = VerifyPartmC(nvtxs, ncon, xadj, adjncy, vwgt, adjwgt, nparts, ubvec, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1298,7 +1497,10 @@
   if ((rcode = VerifyPartmC(nvtxs, ncon, xadj, adjncy, vwgt, adjwgt, nparts, ubvec, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
   printf("\n  ");
@@ -1313,7 +1515,10 @@
   if ((rcode = VerifyPartmC(nvtxs, ncon, xadj, adjncy, vwgt, adjwgt, nparts, ubvec, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1327,7 +1532,10 @@
   if ((rcode = VerifyPartmC(nvtxs, ncon, xadj, adjncy, vwgt, adjwgt, nparts, ubvec, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1341,7 +1549,10 @@
   if ((rcode = VerifyPartmC(nvtxs, ncon, xadj, adjncy, vwgt, adjwgt, nparts, ubvec, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1355,13 +1566,18 @@
   if ((rcode = VerifyPartmC(nvtxs, ncon, xadj, adjncy, vwgt, adjwgt, nparts, ubvec, edgecut, part)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
   printf("\n");
 
   GKfree(&vwgt, &adjwgt, &part, LTERM);
+
+  return n_err;
 }
 
 
@@ -1433,10 +1649,11 @@
 /*************************************************************************
 * This function tests the regular graph partitioning routines
 **************************************************************************/
-void Test_ND(int nvtxs, idxtype *xadj, idxtype *adjncy)
+int Test_ND(int nvtxs, idxtype *xadj, idxtype *adjncy)
 {
   int i, j, jj, k, tstnum, rcode;
   int numflag, wgtflag, options[10];
+  int n_err = 0;
   idxtype *perm, *iperm, *vwgt;
 
   vwgt = idxmalloc(nvtxs, "vwgt");
@@ -1461,7 +1678,10 @@
   if ((rcode = VerifyND(nvtxs, perm, iperm)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1473,7 +1693,10 @@
   if ((rcode = VerifyND(nvtxs, perm, iperm)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1485,7 +1708,10 @@
   if ((rcode = VerifyND(nvtxs, perm, iperm)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
   printf("\n");
@@ -1504,7 +1730,10 @@
   if ((rcode = VerifyND(nvtxs, perm, iperm)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1517,7 +1746,10 @@
   if ((rcode = VerifyND(nvtxs, perm, iperm)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1530,7 +1762,10 @@
   if ((rcode = VerifyND(nvtxs, perm, iperm)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1543,7 +1778,10 @@
   if ((rcode = VerifyND(nvtxs, perm, iperm)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1556,7 +1794,10 @@
   if ((rcode = VerifyND(nvtxs, perm, iperm)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1569,7 +1810,10 @@
   if ((rcode = VerifyND(nvtxs, perm, iperm)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1582,7 +1826,10 @@
   if ((rcode = VerifyND(nvtxs, perm, iperm)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1595,7 +1842,10 @@
   if ((rcode = VerifyND(nvtxs, perm, iperm)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1608,7 +1858,10 @@
   if ((rcode = VerifyND(nvtxs, perm, iperm)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1621,7 +1874,10 @@
   if ((rcode = VerifyND(nvtxs, perm, iperm)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
   printf("\n  ");
@@ -1635,7 +1891,10 @@
   if ((rcode = VerifyND(nvtxs, perm, iperm)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1648,7 +1907,10 @@
   if ((rcode = VerifyND(nvtxs, perm, iperm)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1661,7 +1923,10 @@
   if ((rcode = VerifyND(nvtxs, perm, iperm)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
   printf("\n");
@@ -1680,7 +1945,10 @@
   if ((rcode = VerifyND(nvtxs, perm, iperm)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1692,7 +1960,10 @@
   if ((rcode = VerifyND(nvtxs, perm, iperm)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1704,7 +1975,10 @@
   if ((rcode = VerifyND(nvtxs, perm, iperm)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1716,7 +1990,10 @@
   if ((rcode = VerifyND(nvtxs, perm, iperm)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1728,7 +2005,10 @@
   if ((rcode = VerifyND(nvtxs, perm, iperm)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
 
@@ -1740,13 +2020,18 @@
   if ((rcode = VerifyND(nvtxs, perm, iperm)) == 0)
     printf("[%d:ok]", tstnum++);
   else
+  {
     printf("[%d:err-%d]", tstnum++, rcode);
+    n_err++;
+  }
   fflush(stdout);
 
   printf("\n");
 
 
   GKfree(&vwgt, &perm, &iperm, LTERM);
+
+  return n_err;
 }
 
 
