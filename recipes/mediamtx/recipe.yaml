# yaml-language-server: $schema=https://raw.githubusercontent.com/prefix-dev/recipe-format/main/schema.json
schema_version: 1

context:
  version: "1.12.3"

package:
  version: ${{ version }}
  name: mediamtx

source:
  - url: https://github.com/bluenviron/mediamtx/archive/refs/tags/v1.12.3.tar.gz
    sha256: 0059f748ad37cbc467b6370caddeb661c152e304f4eb2fd51d2b0dc8d2e72554
    target_directory: src/mediamtx
  - path: service.yaml
    target_directory: service-config

build:
  number: 0
  script:
    interpreter: nu
    content: |
      echo $"Building ($env.PKG_NAME) version ($env.PKG_VERSION)..."

      # Change to source directory
      cd src/mediamtx

      # Create VERSION file with correct version
      print $"Creating VERSION file with version ($env.PKG_VERSION)..."
      $"v($env.PKG_VERSION)" | save VERSION

      # Run go generate to create embedded files
      print "Generating embedded files..."
      go generate ./...

      # Set up LDFLAGS for optimized binary
      mut ldflags = ["-s" "-w"]

      let ldflags_str = ($ldflags | str join " ")

      # Build the binary with static linking
      $env.CGO_ENABLED = "0"
      let output_path = if ($nu.os-info.name == "windows") {
        $"($env.PREFIX)/bin/mediamtx.exe"
      } else {
        $"($env.PREFIX)/bin/mediamtx"
      }
      go build -ldflags $ldflags_str -o $output_path .

      # Install service configuration file
      print "Installing service configuration file..."

      let config_dir = $"($env.PREFIX)/config"
      mkdir $config_dir
      cp $"($env.SRC_DIR)/service-config/service.yaml" $"($config_dir)/service.yaml"

      # Verify the file was placed correctly
      if ($"($config_dir)/service.yaml" | path exists) {
        print $"✓ Service configuration installed to: ($config_dir)/service.yaml"
      } else {
        print $"❌ Failed to install service configuration to: ($config_dir)/service.yaml"
      }

      # Collect licenses from all dependencies (optional)
      print "Collecting dependency licenses..."
      let license_dir = $"($env.SRC_DIR)/license-files"
      mkdir $license_dir

      # Save licenses, ignoring common problematic packages
      # Use try to make this step optional if it fails
      try {
        (go-licenses save .
          --save_path=$license_dir
          --ignore=golang.org/x/sys/unix
          --ignore=golang.org/x/crypto/internal/poly1305
          --ignore=golang.org/x/crypto/salsa20/salsa
          --ignore=golang.org/x/crypto/argon2
          --ignore=golang.org/x/crypto/blake2b
          --ignore=golang.org/x/sys/cpu
          --ignore=golang.org/x/crypto/sha3
          --ignore=github.com/ugorji/go/codec
          --ignore=github.com/benburkert/openpgp)
      } catch {
        print "Warning: go-licenses failed, proceeding without dependency licenses"
      }

requirements:
  build:
    - nushell
      # For static binaries without C dependencies
    - go-licenses
    - if: arm64
      then:
        - ${{ compiler('go-nocgo_linux-aarch64') }}
    - if: x86_64
      then:
        - ${{ compiler('go-nocgo') }}

tests:
  # Test 1: Verify package contents are included
  - package_contents:
      files:
        # MediaMTX binary
        - bin/mediamtx${{ ".exe" if win }}
        # Service configuration file
        - config/service.yaml

      # Test 2: Functional tests
  - requirements:
      build:
        - nushell
    script:
      interpreter: nu
      content:
        # Test that the binary works
        - ^mediamtx --version
        - ^mediamtx --help

about:
  homepage: https://github.com/bluenviron/mediamtx/blob/main/README.md
  summary: "MediaMTX is a live media server"
  description: |
    MediaMTX is a ready-to-use and zero-dependency real-time media server and
    media proxy that allows to publish, read, proxy, record and playback video and audio streams.
    It has been conceived as a "media router" that routes media streams from one end to the other.
  license: Apache-2.0
  license_file:
    - src/mediamtx/LICENSE
  documentation: https://github.com/bluenviron/mediamtx/blob/main/README.md
  repository: https://github.com/bluenviron/mediamtx

extra:
  recipe-maintainers:
    - phreed
