{% set name = "optionsfactory" %}
{% set version = "1.0.3" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: 43f0c4ace9ecde6e755aaeef0bcd9ff78c2503e85d189c6db51c7b8387183819

build:
  noarch: python
  number: 0
  script: "{{ PYTHON }} -m pip install . -vv"

requirements:
  host:
    - python >=3.6
    - pip
  run:
    - python >=3.6

test:
  imports:
    - optionsfactory
  requires:
    - pytest
    - pyyaml
  commands:
    - pytest --pyargs optionsfactory

about:
  home: https://github.com/johnomotani/optionsfactory
  license: BSD-3-Clause
  license_family: BSD
  license_file: LICENSE
  summary: 'Python package for handling user-provided options with flexible defaults, documentation and checking'

  description: |
    OptionsFactory allows you to define a set of options, which can have (if you like): default
    values (which may be expressions depending on other options); documentation for each option;
    an allowed type or list of types; a check that the value option is on an allowed list;
    checks that the value of an option satisfies some tests.
    Once the options are defined in an OptionsFactory, you create a particular instance of the
    options by passing some user settings (a dict or YAML file). The OptionsFactory uses the
    values passed, sets the remaining options from the default values or expressions and returns
    an Options object. Options are immutable so that you do not have to worry about the options
    being accidentally changed during execution - however, the package also provides
    MutableOptionsFactory if you do want to be able to update the options dynamically.
  dev_url: https://github.com/johnomotani/optionsfactory

extra:
  recipe-maintainers:
    - johnomotani
