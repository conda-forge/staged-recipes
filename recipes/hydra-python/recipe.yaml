# yaml-language-server: $schema=https://raw.githubusercontent.com/prefix-dev/recipe-format/refs/heads/renovate/pixi/schema.json
schema_version: 1

context:
  name: hydra-python
  version: "0.12.0"
  python_min: "3.12"

package:
  name: ${{ name }}
  version: ${{ version }}

source:
  url: https://github.com/CategoricalData/hydra/archive/refs/tags/${{ version }}.tar.gz
  sha256: 2fbfd7e25bd876fe83d66a9fc0b0c0193a55f34441642b74dede9fdaf4a0a2df

build:
  number: 0
  noarch: python
  script:
    interpreter: nushell
    content: |
      # Build the Python package using pip
      cd ($env.SRC_DIR | path join "hydra-python")

      # Create missing __init__.py file for the hydra package
      let recipe_init = ($env.RECIPE_DIR | path join "__init__.py")
      let main_hydra_dir = ($env.SRC_DIR | path join "hydra-python" "src" "main" "python" "hydra")
      let main_init_target = ($main_hydra_dir | path join "__init__.py")

      # Only add __init__.py if it doesn't exist
      if not ($main_init_target | path exists) {
        cp $recipe_init $main_init_target
      }

      # Also check and create for gen-main directory if it exists
      let gen_hydra_dir = ($env.SRC_DIR | path join "hydra-python" "src" "gen-main" "python" "hydra")
      if ($gen_hydra_dir | path exists) and not (($gen_hydra_dir | path join "__init__.py") | path exists) {
        cp $recipe_init ($gen_hydra_dir | path join "__init__.py")
      }

      # Install the package using pip into the host environment (PREFIX)
      with-env {PYTHONPATH: $env.SP_DIR} {
        ^$env.PYTHON -m pip install . --no-deps --ignore-installed --no-cache-dir --prefix $env.PREFIX -vvv
      }

      # Copy license and documentation
      if ("README.md" | path exists) { cp README.md $env.PREFIX }

requirements:
  build:
    - python ${{ python_min }}.*
    - pip >=21.0,<25.0
    - hatchling >=1.8.0,<2.0
    - nushell >=0.80.0,<1.0
  host:
    - python ${{ python_min }}.*
    - pip >=21.0,<25.0
    - hatchling >=1.8.0,<2.0
  run:
    - python >=${{ python_min }},<4.0

tests:
  - python:
      python_version: ${{ python_min }}.*
      imports:
        - hydra
      pip_check: true

about:
  homepage: https://github.com/CategoricalData/hydra
  license: Apache-2.0
  license_file: LICENSE
  summary: Hydra Python implementation - type-safe transformations for data and programs
  description: |
    Hydra is a domain-specific language for data models and data transformations.
    It is based on a typed lambda calculus, and transforms data and schemas between
    languages in a way which maintains type conformance. This package contains the
    Python implementation of Hydra (in progress).

    Note: This package focuses on the working submodules. The main hydra module
    may have import limitations due to upstream package structure issues.
  repository: https://github.com/CategoricalData/hydra
  documentation: https://github.com/CategoricalData/hydra/tree/main/hydra-python

extra:
  recipe-maintainers:
    - joshsh
    - phreed
