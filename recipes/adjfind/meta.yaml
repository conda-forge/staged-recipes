{% set name = "adjfind" %}
{% set version = "0.1.3" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/zwang-geog/AdjFind/archive/refs/tags/v{{ version }}.tar.gz
  sha256: 70411994bb4f1a6f97dcf4e6568b0df08cf20e67aa1e8d6c7fa45a9c80cb02a6

build:
  number: 0
  script: |
    mkdir build
    cd build
    cmake ${CMAKE_ARGS} ..  # [unix]
    cmake %CMAKE_ARGS% ..  # [win]
    cmake --build . --config Release
    cmake --install .

requirements:
  build:
    - cmake
    - make  # [unix]
    - git
    - {{ compiler('cxx') }}
    - {{ compiler('c') }}
    - {{ stdlib('c') }}
  host:
    - libgdal-core
    - libboost-devel
  run:
    - libgdal-core
    - libboost

test:
  commands:
    - adjfind --help
    - adjfind --version

about:
  home: https://github.com/zwang-geog/AdjFind
  license: MIT
  license_file: LICENSE
  summary: CLI of specialized path finding algorithms related to adjacency/proximity
  description: |
    The command-line tool supports three main modes:
    • Road Segmentation Mode: Determines which service points (e.g., hydrants) are closest to each road segment using network distance, and optionally splits roads into discrete distance categories for service area analysis.
    • Neighboring Points Mode: Identifies the nearest neighboring service points along a road network in each direction, calculating spacing distances between facilities like hydrants for regulatory compliance assessment.
    • Structure Access Mode: Computes shortest unobstructed paths from building corners to road networks, finding the least accessible points on buildings for emergency response planning and fire code compliance.
  doc_url: https://github.com/zwang-geog/AdjFind/blob/master/README.md
  dev_url: https://github.com/zwang-geog/AdjFind

extra:
  recipe-maintainers:
    - zwang-geog
