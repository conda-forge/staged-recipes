2011-09-01 Duc Nguyen
  displayGraph() is updated to accept BipartiteGraphPartialColoringInterface &g
    At this point, displayGraph(BipartiteGraphPartialColoringInterface &g) cannot highlight coloring conflicts yet
2011-09-01 Duc Nguyen
  Add "int displayGraph(ColPack::GraphColoring &g);" in extra.cpp to support debugging
    this function will create the DOT-file that describe the graph (with or without color) , and then utilize GraphViz to display the graph in image.
    In the case of Star Coloring, if there are conflict(s), the conflict(s) will be highlighted in bold edges.
    Each node in the graph will have name in this form "v#_c#" (vertex ID follow by color ID (0-based indexing))
2011-03-22 Duc Nguyen
  Version 1.0.3
  Fixed HessianRecovery::IndirectRecover_CoordinateFormat_vectors() bug that cause ColPack to crash
    PROBLEM: vd_IncludedVertices[] is used to keep both the values stored at the vertices and to mark that a vertex is no longer a part of the tree
      by setting vd_IncludedVertices[] = _UNKNOWN (-1) => ColPack crashed when some of the recovered values are -1
    SOLUTION: use a separate array vb_IncludedVertices[] to mark that a vertex is no longer a part of the tree
  Support for "make -j EXTRA_FLAGS=-D_COLPACK_CHECKPOINT_" are added for Bug Report purpose
    If you use ColPack  indirrectly via another tool like ADIC or ADOL-C, you can generate the graph by
    running "make clean && make -j EXTRA_FLAGS=-D_COLPACK_CHECKPOINT_". When the program is executed,
    ColPack library will generate a Matrix Market format file ColPack_input_graph.mtx in the same directory as the running program.
    If this does not work, you can also force ColPack to generate the file by calling g->WriteMatrixMarket()
    with g is a GraphColoringInterface, BipartiteGraphPartialColoringInterface, or BipartiteGraphBicoloringInterface object
  Interface functions for ADIC partially developed
    BipartiteGraphPartialColoringInterface() now accepts input from ADIC (int i_type=SRC_MEM_ADIC)
      BipartiteGraphPartialColoringInterface(int i_type, std::list<std::set<int> >*  valsetlist, int rowCount)
      a bipartite graph can be built by calling:
	BipartiteGraphPartialColoringInterface *g = new BipartiteGraphPartialColoringInterface(SRC_MEM_ADIC, &valsetlist, rowCount);
    add int JacobianRecovery1D::RecoverD2Cln_ADICFormat(
							BipartiteGraphPartialColoringInterface* g,
							double** dp2_CompressedMatrix,
							std::list<std::set<int> >& lsi_SparsityPattern,
							std::list<std::vector<double> > &lvd_NewValue)