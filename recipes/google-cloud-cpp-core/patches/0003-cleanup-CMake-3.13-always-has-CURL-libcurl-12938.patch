From e0c98bb473f3571b86637691395f79fd869c9089 Mon Sep 17 00:00:00 2001
From: Carlos O'Ryan <coryan@google.com>
Date: Fri, 20 Oct 2023 13:47:21 -0400
Subject: [PATCH] cleanup: CMake >= 3.13 always has `CURL::libcurl` (#12938)

Since we now require CMake >= 3.13, we do not need workarounds to define
`CURL::libcurl`.
---
 cmake/FindCurlWithTargets.cmake               | 68 -------------------
 examples/CMakeLists.txt                       |  2 +-
 .../google_cloud_cpp_rest_internal.cmake      |  2 +-
 .../cloud/storage/benchmarks/CMakeLists.txt   |  2 -
 google/cloud/storage/config-grpc.cmake.in     | 11 ---
 .../storage/google_cloud_cpp_storage.cmake    |  2 +-
 google/cloud/storage/tests/CMakeLists.txt     |  1 -
 7 files changed, 3 insertions(+), 85 deletions(-)
 delete mode 100644 cmake/FindCurlWithTargets.cmake

diff --git a/cmake/FindCurlWithTargets.cmake b/cmake/FindCurlWithTargets.cmake
deleted file mode 100644
index 77c35b40f1..0000000000
--- a/cmake/FindCurlWithTargets.cmake
+++ /dev/null
@@ -1,68 +0,0 @@
-# ~~~
-# Copyright 2018 Google Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     https://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-# ~~~
-
-# gRPC always requires thread support.
-find_package(Threads REQUIRED)
-
-# The `FindCurl` CMake module does not handle static libraries correctly, and
-# does not produce consistent names for the CURL targets. This file first tries
-# to load the CURL config files, and only if not found fallsback to the FindCurl
-# module. In the latter case, it adjusts the targets to work consistently across
-# CMake versions and to link the right dependencies when compiled statically.
-
-find_package(CURL CONFIG QUIET)
-if (CURL_FOUND)
-    message(STATUS "CURL found using via CONFIG module")
-else ()
-    # As searching for libcurl using CONFIG mode failed, try again using the
-    # CMake config module. We will need to fix up a few things if the module is
-    # found this way.
-    find_package(CURL REQUIRED)
-    # If the library is static, we need to explicitly link its dependencies. The
-    # CMake module does not do so. However, we should not do so for shared
-    # libraries, because the version of OpenSSL (for example) found by
-    # find_package() may be newer than the version linked against libcurl.
-    if ("${CURL_LIBRARY}" MATCHES "${CMAKE_STATIC_LIBRARY_SUFFIX}$")
-        find_package(OpenSSL REQUIRED)
-        find_package(ZLIB REQUIRED)
-        set_property(
-            TARGET CURL::libcurl
-            APPEND
-            PROPERTY INTERFACE_LINK_LIBRARIES OpenSSL::SSL OpenSSL::Crypto
-                     ZLIB::ZLIB)
-        message(STATUS "CURL linkage will be static")
-        # On WIN32 and APPLE there are even more libraries needed for static
-        # linking.
-        if (WIN32)
-            set_property(
-                TARGET CURL::libcurl
-                APPEND
-                PROPERTY INTERFACE_LINK_LIBRARIES crypt32 wsock32 ws2_32)
-            set_property(
-                TARGET CURL::libcurl
-                APPEND
-                PROPERTY INTERFACE_COMPILE_DEFINITIONS "CURL_STATICLIB")
-        endif ()
-        if (APPLE)
-            set_property(
-                TARGET CURL::libcurl
-                APPEND
-                PROPERTY INTERFACE_LINK_LIBRARIES ldap)
-        endif ()
-    else ()
-        message(STATUS "CURL linkage will be non-static")
-    endif ()
-endif (CURL_FOUND)
diff --git a/examples/CMakeLists.txt b/examples/CMakeLists.txt
index ec8b73953e..ce44aafea4 100644
--- a/examples/CMakeLists.txt
+++ b/examples/CMakeLists.txt
@@ -32,7 +32,7 @@ if (bigtable IN_LIST GOOGLE_CLOUD_CPP_ENABLE AND storage IN_LIST
     google_cloud_cpp_add_common_options(gcs2cbt)
 endif ()
 
-include(FindCurlWithTargets)
+find_package(CURL REQUIRED)
 include(FindgRPC)
 
 if (spanner IN_LIST GOOGLE_CLOUD_CPP_ENABLE AND iam IN_LIST
diff --git a/google/cloud/google_cloud_cpp_rest_internal.cmake b/google/cloud/google_cloud_cpp_rest_internal.cmake
index e6d7b97109..750df05d50 100644
--- a/google/cloud/google_cloud_cpp_rest_internal.cmake
+++ b/google/cloud/google_cloud_cpp_rest_internal.cmake
@@ -15,7 +15,7 @@
 # ~~~
 
 include(IncludeNlohmannJson)
-include(FindCurlWithTargets)
+find_package(CURL REQUIRED)
 find_package(OpenSSL REQUIRED)
 
 # the library
diff --git a/google/cloud/storage/benchmarks/CMakeLists.txt b/google/cloud/storage/benchmarks/CMakeLists.txt
index 7f951126d7..064ab041a7 100644
--- a/google/cloud/storage/benchmarks/CMakeLists.txt
+++ b/google/cloud/storage/benchmarks/CMakeLists.txt
@@ -69,7 +69,6 @@ foreach (fname ${storage_benchmark_programs})
                 google-cloud-cpp::storage
                 google-cloud-cpp::common
                 absl::strings
-                CURL::libcurl
                 Threads::Threads
                 nlohmann_json)
     google_cloud_cpp_add_common_options(${target})
@@ -104,7 +103,6 @@ foreach (fname ${storage_benchmarks_unit_tests})
                 GTest::gmock_main
                 GTest::gmock
                 GTest::gtest
-                CURL::libcurl
                 absl::strings
                 nlohmann_json)
     google_cloud_cpp_add_common_options(${target})
diff --git a/google/cloud/storage/config-grpc.cmake.in b/google/cloud/storage/config-grpc.cmake.in
index 1cdd8a45fe..3fe82f3001 100644
--- a/google/cloud/storage/config-grpc.cmake.in
+++ b/google/cloud/storage/config-grpc.cmake.in
@@ -24,17 +24,6 @@ find_dependency(nlohmann_json)
 find_dependency(OpenSSL)
 find_dependency(ZLIB)
 
-# Some versions of FindCURL do not define CURL::libcurl, so we define it ourselves.
-if (NOT TARGET CURL::libcurl)
-    add_library(CURL::libcurl UNKNOWN IMPORTED)
-    set_property(TARGET CURL::libcurl
-                 APPEND
-                 PROPERTY INTERFACE_INCLUDE_DIRECTORIES "${CURL_INCLUDE_DIR}")
-    set_property(TARGET CURL::libcurl
-                 APPEND
-                 PROPERTY IMPORTED_LOCATION "${CURL_LIBRARY}")
-endif ()
-
 include("${CMAKE_CURRENT_LIST_DIR}/storage-targets.cmake")
 
 # TODO(12698) - remove transition name (experimental-storage-grpc)
diff --git a/google/cloud/storage/google_cloud_cpp_storage.cmake b/google/cloud/storage/google_cloud_cpp_storage.cmake
index 629860cdf5..be505487f4 100644
--- a/google/cloud/storage/google_cloud_cpp_storage.cmake
+++ b/google/cloud/storage/google_cloud_cpp_storage.cmake
@@ -14,7 +14,7 @@
 # limitations under the License.
 # ~~~
 
-include(FindCurlWithTargets)
+find_package(CURL REQUIRED)
 find_package(OpenSSL REQUIRED)
 
 # the client library
diff --git a/google/cloud/storage/tests/CMakeLists.txt b/google/cloud/storage/tests/CMakeLists.txt
index 2a7f74ecfc..ab05ea1e1a 100644
--- a/google/cloud/storage/tests/CMakeLists.txt
+++ b/google/cloud/storage/tests/CMakeLists.txt
@@ -102,7 +102,6 @@ foreach (fname IN LISTS storage_client_integration_tests)
                 GTest::gmock_main
                 GTest::gmock
                 GTest::gtest
-                CURL::libcurl
                 Threads::Threads
                 absl::strings
                 nlohmann_json)
-- 
2.42.0.655.g421f12c284-goog

