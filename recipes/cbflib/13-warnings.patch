--- a/examples/cbf2adscimg_sub.c
+++ b/examples/cbf2adscimg_sub.c
@@ -154,7 +154,8 @@
 /*
  * find the } marking the end of the information in the header
  */
-  for ( hp=header; *hp != '}'; hp++);
+  for ( hp=header; *hp != '}'; hp++)
+    ;
 
 /*
  * Write the field name starting at the position of the }
@@ -214,7 +215,9 @@
 /*
  * find the } marking the end of the header
  */
-  for ( hp=header; *hp != '}'; hp++); hp++;
+  for ( hp=header; *hp != '}'; hp++)
+    ;
+  hp++;
 
 /*
  * End this field with a ; and new line
@@ -560,15 +563,15 @@
 
 	if(NULL == (uint_data = (unsigned int *) malloc(dimension[0] * dimension[1] * sizeof (unsigned int))))
 	{
-		fprintf(stderr, "cbfhandle2img: Error allocating %lu bytes of memory for integer data image\n", 
-				(unsigned long)dimension[0] * dimension[1] * sizeof (unsigned int));
+		fprintf(stderr, "cbfhandle2img: Error allocating %zd bytes of memory for integer data image\n",
+				dimension[0] * dimension[1] * sizeof (unsigned int));
 		return(1);
 	}
 
 	if(NULL == (ushort_data = (unsigned short *) malloc(dimension[0] * dimension[1] * sizeof (unsigned short))))
 	{
-		fprintf(stderr, "cbfhandle2img: Error allocating %lu bytes of memory for unsigned short data image\n", 
-				(unsigned long)dimension[0] * dimension[1] * sizeof (unsigned short));
+		fprintf(stderr, "cbfhandle2img: Error allocating %zd bytes of memory for unsigned short data image\n",
+				dimension[0] * dimension[1] * sizeof (unsigned short));
 		return(1);
 	}
 
--- a/examples/cbf2nexus.c
+++ b/examples/cbf2nexus.c
@@ -764,7 +764,7 @@
 	}
 
 	/* Cleanup */
-	free(cifin);
+	free((void *)cifin);
 	error |= cbf_free_getopt_handle(opts);
 	return CBF_SUCCESS==error ? 0 : 1;
 }
--- a/examples/cbf_testxfelread.c
+++ b/examples/cbf_testxfelread.c
@@ -1030,7 +1030,8 @@
         for (ii=0; ii < XFEL_DIAMETER; ii++) {
             for (jj=0; jj < XFEL_DIAMETER; jj++) {
                 if (outarray[ii][jj] != XFEL_UNDEFINED
-                    && outarray[ii][jj] != XFEL_OVERLOAD);
+                    && outarray[ii][jj] != XFEL_OVERLOAD)
+                        ;
                 intoutarray[ii][jj] = (int)(outarray[ii][jj]+0.5);
             }
         }
--- a/examples/changtestcompression.c
+++ b/examples/changtestcompression.c
@@ -120,7 +120,7 @@
     uldata = (unsigned long *)calloc(nelem, sizeof(long));
     elsize = sizeof(long);
     while (i < nelem) {
-      uldata[i] = urand() * ULONG_MAX;
+      uldata[i] = urand() * (double)ULONG_MAX;
       i += 1 + urand() * NSTEPS;
     }
     *data = uldata;
@@ -129,7 +129,7 @@
     sldata = (signed long *)calloc(nelem, sizeof(long));
     elsize = sizeof(long);
     while (i < nelem) {
-      sldata[i] = urand() * LONG_MAX;
+      sldata[i] = urand() * (double)LONG_MAX;
       i += 1 + urand() * NSTEPS;
     }
     *data = sldata;
@@ -139,7 +139,7 @@
     ulldata = (unsigned long long *)calloc(nelem, sizeof(long long));
     elsize = sizeof(long long);
     while (i < nelem) {
-      ulldata[i] = urand() * ULLONG_MAX;
+      ulldata[i] = urand() * (double)ULLONG_MAX;
       i += 1 + urand() * NSTEPS;
     }
     *data = ulldata;
@@ -148,7 +148,7 @@
     slldata = (signed long long *)calloc(nelem, sizeof(long long));
     elsize = sizeof(long long);
     while (i < nelem) {
-      slldata[i] = urand() * LLONG_MAX;
+      slldata[i] = urand() * (double)LLONG_MAX;
       i += 1 + urand() * NSTEPS;
     }
     *data = slldata;
--- a/examples/cif2cbf.c
+++ b/examples/cif2cbf.c
@@ -1926,8 +1926,8 @@
                                             free(array);
                                         } else {
                                             fprintf(stderr,
-                                                    "\nFailed to allocate memory %ld bytes",
-                                                    (long) elsize*elements);
+                                                    "\nFailed to allocate memory %zd bytes",
+                                                    elsize*elements);
                                             exit(1);
                                         }
                                     }
@@ -2473,8 +2473,8 @@
                                         free(array);
                                     } else {
                                         fprintf(stderr,
-                                                "\nFailed to allocate memory %ld bytes",
-                                                (long) elsize*elements);
+                                                "\nFailed to allocate memory %zd bytes",
+                                                elsize*elements);
                                         exit(1);
                                     }
                                 }
@@ -2600,8 +2600,8 @@
                                                 free(array);
                                             } else {
                                                 fprintf(stderr,
-                                                        "\nFailed to allocate memory %ld bytes",
-                                                        (long) elsize*elements);
+                                                        "\nFailed to allocate memory %zd bytes",
+                                                        elsize*elements);
                                                 exit(1);
                                             }
                                         }
@@ -2818,8 +2818,8 @@
                                         free(array);
                                     } else {
                                         fprintf(stderr,
-                                                "\nFailed to allocate memory %ld bytes",
-                                                (long) elsize*elements);
+                                                "\nFailed to allocate memory %zd bytes",
+                                                elsize*elements);
                                         exit(1);
                                     }
                                 }
@@ -2945,8 +2945,8 @@
                                                 free(array);
                                             } else {
                                                 fprintf(stderr,
-                                                        "\nFailed to allocate memory %ld bytes",
-                                                        (long) elsize*elements);
+                                                        "\nFailed to allocate memory %zd bytes",
+                                                        elsize*elements);
                                                 exit(1);
                                             }
                                         }
--- a/examples/convert_image.c
+++ b/examples/convert_image.c
@@ -316,7 +316,6 @@
 
 
 
-double rint(double);
 int local_exit (int status);
 int outerror(int err);
 
--- a/examples/convert_minicbf.c
+++ b/examples/convert_minicbf.c
@@ -327,7 +327,6 @@
 #endif
 
 int outusage ( void );
-double rint(double);
 int local_exit (int status);
 int outerror(int err);
 
--- a/examples/dps_peaksearch.c
+++ b/examples/dps_peaksearch.c
@@ -139,12 +139,16 @@
  *
  */
 
-void
-cmass (idata, iwidth, iheight, x, y, cm_x, cm_y, cm_nx, cm_ny)
-register unsigned short  *idata;
-int iwidth, iheight, x, y;
-double *cm_x, *cm_y;
-int cm_nx, cm_ny;
+static void
+cmass (register unsigned short *idata,
+       int iwidth,
+       int iheight,
+       int x,
+       int y,
+       double *cm_x,
+       double *cm_y,
+       int cm_nx,
+       int cm_ny)
 {
     register int i, j, val;
     double sum_x=0, sum_y=0, sum_z=0.0;
@@ -205,6 +209,9 @@
 
 static	int	ccd_image_saturation = 0;
 
+int
+sortfunc(const void *lhs, const void *rhs);
+
 int dps_peaksearch(unsigned short *data, int nx, int ny,
                    int npeaks_out, double min_isigma,
                    int min_spacing, DPS_Peak *pptr, int min_value)
@@ -231,7 +238,6 @@
     int overload = 55000;
     int npeaks=0;
     int maxpeaks=20480;
-    int sortfunc();
     int nover;
     int nunder;
     int	nxfer;
@@ -488,9 +494,11 @@
 /* Sort pixel value
  */
 int
-sortfunc(pk1, pk2)
-DPS_Peak *pk1, *pk2;
+sortfunc(const void *lhs, const void *rhs)
 {
+    const DPS_Peak *pk1 = lhs;
+    const DPS_Peak *pk2 = rhs;
+
     if (pk2->isigma > pk1->isigma)
         return 1;
     else
--- a/examples/minicbf2nexus.c
+++ b/examples/minicbf2nexus.c
@@ -607,7 +607,7 @@
 	}
     
 	/* Cleanup */
-	free(cifin);
+	free((void *)cifin);
 	cbf_config_free(vec);
 	error |= cbf_free_getopt_handle(opts);
 	return CBF_SUCCESS==error ? 0 : 1;
--- a/examples/roi_peaksearch.c
+++ b/examples/roi_peaksearch.c
@@ -4,6 +4,7 @@
 #include "dps_peaksearch.h"
 #include <stdio.h>
 #include <stdlib.h>
+#include <math.h>
 #include <string.h>
 
 
@@ -283,12 +284,12 @@
     
     out = (unsigned short *)malloc ((fasthigh-fastlow+1)*(slowhigh-slowlow+1)*sizeof( unsigned short ));
     if (out == NULL) {
-        fprintf(stderr,"roi_peaksearch: ERROR can not allocate %ld bytes\n",(long unsigned int) (fasthigh-fastlow+1)*(slowhigh-slowlow+1)*sizeof( unsigned short ));
+        fprintf(stderr,"roi_peaksearch: ERROR can not allocate %zd bytes\n", (fasthigh-fastlow+1)*(slowhigh-slowlow+1)*sizeof( unsigned short ));
         fflush(stderr); exit(-1);
     }
     if(NULL == (pnData = (int *) malloc(dim1 * dim2 * dim2 * elsize)))
     {
-        fprintf(stderr,"roi_peaksearch: ERROR can not allocate %ld bytes for data\n",(long unsigned int) (fasthigh-fastlow+1)*(slowhigh-slowlow+1)*sizeof( unsigned short ));
+        fprintf(stderr,"roi_peaksearch: ERROR can not allocate %zd bytes for data\n", (fasthigh-fastlow+1)*(slowhigh-slowlow+1)*sizeof( unsigned short ));
         fflush(stderr);
         exit(-1);
     }
--- a/examples/testcell.C
+++ b/examples/testcell.C
@@ -185,8 +185,8 @@
 
 
 
-using namespace std;
 #include <iostream>
+using namespace std;
 #include "cbf.h"
 #include "cbf_simple.h"
 
--- a/examples/tif_sprint.c
+++ b/examples/tif_sprint.c
@@ -451,7 +451,7 @@
 		     cp = strchr(cp,'\0')+1, i--) {
 			size_t max_chars = 
 				inknameslen - (cp - inknames);
-            chars_used += snprintf(str+chars_used, ((xstrlen>chars_used)?xstrlen-chars_used:0),sep);
+            chars_used += snprintf(str+chars_used, ((xstrlen>chars_used)?xstrlen-chars_used:0), "%s", sep);
             chars_used += _TIFFsnprintAsciiBounded(str+chars_used, ((xstrlen>chars_used)?xstrlen-chars_used:0), cp, max_chars);
 			sep = ", ";
 		}
--- a/src/cbf_codes.c
+++ b/src/cbf_codes.c
@@ -875,7 +875,7 @@
                                         
                                         cbf_failnez (cbf_write_string (outfile, "# Hexadecimal encoding"))
                                         
-                                        sprintf (line, ", byte %lu", (unsigned long) block_count * elsize);
+                                        sprintf (line, ", byte %zd", block_count * elsize);
                 
                 cbf_failnez (cbf_write_string (outfile, line))
                 
--- a/src/cbf_hdf5.c
+++ b/src/cbf_hdf5.c
@@ -1024,12 +1024,12 @@
         } else {
             const unsigned int idx = obj->count++;
             int error = CBF_SUCCESS;
-            if (!(obj->axis_set_id = realloc(obj->axis_set_id,obj->count*sizeof(char*)))) error |= CBF_ALLOC;
-            if (!(obj->path = realloc(obj->path,obj->count*sizeof(char*)))) error |= CBF_ALLOC;
+            if (!(obj->axis_set_id = realloc((void *)obj->axis_set_id,obj->count*sizeof(char*)))) error |= CBF_ALLOC;
+            if (!(obj->path = realloc((void *)obj->path,obj->count*sizeof(char*)))) error |= CBF_ALLOC;
             if (!(obj->index = realloc(obj->index,obj->count*sizeof(unsigned int)))) error |= CBF_ALLOC;
             if (!(obj->precedence = realloc(obj->precedence,obj->count*sizeof(unsigned int)))) error |= CBF_ALLOC;
             if (!(obj->dimension = realloc(obj->dimension,obj->count*sizeof(unsigned int)))) error |= CBF_ALLOC;
-            if (!(obj->direction = realloc(obj->direction,obj->count*sizeof(char*)))) error |= CBF_ALLOC;
+            if (!(obj->direction = realloc((void *)obj->direction,obj->count*sizeof(char*)))) error |= CBF_ALLOC;
             if (CBF_SUCCESS == error) {
                 obj->axis_set_id[idx] = axis_set_id;
                 obj->path[idx] = _cbf_strdup(path);
@@ -1112,8 +1112,8 @@
         } else {
             int error = CBF_SUCCESS;
             const unsigned int idx = obj->count++;
-            if (!(obj->axis_id = realloc(obj->axis_id,obj->count*sizeof(char*)))) error |= CBF_ALLOC;
-            if (!(obj->path = realloc(obj->path,obj->count*sizeof(char*)))) error |= CBF_ALLOC;
+            if (!(obj->axis_id = realloc((void *)obj->axis_id,obj->count*sizeof(char*)))) error |= CBF_ALLOC;
+            if (!(obj->path = realloc((void *)obj->path,obj->count*sizeof(char*)))) error |= CBF_ALLOC;
             if (!(obj->in_degree = realloc(obj->in_degree,obj->count*sizeof(unsigned int*)))) error |= CBF_ALLOC;
             if (!(obj->depends_on = realloc(obj->depends_on,obj->count*sizeof(unsigned int*)))) error |= CBF_ALLOC;
             if (CBF_SUCCESS == error) {
@@ -4356,7 +4356,7 @@
 CBFM_PROLOG { \
 const char * const _tkn = (TKN); \
 if (strcmp(_tkn,*buf)) { \
-fprintf(logFile,"Config parsing error on line %lu: expected " #TKN ", got '%s'\n",(long unsigned int)*ln,*buf); \
+fprintf(logFile,"Config parsing error on line %zd: expected " #TKN ", got '%s'\n",*ln,*buf); \
     return cbf_configError_unexpectedInput; \
 } \
 } CBFM_EPILOG
@@ -4364,7 +4364,7 @@
 #define REQUIRE_NOT_EOL() \
 CBFM_PROLOG { \
 if (!strcmp("\n",*buf)) { \
-fprintf(logFile,"Config parsing error on line %lu: unexpected newline\n",*ln); \
+fprintf(logFile,"Config parsing error on line %zd: unexpected newline\n",*ln); \
     return cbf_configError_unexpectedInput; \
 } \
 } CBFM_EPILOG
@@ -4378,7 +4378,7 @@
         errno = 0;
         it->vector[0] = strtod(*buf, &end);
         if (errno != 0 || end == *buf) {
-            fprintf(logFile,"Config parsing error on line %lu: expected a number, got '%s'\n",*ln,*buf);
+            fprintf(logFile,"Config parsing error on line %zd: expected a number, got '%s'\n",*ln,*buf);
             return cbf_configError_expectedNumber;
         }
         GET_TOKEN();
@@ -4386,7 +4386,7 @@
         errno = 0;
         it->vector[1] = strtod(*buf, &end);
         if (errno != 0 || end == *buf) {
-            fprintf(logFile,"Config parsing error on line %lu: expected a number, got '%s'\n",*ln,*buf);
+            fprintf(logFile,"Config parsing error on line %zd: expected a number, got '%s'\n",*ln,*buf);
             return cbf_configError_expectedNumber;
         }
         GET_TOKEN();
@@ -4394,7 +4394,7 @@
         errno = 0;
         it->vector[2] = strtod(*buf, &end);
         if (errno != 0 || end == *buf) {
-            fprintf(logFile,"Config parsing error on line %lu: expected a number, got '%s'\n",*ln,*buf);
+            fprintf(logFile,"Config parsing error on line %zd: expected a number, got '%s'\n",*ln,*buf);
             return cbf_configError_expectedNumber;
         }
         /* literal ']'. */
@@ -4443,7 +4443,7 @@
 CBFM_PROLOG { \
 const char * const _tkn = (TKN); \
 if (strcmp(_tkn,tkn)) { \
-fprintf(logFile,"Config parsing error on line %lu: expected " #TKN ", got '%s'\n",ln,tkn); \
+fprintf(logFile,"Config parsing error on line %zd: expected " #TKN ", got '%s'\n",ln,tkn); \
 return cbf_configError_unexpectedInput; \
 } \
 } CBFM_EPILOG
@@ -4451,7 +4451,7 @@
 #define REQUIRE_EOL() \
 CBFM_PROLOG { \
 if (strcmp("\n",tkn)) { \
-fprintf(logFile,"Config parsing error on line %lu: expected '\\n', got '%s'\n",ln,tkn); \
+fprintf(logFile,"Config parsing error on line %zd: expected '\\n', got '%s'\n",ln,tkn); \
 return cbf_configError_unexpectedInput; \
 } \
 } CBFM_EPILOG
@@ -4459,7 +4459,7 @@
 #define REQUIRE_NOT_EOL() \
 CBFM_PROLOG { \
 if (!strcmp("\n",tkn)) { \
-fprintf(logFile,"Config parsing error on line %lu: unexpected newline\n",ln); \
+fprintf(logFile,"Config parsing error on line %zd: unexpected newline\n",ln); \
 return cbf_configError_unexpectedInput; \
 } \
 } CBFM_EPILOG
@@ -4467,7 +4467,7 @@
 #define REQUIRE_NEXUS_AXIS() \
 CBFM_PROLOG { \
 if (strcmp(".",tkn) && cbf_config_end(vec) == cbf_config_findNexus(vec,tkn)) { \
-fprintf(logFile,"Config parsing error on line %lu: Nexus axis '%s' not defined\n",ln,tkn); \
+fprintf(logFile,"Config parsing error on line %zd: Nexus axis '%s' not defined\n",ln,tkn); \
 return cbf_configError_undefinedValue; \
 } \
 } CBFM_EPILOG
@@ -4492,7 +4492,7 @@
                 REQUIRE_NOT_EOL();
                 it = cbf_config_findMinicbf(vec,tkn);
                 if (cbf_config_end(vec) != it) {
-                    fprintf(logFile,"Config parsing error on line %lu: Duplicate axis definition for minicbf axis '%s'\n",ln,tkn);
+                    fprintf(logFile,"Config parsing error on line %zd: Duplicate axis definition for minicbf axis '%s'\n",ln,tkn);
                     return cbf_configError_duplicateField;
                 }
                 it = cbf_config_push(vec,cbf_configItem_create());
@@ -4505,7 +4505,7 @@
                 GET_TOKEN();
                 REQUIRE_NOT_EOL();
                 if (cbf_config_end(vec) != cbf_config_findNexus(vec,tkn)) {
-                    fprintf(logFile,"Config parsing error on line %lu: Duplicate axis definition for Nexus axis '%s'\n",ln,tkn);
+                    fprintf(logFile,"Config parsing error on line %zd: Duplicate axis definition for Nexus axis '%s'\n",ln,tkn);
                     return cbf_configError_duplicateField;
                 }
                 it->nexus = _cbf_strdup(tkn);
@@ -4530,7 +4530,7 @@
                 /* find entry by nexus axis name */
                 cbf_configItem_t * const it = cbf_config_findNexus(vec,tkn);
                 if (cbf_config_end(vec) == it) {
-                    fprintf(logFile,"Config parsing error on line %lu: Nexus axis '%s' not defined\n",ln,tkn);
+                    fprintf(logFile,"Config parsing error on line %zd: Nexus axis '%s' not defined\n",ln,tkn);
                     return cbf_configError_undefinedValue;
                 }
                 /* match depends-on -> vector OR vector -> depends-on. */
@@ -17993,7 +17993,7 @@
         buffer[0] = '\0';
 
         strncat(buffer,verstring,50);
-        for (ii=_cbf_strlen(svnrev)-1; ii >= 0; ii--) {
+        for (ii=strlen(svnrev)-1; ii >= 0; ii--) {
             if (svnrev[ii] == '$' || svnrev[ii] == ' ') {
                 svnrev[ii] = '\0';
             } else break;
@@ -18022,9 +18022,9 @@
             }
         }
 
-        strncat(buffer," (r",3);
+        strcat(buffer," (r");
         strncat(buffer,svnrev+irev,10);
-        strncat(buffer,") ",2);
+        strcat(buffer,") ");
         strncat(buffer,svndate+idate,50);
         CBF_CALL(cbf_H5Arequire_string((*h5handle)->hfile,"creator_version", 
             buffer));
@@ -18075,7 +18075,7 @@
         buffer[0] = '\0';
 
         strncat(buffer,verstring,50);
-        for (ii=_cbf_strlen(svnrev)-1; ii >= 0; ii--) {
+        for (ii=strlen(svnrev)-1; ii >= 0; ii--) {
             if (svnrev[ii] == '$' || svnrev[ii] == ' ') {
                 svnrev[ii] = '\0';
             } else break;
@@ -18104,9 +18104,9 @@
             }
         }
 
-        strncat(buffer," (r",3);
+        strcat(buffer," (r");
         strncat(buffer,svnrev+irev,10);
-        strncat(buffer,") ",2);
+        strcat(buffer,") ");
         strncat(buffer,svndate+idate,50);
         CBF_CALL(cbf_H5Arequire_string((*h5handle)->hfile,"creator_version",
                                        buffer));
@@ -19270,7 +19270,7 @@
                                     cbf_debug_print("invalid dimensions of dataset");
                                     error |= CBF_SIZE;
                                 } else {
-                                    const char * lvalue;
+                                    char * lvalue;
                                     hid_t vlstr = CBF_H5FAIL;
                                     const hid_t currType = H5Dget_type(object);
                                     hsize_t offset[1];
@@ -22445,9 +22445,9 @@
                                                 const int n = snprintf(
                                                                        _data_encoding,
                                                                        _data_encoding_size,
-                                                                       "%ssigned %lu-bit integer",
+                                                                       "%ssigned %zd-bit integer",
                                                                        H5T_SGN_2==h5sign?"":"un",
-                                                                       (unsigned long)8*elem_size
+                                                                       8*elem_size
                                                                        );
                                                 /* check if the string was formed successfully */
                                                 if (n > -1 && n < (ssize_t)_data_encoding_size) break;
@@ -24423,9 +24423,9 @@
         if (!c) {
             error |= CBF_ARGUMENT;
         } else {
-            const char * * new_axis_id = realloc(c->axis_id,(1+c->count)*sizeof(char*));
+            const char * * new_axis_id = realloc((void *)c->axis_id,(1+c->count)*sizeof(char*));
             unsigned int * new_in_degree = realloc(c->in_degree,(1+c->count)*sizeof(unsigned int));
-            const char * * new_path = realloc(c->path,(1+c->count)*sizeof(char*));
+            const char * * new_path = realloc((void *)c->path,(1+c->count)*sizeof(char*));
             if (!new_axis_id) {
                 error |= CBF_ALLOC;
             } else {
@@ -24747,9 +24747,9 @@
         if (!c) {
             error |= CBF_ARGUMENT;
             } else {
-            const char * * new_axis_id = realloc(c->axis_id,(1+c->count)*sizeof(char*));
+            const char * * new_axis_id = realloc((void *)c->axis_id,(1+c->count)*sizeof(char*));
             unsigned int * new_in_degree = realloc(c->in_degree,(1+c->count)*sizeof(unsigned int));
-            const char * * new_path = realloc(c->path,(1+c->count)*sizeof(char*));
+            const char * * new_path = realloc((void *)c->path,(1+c->count)*sizeof(char*));
             if (!new_axis_id) {
                 error |= CBF_ALLOC;
             } else {
@@ -26842,7 +26842,7 @@
                                         const char * * newAxes = NULL;
                                         /* axis id wasn't found in the set - add it */
                                         ++nAxes;
-                                        if (!(newAxes=realloc(axes,sizeof(const char *)*nAxes))) {
+                                        if (!(newAxes=realloc((void *)axes,sizeof(const char *)*nAxes))) {
                                             cbf_debug_print2("error: %s\n",cbf_strerror(CBF_ALLOC));
                                             error |= CBF_ALLOC;
                                         } else {
--- a/src/cbf_hdf5_filter.c
+++ b/src/cbf_hdf5_filter.c
@@ -796,14 +796,14 @@
                 cbf_reportnez (cbf_write_string (tempfile, text), errorcode);
                 
                 if (realarray) {
-                    sprintf (text, "X-Binary-Element-Type: \"signed %ld-bit real IEEE\"\n",
+                    sprintf (text, "X-Binary-Element-Type: \"signed %zd-bit real IEEE\"\n",
                              elsize*CHAR_BIT);
                 } else {
                     if (elsign)
-                        sprintf (text, "X-Binary-Element-Type: \"signed %ld-bit integer\"\n",
+                        sprintf (text, "X-Binary-Element-Type: \"signed %zd-bit integer\"\n",
                                  elsize*CHAR_BIT);
                     else
-                        sprintf (text, "X-Binary-Element-Type: \"unsigned %ld-bit integer\"\n",
+                        sprintf (text, "X-Binary-Element-Type: \"unsigned %zd-bit integer\"\n",
                                  elsize*CHAR_BIT);
                 }
                 
--- a/src/cbf_minicbf_header.c
+++ b/src/cbf_minicbf_header.c
@@ -257,6 +257,7 @@
 #endif
     
 #include "cbf_minicbf_header.h"
+#include <math.h>
 #include <time.h>
     
 /* cbf_set_minicbf_header -- format a minicbf header conforming both
@@ -310,7 +311,7 @@
                 
             }
             
-            strncat(*dst,src,srclen);
+            strcat(*dst,src);
             
             *dstsize += srclen;
             
--- a/src/cbf_nibble_offset.c
+++ b/src/cbf_nibble_offset.c
@@ -1393,11 +1393,12 @@
                         }
                         
                     } else {
-                        if ((((long)delta[0]>>32)&0xFFFFFFFFL)==0x80000000L&&(((long)delta[0]&0xFFFFFFFFl)==0L)) {
+                        int64_t ldelta = delta[0];
+                        if (((ldelta>>32)&0xFFFFFFFFL)==0x80000000L&&((ldelta&0xFFFFFFFFl)==0L)) {
                             prevmode=curmode;
                             nextmode = 0;
                         } else {
-                            if ((((long)delta[0]>>32)&0x80000000L) == 0x80000000L) {
+                            if (((ldelta>>32)&0x80000000L) == 0x80000000L) {
                                 delta[0] |= ~(-1L);
                                 for (iint = 1; iint < numints; iint++) {
                                     delta[iint] = ~(0L);
--- a/src/img.c
+++ b/src/img.c
@@ -33,18 +33,6 @@
          ((i4 >> 24) & 0x0000000FF);
 }
 
-  /* Replacement for memcpy */
-
-void * img_memcpy(void * dst, const void * src, const size_t n){
-  size_t ii = 0;
-  unsigned char * xdst; 
-  unsigned char * xsrc; 
-  xdst = (unsigned char *) dst;
-  xsrc = (unsigned char *) src;
-  for (ii=0; ii<n; ii++) *(xdst++)=*(xsrc++);
-  return dst;
-}
-
 
 float img_float_i4 (int i4, int VAX)
 {
@@ -184,7 +172,7 @@
 
       if (count)
 
-        img_memcpy (line, oline, count);
+        memcpy (line, oline, count);
     }
 
     line [count] = (char) c;
@@ -1775,7 +1763,7 @@
 
   tags = (tags + 0x03F) & ~0x03F;
     
-  if (tags > img->tags)
+  if (tags > img->tags && img->tags >= 0)
   {
     img_tag * old_tag = img->tag;
 
@@ -1790,7 +1778,7 @@
 
     if (old_tag)
     {
-      img_memcpy (img->tag, old_tag, img->tags * sizeof (img_tag));
+      memcpy (img->tag, old_tag, img->tags * sizeof (img_tag));
 
       free (old_tag);
     }
