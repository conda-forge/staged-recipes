{% set name = "crms2map" %}
{% set version = "1.0" %}

package:
  name: {{ name |lower }}
  version: {{ version }}

source:
  url: https://github.com/jinikeda/{{ name |lower }}/archive/refs/tags/{{ version }}.tar.gz
  sha256: e58050405cd94ed067af68c9a554550c427ab94357005540bc40ddd2b492fe41

build:
  # Uncomment the following line if the package is pure Python and the recipe is exactly the same for all platforms.
  # It is okay if the dependencies are not built for all platforms/versions, although selectors are still not allowed.
  # See https://conda-forge.org/docs/maintainer/knowledge_base.html#noarch-python for more details.
  # noarch: python
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  # More info about selectors can be found in the conda-build docs: 
  # https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#preprocessing-selectors
  noarch: generic
  script: {{ PYTHON }} -m pip install . -vv
  number: 0

requirements:
  build:
    # If your project compiles code (such as a C extension) then add the required compilers as separate entries here.
    # Compilers are named 'c', 'cxx' and 'fortran'.
    #- {{ compiler('c') }}
  host:
    - python >=3.9
    - pip
    - setuptools
  run:
    - python >=3.9
    - numpy
    - pandas
    - geopandas
    - rasterio
    - scipy
    - xarray
    - openpyxl
    - rioxarray
    - folium
    - seaborn
    - matplotlib-base
    - pyproj
    - scikit-learn
    - click
    - fiona
    - shapely
    - lz4-c
    - zlib
    - openssl
    - libtiff
    - libgdal
    - sqlite
    - pytest

test:
  # Some packages might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  imports:
    - src.CRMS_general_functions
    - src.CRMS_Discrete_Hydrographic2subsets
    - src.CRMS2Resample
    - src.CRMS2Plot
    - src.click_main
  # For python packages, it is useful to run pip check. However, sometimes the
  # metadata used by pip is out of date. Thus this section is optional if it is
  # failing.
  requires:
    - pytest
    - pytest-mock
    - click
  source_files:
    - tests
    - tests/test_CRMS_general_functions.py
    - tests/__init__.py
  commands:
    - pytest -v tests/test_CRMS_general_functions.py

about:
  home: https://github.com/jinikeda/crms2map
  summary: 'Automated data analytical and mapping tools for the Louisiana Coastal Reference Monitoring System (CRMS) Hydrographic Data'
  description: |
    CRMS2Map is a Python CRMS data processing, analysis, and mapping tool. The tool automatically downloads hydrographic data from https://cims.coastal.la.gov/monitoring-data/ and creates datasets for salinity, water levels, percent time inundation, and inundation depth, respectively. After that, the tool conducts data analytics and mapping for coastal Louisiana with user-defined input parameters.
  # Remember to specify the license variants for BSD, Apache, GPL, and LGPL.
  # Use the SPDX identifier, e.g: GPL-2.0-only instead of GNU General Public License version 2.0
  # See https://spdx.org/licenses/
  license: MIT
  # The license_family, i.e. "BSD" if license is "BSD-3-Clause". 
  # Optional
  license_family: MIT
  # It is required to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # Please also note that some projects have multiple license files which all need to be added using a valid yaml list.
  # See https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#license-file
  license_file: LICENSE
  # The doc_url and dev_url are optional.

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - jinikeda
