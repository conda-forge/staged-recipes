{% set name = "ghtoken" %}
{% set version = "0.1.2" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: 4369b0052efb91109391b5f4f797cd5fa6a2a3ac436b6d11205fd992de02adef

build:
  noarch: python
  number: 0
  script: {{ PYTHON }} -m pip install . -vv --no-deps --no-build-isolation
  entry_points:
    - ghtoken=ghtoken.__main__:main

requirements:
  host:
    - python >=3.8
    - pip
    - hatchling
  run:
    - python >=3.8
    - python-dotenv
    - ruamel.yaml >=0.15,<1

test:
  requires:
    - gh
    - git
    - pytest
    - pytest-cov
  source_files:
    - test
    - tox.ini
  imports:
    - ghtoken
  commands:
    - python -m pytest -vv test

about:
  home: https://github.com/jwodder/ghtoken
  summary: Retrieve GitHub access tokens from various sources
  license: MIT
  license_family: MIT
  license_file: LICENSE
  description: |
    When writing a Python program for interacting with GitHub's API, you'll
    likely want to use the local user's GitHub access token for authentication.
    Asking the user to provide the token every time is undesirable, so you'd
    rather look up the token in some well-known storage location.  The problem
    is, there have been so many places to store GitHub tokens supported by
    different programs over the years, and asking your users to migrate to a
    new one shouldn't be necessary.

    That's where ``ghtoken`` comes in: it provides a single function for
    checking multiple well-known sources for GitHub access tokens plus separate
    functions for querying individual sources in case you need to combine the
    queries in novel ways.
  dev_url: https://github.com/jwodder/ghtoken

extra:
  recipe-maintainers:
    - jwodder
