# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe
# If your package is python based, we recommend using Grayskull to generate it instead:
# https://github.com/conda-incubator/grayskull

# Jinja variables help maintain the recipe as you'll update the version only here.
# Using the name variable with the URL in line 16 is convenient
# when copying and pasting from another recipe, but not really needed.
{% set name = "gsas-ii" %}
{% set version = "5.4.2" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/AdvancedPhotonSource/GSAS-II/archive/v{{ version }}.tar.gz
  sha256: 1a75d071869af44ac1bc95ed47ef59ef860632f5e57922870f5c4bf4eb1fef3e
  # sha256 is the preferred checksum -- you can get it for a file with:
  #  `openssl sha256 <file name>`.
  # You may need the openssl package, available on conda-forge:
  #  `conda install openssl -c conda-forge``

build:
  # Uncomment the following line if the package is pure Python and the recipe is exactly the same for all platforms.
  # It is okay if the dependencies are not built for all platforms/versions, although selectors are still not allowed.
  # See https://conda-forge.org/docs/maintainer/knowledge_base.html#noarch-python for more details.
  # noarch: python
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  # More info about selectors can be found in the conda-build docs:
  # https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#preprocessing-selectors
  number: 0
  # the llvm fortran compiler compiles the source, but produces output with different behavior than gfortran
  # skip windows until we fix the fortran or can switch to gfortran on windows
  skip: True  # [win]

requirements:
  build:
    # If your project compiles code (such as a C extension) then add the required compilers as separate entries here.
    # Compilers are named 'c', 'cxx', 'fortran', among others
    - {{ compiler('c') }}
    - {{ compiler('fortran') }}
    - {{ compiler('cxx') }}
    # this is necessary for all compiled recipes
    - {{ stdlib('c') }}
    - python                                 # [build_platform != target_platform]
    - cross-python_{{ target_platform }}     # [build_platform != target_platform]
    - cython                                 # [build_platform != target_platform]
    - numpy                                  # [build_platform != target_platform]
    - pybind11                               # [build_platform != target_platform]
    - meson-python                           # [build_platform != target_platform]
    - cmake                                  # [build_platform != target_platform]
    - ninja                                  # [build_platform != target_platform]
    - pkg-config                             # [build_platform != target_platform]
  host:
    - cmake
    - cython
    - meson-python
    - ninja
    - numpy
    - pip
    - pkg-config
    - pybind11
    - python
    - python-build

  run:
    - python
    - h5py
    - imageio
    - matplotlib
    - numpy
    - pillow
    - pyopengl
    - pyproject-metadata
    - requests
    - scipy
    - tomli
    - wxpython
    - zarr
    - xmltodict
    - pycifrw
    - gitpython
    - ipython
    - seekpath
    - pybaselines


test:
  # Some packages might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  imports:
    - GSASII
    - GSASII.Absorb
    - GSASII.ElementTable
    - GSASII.FormFactors
    - GSASII.G2compare
    - GSASII.G2shapes
    - GSASII.GSASIIGUI
    - GSASII.GSASIIElem
    - GSASII.GSASIIElemGUI
    - GSASII.GSASIImiscGUI
    - GSASII.GSASIIIntPDFtool
    - GSASII.GSASIIconstrGUI
    - GSASII.GSASIIctrlGUI
    - GSASII.GSASIIdata
    - GSASII.GSASIIdataGUI
    - GSASII.GSASIIddataGUI
    - GSASII.GSASIIexprGUI
    - GSASII.GSASIIfiles
    - GSASII.GSASIIfpaGUI
    - GSASII.GSASIIimage
    - GSASII.GSASIIimgGUI
    - GSASII.GSASIIindex
    - GSASII.GSASIIlattice
    - GSASII.GSASIImapvars
    - GSASII.GSASIImath
    - GSASII.GSASIImpsubs
    - GSASII.GSASIIobj
    - GSASII.GSASIIpath
    - GSASII.GSASIIphsGUI
    - GSASII.GSASIIplot
    - GSASII.GSASIIpwd
    - GSASII.GSASIIpwdGUI
    - GSASII.GSASIIpwdplot
    - GSASII.GSASIIrestrGUI
    - GSASII.GSASIIsasd
    - GSASII.GSASIIscriptable
    - GSASII.GSASIIseqGUI
    - GSASII.GSASIIspc
    - GSASII.GSASIIstrIO
    - GSASII.GSASIIstrMain
    - GSASII.GSASIIstrMath
    - GSASII.GSASIItestplot
    - GSASII.ISODISTORT
    - GSASII.ImageCalibrants
    - GSASII.PlotXNFF
    - GSASII.ReadMarCCDFrame
    - GSASII.SUBGROUPS
    - GSASII.Substances
    - GSASII.atmdata
    - GSASII.config_example
    - GSASII.defaultIparms
    - GSASII.dmp
    - GSASII.fprime
    - GSASII.git_verinfo
    - GSASII.gltext
    - GSASII.k_vector_search
    - GSASII.nistlat
    - GSASII.scanCCD
    - GSASII.testDeriv
    - GSASII.testSSymbols
    - GSASII.testSytSym
    - GSASII.testXNFF
    - GSASII.tutorialIndex
  # For python packages, it is useful to run pip check. However, sometimes the
  # metadata used by pip is out of date. Thus this section is optional if it is
  # failing.
  requires:
    - pip
  commands:
    - pip check

about:
  home: https://github.com/AdvancedPhotonSource/GSAS-II/
  summary: 'Poweder Pattern refinement'
  description: |
    Poweder Pattern refinement
  # Remember to specify the license variants for BSD, Apache, GPL, and LGPL.
  # Use the SPDX identifier, e.g: GPL-2.0-only instead of GNU General Public License version 2.0
  # See https://spdx.org/licenses/
  license: MIT
  # The license_family, i.e. "BSD" if license is "BSD-3-Clause".
  # Optional
  license_family: MIT
  # It is required to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # Please also note that some projects have multiple license files which all need to be added using a valid yaml list.
  # See https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#license-file
  license_file: LICENSE.txt
  # The doc_url and dev_url are optional.
  doc_url: https://simplejson.readthedocs.io/
  dev_url: https://github.com/simplejson/simplejson

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - tacaswell
