# Example parameter file

# -------------------------- #
# General program settings
# -------------------------- #

#Maximum number of threads
#(also the maximum number of GPUs that may be used if the image
# simulation is performed on the GPU instead of the CPU)
numThreads 12

#Format of the generated output images
#  0: Quocmesh .q2bz format
#  1: .tiff format
outputImageFormat 1

#Format of output image numbering (interpreted by sprintf)
outputNumberingFormat "%03d"

#Image simulation mode during the reconstruction
#  0: Focal integration approximation with periodic continuation
#     performed on the CPU (T_Z^MAL, cf. Section 2.2.4 of the thesis).
#     The TCC parameters are given by the FocalIntegration_M and
#     FocalIntegration_delta parameters below.
#  1: Ishizuka's TCC with zero continuation performed on the GPU(s)
#     with OpenCL. (T_Z^Ishizuka, cf. Section 2.2.3 of the thesis).
#     Note that this option requires OpenCL.
simulationMode 0

#Image simulation mode for the simulation of input data
#  This determines the TCC that is used for the simulation of the
#  focus series if it is not read from file. The possible values are
#  the same as for simulationMode above.
inputSimulationMode 0

#Focal integration parameters if the TCC T_Z^MAL is used for image
#simulation (simulationMode = 0 or inputSimulationMode = 0)
#      M: integer, no unit
#  delta: in nanometers
#         This value should be on a similar order of magnitude as the
#         FocalSpread parameter below
FocalIntegration_M 3
FocalIntegration_delta 3.5

#Minimization algorithm
#  0: gradient descent
#  1: nonlinear conjugate gradient
#  2: Quasi-Newton BFGS
#  3: Gauss-Newton (LSMR) -- not implemented --
#  4: Gauss-Newton (QR)   -- not implemented --
minAlg 1

#Input data source
#  0: simulate input data (see the specimen settings below)
#  1: read input data from file (see the inputDataFile parameter)
inputDataSource 0

#File name of the input data that should be used if
#inputDataSource = 1
#  This may either be a .dm3 file containing a TEM image series or a
#  binary exit wave with the extension .wav, which may be generated
#  with the DrProbe software for example:
#    https://er-c.org/barthel/drprobe/
#    https://doi.org/10.1016/j.ultramic.2018.06.003
#  The file path may be an absolute or relative path with respect to
#  this parameter file.
inputDataFile ""

#Options for saving intermediate results
#  Intermediate results will be collected every collectDataIterations
#  steps of the minimization algorithm and saved every
#  saveDataIterations steps. Note that the algorithm may generate a
#  lot of data if saveDataIterations is small.
collectDataIterations 1
saveDataIterations 5


# --------------------------------- #
# Microscope parameters
# (cf. Section 2.2 of the thesis.)
# --------------------------------- #

#Accelerating voltage in kilovolt
AcceleratingVoltage 300

#Maximum semiangle allowed by the objective aperture in radians
alpha_max 125e-3

#Half angle of beam convergence in radians (spatial coherence)
alpha 4e-4

#Focal spread parameter (Delta) in nanometers (temporal coherence)
FocalSpread 4.0


# ------------------------- #
# Aberration coefficients
# ------------------------- #

#Spherical aberration coefficient in nanometers
SphericalAberration -70


# ---------------- #
# Image settings
# ---------------- #

#Number of images in the series
N 12

#Width and height of the images in pixels
#  Note: X and Y must be even integers
X 256
Y 256

#Width and height of the images in nanometers
lenX 1.6
lenY 1.6

#Vector of N focus values
#  If the vector contains less than N values, then it is filled by
#  linear extrapolation of the last two values.
#  Note: the values can only be separated by whitespaces
Focus { -10 -8.5 }

#Subsection of the images that is used for the reconstruction
#  This is useful if the focus series is read from an external file
#  and the reconstruction should only be performed on a smaller
#  subsection of the images.
#  The point (subsection_x, subsection_y) denotes the top left corner
#  of the rectangular subsection in pixels and subsection_width resp.
#  subsection_height denote its width and height in pixels.
#  The width resp. height may be set to -1 to indicate that the
#  maximum possible width resp. height should be used (which is
#  X - subsection_x resp. Y - subsection_y).
#  Note: subsection_width and subsection_height must be even integers.
subsection_x 0
subsection_y 0
subsection_width -1
subsection_height -1


# ------------------------------------------------------------------ #
# Input data simulation settings
#
# These settings are used for the simulation of a focus series as
# input data to the minimization algorithm, i.e. if
# inputDataSource = 0 or if inputDataSource = 1 and inputDataFile is
# an exit wave.
# ------------------------------------------------------------------ #

#Specimen drift mode (used for the simulation of specimen drift)
#  0: linear
#     (use specimenDriftX and specimenDriftY parameters below)
#  1: prescribed shifts for each image
#     (use specimenPosX and specimenPosY parameters below)
specimenDriftMode 0

#Specimen drift between successive images in nanometers
#  (if specimenDriftMode = 0)
specimenDriftX 0.0064728
specimenDriftY 0.008473

#Specimen drift in nanometers for each of the N images
#  (if specimenDriftMode = 1)
#  Note: the values of the vectors can only be separated by
#        whitespaces
specimenPosX { 0.0  0.1   0.3  -0.14 }
specimenPosY { 0.0  0.02 -0.07 -0.2 }

#Rotation of the specimen in degrees
specimenRotation 22.0

#Size of the buffer zone around the simulated input images in pixels
#  The images are initially simulated on a grid of size
#      (X+2*inputDataBufferZone) x (Y+2*inputDataBufferZone)
#  but only the central image section of size X x Y is used during the
#  reconstruction.
#  This has two effects: (1) the wrap around error is reduced in the
#  simulated input images and (2) black (or "empty") pixels at the
#  image border caused by the specimen drift and rotation are not
#  contained in the image section that is used for the reconstruction.
#  Note: if an exit wave is read from file, the exit wave is expected
#        to be of the size
#           (X+2*inputDataBufferZone) x (Y+2*inputDataBufferZone).
inputDataBufferZone 128


# ----------------------------------------------------- #
# Specimen settings
#
# These settings determine the simulated specimen if
# inputDataSource = 0.
# ----------------------------------------------------- #

#Specimen flag
#  0: a lattice of point charges (alternating positive and negative
#     charges)
#  1: a single atom
#  2: a standard lattice of atoms
#  3: five atoms on a line (carbon, silicon, copper, gold, uranium)
#  4: a single atom near the image border (to show the wrap around
#     error)
#  5: atoms in a honeycomb structure
specimenFlag 2

#Half of the number of atoms or point charges in the visible area in
#each direction (if specimenFlag in {0,2})
specimenPointsX 5
specimenPointsY 5

#Distance of neighboring atoms in nanometer (if specimenFlag = 5)
specimenHoneycombParam 0.142

#Offset of the specimen in nanometers (if specimenFlag in {0,1,2,3,5})
specimenOffsetX 0.04
specimenOffsetY -0.02

#Atomic number of the simulated atoms (if specimenFlag in {1,2,4,5})
specimenAtomicNumber 29

#Path to a file containing the potential coefficients used for the
#simulation of the projected atomic potential of single atoms
#(if specimenFlag in {1,2,3,4,5})
#  Used by the functions GetPotentialCoefficients and
#  CalculateProjectedAtomicPotential in the file SimulateInputData.h.
#  The file path may be an absolute or relative path with respect to
#  this parameter file.
specimenPotentialCoefficientsFile "PotentialCoefficients.param"


# ------------------------- #
# Reconstruction settings
# ------------------------- #

#Maximum number of iterations
max_iterations 1000

#Stopping criterion
#  The reconstruction stops if
#      E_{k-1} - E_k < stop_epsilon,
#  where E_k is the energy after the k-th step.
stop_epsilon 0

#Scalar coefficient of the regularizer
tikhonov_coeff 0e-5

#Scale mask factors (cf. Section 4.4.2 in the thesis)
scaleMask_exitwave 1e-1
scaleMask_translation 1e-1
scaleMask_focus 1e1

#Parameters for the use of the circular shaped scale mask as the
#preconditioner for the exit wave (cf. Section 4.4.2 in the thesis)
#  enableEWCircularScaleMask: boolean that determines if a circular
#     scale mask is used (1) or not used (0) for the exit wave.
#  EWCircularScaleMaskUpdateSteps: the number of steps in between
#     updates of the circular scale mask
#  EWCircularScaleMaskComputationMode: image simulation mode for the
#     computation of the circular scale mask. The possible values are
#     the same as for simulationMode above. Note that choosing the TCC
#     T_Z^Ishizuka makes the computation of the scale mask very
#     expensive.
enableEWCircularScaleMask 0
EWCircularScaleMaskUpdateSteps 9999999
EWCircularScaleMaskComputationMode 0

#Size of the buffer zone that is added to the exit wave and input
#images for the reconstruction in pixels (cf. Section 4.4.3 in the
#thesis)
#  The reconstruction is performed with an exit wave of the size
#     (X+2*reconstructionBufferZone) x (Y+2*reconstructionBufferZone),
#  which has at least two advantages:
#    1. the wrap around error in the images that are simulated from
#       the current estimate of the exit wave is reduced.
#    2. the integration domains (see below) can contain a larger
#       subsection of the input images if the specimen drift is not
#       zero.
reconstructionBufferZone 128

#Parameters for the automatical adjustment of the integration domains
#of the summands of the objective functional during the
#reconstruction (cf. Section 4.4.4 in the thesis)
#  enableIntegrationDomainFitting: boolean that is used to enable (1)
#     or disable (0) the automatic adjustment of the integration
#     domains.
#  IntegrationDomainFittingSteps: integer >= 5 that gives the number
#     of iterations after which the integration domains are checked
#     and possibly updated based on the changes in the translations in
#     the previous IntegrationDomainFittingSteps iterations.
#
#Note: if the arguments are optimized alternatingly (see the opt_*
#      parameters and AlternatingMinimizationSteps below), then
#      IntegrationDomainFittingSteps is rounded up to the next
#      multiple of S, where S is the sum of the elements of
#      AlternatingMinimizationSteps.
#
#Note 2: if the translations are not optimized (see the opt_*
#        parameters below) then the integration domains don't need to
#        be adjusted and enableIntegrationDomainFitting is disabled
#        regardless of the value given here.
enableIntegrationDomainFitting 1
IntegrationDomainFittingSteps 10

#Parameters that determine which arguments are optimized at what time
#  opt_*: a vector of integers that determines the phases of the
#         minimization algorithm when the corresponding argument is
#         optimized.
#  AlternatingMinimizationSteps: length of each phase given as the
#                                number of iterations.
#
#  Possible values for the phases are all nonnegative integers. If an
#  empty vector is given, then the corresponding argument is not
#  optimized at all. The vector AlternatingMinimizationSteps is
#  expected to contain exactly M integers giving the number of
#  iterations for the phases 0 ... M-1, where M-1 is the largest phase
#  number used in the opt_* vectors (unless M = 1, in which case
#  AlternatingMinimizationSteps is meaningless)
#
#Example 1: Optimize the exit wave and translations simultaneously,
#           while keeping the focus values fixed (for max_iterations
#           steps in total or until the stopping criterion given by
#           stop_epsilon is fulfilled; AlternatingMinimizationSteps is
#           irrelevant here):
#               opt_exitwave { 0 }
#               opt_translation { 0 }
#               opt_focus { }
#               AlternatingMinimizationSteps { }
#
#Example 2: First optimize the exit wave and translations for 20
#           iterations, then the exit wave and focus values for 5
#           iterations; repeat this for max_iterations steps in total
#           or until the stopping criterion given by stop_epsilon is
#           fulfilled:
#               opt_exitwave { 0  1 }
#               opt_translation { 0 }
#               opt_focus { 1 }
#               AlternatingMinimizationSteps { 20  5 }
#
#Note: the values of the vectors can only be separated by whitespaces
opt_exitwave { 0 }
opt_translation { 0 }
opt_focus { }
AlternatingMinimizationSteps { }


# --------------- #
# Initial guess
# --------------- #

#Initial guess for the exit wave
#  0: zero (note that this is a very bad initial guess for the exit
#           wave as it is a local maximum of the objective functional)
#  1: square root of the mean intensity of the image series
#  2: simulated exit wave (only available if inputDataSource = 0 or
#     inputDataSource = 1 and inputDataFile is an exit wave)
initialGuess_ExitWave 1

#Initial guess for the translations
#  0: zero
#  1: calculated from the cross-correlation of successive images in
#     the series
#  2: the correct translation values
#  3: the correct translation values distorted by Gaussian noise
#  Note that the options 2 and 3 are only available if
#  inputDataSource = 0 or inputDataSource = 1 and inputDataFile is an
#  exit wave.
initialGuess_Translation 1

#Maximum shift in x and y direction between two successive images in
#the focus series that is considered by the initial registration with
#the cross-correlation (if initialGuess_Translation = 1; given in
#nanometers)
#  If a hint is specified with the initialGuess_TranslationHint_*
#  parameters below, then this parameter is not considered as an
#  absolute maximum shift between successive images, but rather as
#  relative maximum error on the shift given by the hint parameter.
initialGuess_TranslationMaxShift 0.01

#Hint for the correct translation if initialGuess_Translation = 1
#  The initial registration using the cross-correlation may fail in
#  some cases, for example if there is a contrast inversion between
#  two images in the series or the specimen drift is too large. The
#  following three parameters can be used to provide an initial guess
#  for the relative image shift in pixels manually.
#
#Example: to set the initial guess for the relative image shift from
#         image 11 to image 12 to -5 pixels in the x direction and -2
#         pixels in the y direction, set
#             initialGuess_TranslationHint_Img { 11 }
#             initialGuess_TranslationHint_ShiftX { -5 }
#             initialGuess_TranslationHint_ShiftY { -2 }
initialGuess_TranslationHint_Img { 4 5 6 }
initialGuess_TranslationHint_ShiftX { -2 -2 -2 }
initialGuess_TranslationHint_ShiftY { -2 -2 -2 }

#Standard deviation of the Gaussian noise in nanometers (if
#initialGuess_Translation = 3)
initialGuess_TranslationStdDev 0.005

#Upper bound on the error of the initial guess for the translation in
#pixel
#  If initialGuess_Translation in {0,1}, then
#      i * initialGuess_TranslationErrorBound
#  is used as the upper bound for the i-th translation.
#  Otherwise
#      initialGuess_TranslationErrorBound
#  is used as the upper bound for every translation.
#  This parameter is used to calculate the initial sizes of the
#  integration domains. The larger the value of this parameter is
#  chosen, the smaller the initial size of the integration domains.
initialGuess_TranslationErrorBound 4

#Initial guess for the focus values
#  0: zero (except for the first focus value, which is set to the
#     first value of the Focus vector as this value is fixed during
#     the minimization)
#  1: the values given by the Focus vector
#  2: the values given by the Focus vector distorted by Gaussian noise
initialGuess_Focus 1

#Standard deviation of the Gaussian noise in nanometers
#(if initialGuess_Focus = 2)
initialGuess_FocusStdDev 1

