From f669d99fa7382edd76e7f42245309d68f66f1339 Mon Sep 17 00:00:00 2001
From: Milos Cernak <milos.cernak@idiap.ch>
Date: Wed, 15 Mar 2017 11:32:17 +0100
Subject: [PATCH] Patched makefiles for conda build

---
 src/Makefile                           |  10 +--
 src/configure                          |   2 +-
 src/gmmbin/Makefile                    |   3 +-
 src/gmmbin/global-gmm-adapt-map.cc     |  95 ++++++++++++++++++++
 src/gmmbin/gmm-compute-likes-gmmubm.cc | 156 +++++++++++++++++++++++++++++++++
 src/makefiles/default_rules.mk         |   2 +-
 6 files changed, 260 insertions(+), 8 deletions(-)
 create mode 100755 src/gmmbin/global-gmm-adapt-map.cc
 create mode 100755 src/gmmbin/gmm-compute-likes-gmmubm.cc

diff --git a/src/Makefile b/src/Makefile
index 52b2326..2757699 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -8,14 +8,14 @@ SHELL := /bin/bash
 SUBDIRS = base matrix util feat tree thread gmm transform \
           fstext hmm lm decoder lat kws cudamatrix nnet \
           bin fstbin gmmbin fgmmbin featbin \
-          nnetbin latbin sgmm2 sgmm2bin nnet2 nnet3 chain nnet3bin nnet2bin kwsbin \
-          ivector ivectorbin online2 online2bin lmbin chainbin
+          nnetbin latbin sgmm2 sgmm2bin nnet2 nnet3 chain nnet2bin kwsbin \
+          ivector ivectorbin online2 lmbin chainbin
 
 MEMTESTDIRS = base matrix util feat tree thread gmm transform \
           fstext hmm lm decoder lat nnet kws chain \
           bin fstbin gmmbin fgmmbin featbin \
-          nnetbin latbin sgmm2 nnet2 nnet3 nnet2bin nnet3bin sgmm2bin kwsbin \
-          ivector ivectorbin online2 online2bin lmbin
+          nnetbin latbin sgmm2 nnet2 nnet3 nnet2bin sgmm2bin kwsbin \
+          ivector ivectorbin online2 lmbin
 
 CUDAMEMTESTDIR = cudamatrix
 
@@ -150,7 +150,7 @@ $(EXT_SUBDIRS) : mklibdir ext_depend
 # this is necessary for correct parallel compilation
 #1)The tools depend on all the libraries
 
-bin fstbin gmmbin fgmmbin sgmm2bin featbin nnetbin nnet2bin nnet3bin chainbin latbin ivectorbin lmbin kwsbin online2bin: \
+bin fstbin gmmbin fgmmbin sgmm2bin featbin nnetbin nnet2bin chainbin latbin ivectorbin lmbin kwsbin: \
  base matrix util feat tree thread gmm transform sgmm2 fstext hmm \
  lm decoder lat cudamatrix nnet nnet2 nnet3 ivector chain kws online2
 
diff --git a/src/configure b/src/configure
index a4f3ce1..277ab2e 100755
--- a/src/configure
+++ b/src/configure
@@ -1031,7 +1031,7 @@ check_compiler $CXX
 echo "# Base configuration" >> kaldi.mk
 echo >> kaldi.mk
 if $dynamic_kaldi ; then
-  KALDILIBDIR=`pwd`/lib
+  KALDILIBDIR=${PREFIX}/lib
   echo "KALDI_FLAVOR := dynamic" >> kaldi.mk
   echo "KALDILIBDIR := $KALDILIBDIR" >> kaldi.mk
 fi
diff --git a/src/gmmbin/Makefile b/src/gmmbin/Makefile
index 7adb8bd..b2a9ea4 100644
--- a/src/gmmbin/Makefile
+++ b/src/gmmbin/Makefile
@@ -28,7 +28,8 @@ BINFILES = gmm-init-mono gmm-est gmm-acc-stats-ali gmm-align \
            gmm-est-fmllr-raw gmm-est-fmllr-raw-gpost gmm-global-init-from-feats \
            gmm-global-info gmm-latgen-faster-regtree-fmllr gmm-est-fmllr-global \
            gmm-acc-mllt-global gmm-transform-means-global gmm-global-get-post \
-           gmm-global-gselect-to-post gmm-global-est-lvtln-trans
+           gmm-global-gselect-to-post gmm-global-est-lvtln-trans \
+           global-gmm-adapt-map gmm-compute-likes-gmmubm
 
 OBJFILES =
 
diff --git a/src/gmmbin/global-gmm-adapt-map.cc b/src/gmmbin/global-gmm-adapt-map.cc
new file mode 100755
index 0000000..8344d82
--- /dev/null
+++ b/src/gmmbin/global-gmm-adapt-map.cc
@@ -0,0 +1,95 @@
+// gmmbin/gmm-est-map.cc
+
+// Copyright 2009-2012  Microsoft Corporation
+//                      Johns Hopkins University (author: Daniel Povey)
+//                      Idiap (author: Srikanth Madikeri)
+
+// See ../../COPYING for clarification regarding multiple authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//  http://www.apache.org/licenses/LICENSE-2.0
+//
+// THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+// KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
+// WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
+// MERCHANTABLITY OR NON-INFRINGEMENT.
+// See the Apache 2 License for the specific language governing permissions and
+// limitations under the License.
+
+#include "base/kaldi-common.h"
+#include "util/common-utils.h"
+#include "gmm/mle-diag-gmm.h"
+
+int main(int argc, char *argv[]) {
+  try {
+    using namespace kaldi;
+    typedef kaldi::int32 int32;
+    
+    const char *usage =
+        "Do Maximum A Posteriori re-estimation of GMM-based acoustic model\n"
+        "Usage:  global-gmm-adapt-map [options] <model-in> <stats-in> <model-out>\n"
+        "e.g.: global-gmm-adapt-map 1.mdl 1.acc 2.mdl\n";
+
+    bool binary_write = true;
+    MapDiagGmmOptions gmm_opts;
+    std::string update_flags_str = "mvwt";
+    std::string occs_out_filename;
+
+    ParseOptions po(usage);
+    po.Register("binary", &binary_write, "Write output in binary mode");
+    po.Register("update-flags", &update_flags_str, "Which GMM parameters to "
+                "update: subset of mvwt.");
+    po.Register("write-occs", &occs_out_filename, "File to write state "
+                "occupancies to.");
+    gmm_opts.Register(&po);
+
+    po.Read(argc, argv);
+
+    if (po.NumArgs() != 3) {
+      po.PrintUsage();
+      exit(1);
+    }
+
+    kaldi::GmmFlagsType update_flags =
+        StringToGmmFlags(update_flags_str);
+
+    std::string model_in_filename = po.GetArg(1),
+        stats_filename = po.GetArg(2),
+        model_out_filename = po.GetArg(3);
+
+    DiagGmm dgmm;
+    {
+      bool binary_read;
+      Input ki(model_in_filename, &binary_read);
+      dgmm.Read(ki.Stream(), binary_read);
+    }
+
+    AccumDiagGmm gmm_accs;
+    {
+      bool binary;
+      Input ki(stats_filename, &binary);
+      gmm_accs.Read(ki.Stream(), binary, true);  // true == add; doesn't matter here.
+    }
+
+
+    BaseFloat objf_impr, count;
+    // BaseFloat tot_like = 0.,
+    //     tot_t = 0.;
+    MapDiagGmmUpdate(gmm_opts, gmm_accs, update_flags, &dgmm,
+                       &objf_impr, &count);
+    KALDI_LOG << "GMM update: Overall " << (objf_impr/count)
+              << " objective function improvement per frame over "
+              <<  count <<  " frames";
+
+    Output ko(model_out_filename, binary_write);
+    dgmm.Write(ko.Stream(), binary_write);
+    KALDI_LOG << "Written model to " << model_out_filename;
+    return 0;
+  } catch(const std::exception &e) {
+    std::cerr << e.what() << '\n';
+    return -1;
+  }
+}
diff --git a/src/gmmbin/gmm-compute-likes-gmmubm.cc b/src/gmmbin/gmm-compute-likes-gmmubm.cc
new file mode 100755
index 0000000..593f325
--- /dev/null
+++ b/src/gmmbin/gmm-compute-likes-gmmubm.cc
@@ -0,0 +1,156 @@
+// fgmmbin/fgmm-global-get-frame-likes.cc
+
+// Copyright 2009-2011  Microsoft Corporation;  Saarland University
+
+// See ../../COPYING for clarification regarding multiple authors
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//  http://www.apache.org/licenses/LICENSE-2.0
+//
+// THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+// KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
+// WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
+// MERCHANTABLITY OR NON-INFRINGEMENT.
+// See the Apache 2 License for the specific language governing permissions and
+// limitations under the License.
+
+
+#include "base/kaldi-common.h"
+#include "util/common-utils.h"
+#include "gmm/model-common.h"
+#include "gmm/full-gmm.h"
+#include "gmm/diag-gmm.h"
+#include "gmm/mle-full-gmm.h"
+
+
+int main(int argc, char *argv[]) {
+  try {
+    using namespace kaldi;
+
+    const char *usage =
+        "Print out per-frame log-likelihoods for each utterance, as an archive\n"
+        "of vectors of floats.  If --average=true, prints out the average per-frame\n"
+        "log-likelihood for each utterance, as a single float.\n"
+        "Usage:  gmm-compute-likes-gmmubm [options] <model-in> <feature-rspecifier> "
+        "<likes-out-wspecifier>\n"
+        "e.g.: gmm-compute-likes-gmmubm spkr.gmm ubm.gmm scp:train.scp ark:1.likes\n";
+
+    ParseOptions po(usage);
+    bool average = false;
+    std::string gselect_rspecifier;
+    po.Register("gselect", &gselect_rspecifier, "rspecifier for gselect objects "
+                "to limit the #Gaussians accessed on each frame.");
+    po.Register("average", &average, "If true, print out the average per-frame "
+                "log-likelihood as a single float per utterance.");
+    po.Read(argc, argv);
+
+    if (po.NumArgs() != 4) {
+      po.PrintUsage();
+      exit(1);
+    }
+
+    std::string model_filename = po.GetArg(1),
+	ubm_filename       = po.GetArg(2),
+    feature_rspecifier = po.GetArg(3),
+    likes_wspecifier   = po.GetArg(4);
+
+
+// 
+//    DiagGmm dgmm;
+//    {
+//      bool binary_read;
+//      Input ki(model_in_filename, &binary_read);
+//     dgmm.Read(ki.Stream(), binary_read);
+//    }
+
+
+     DiagGmm  dgmm;
+    {
+      bool binary_read;
+      Input ki(model_filename, &binary_read);
+      dgmm.Read(ki.Stream(), binary_read);
+    }
+
+    DiagGmm  dubm;
+    {
+      bool binary_read_ubm;
+      Input ki(ubm_filename, &binary_read_ubm);
+      dubm.Read(ki.Stream(), binary_read_ubm);
+    }
+
+
+
+    double tot_like = 0.0, tot_frames = 0.0;
+
+    SequentialBaseFloatMatrixReader feature_reader(feature_rspecifier);
+    RandomAccessInt32VectorVectorReader gselect_reader(gselect_rspecifier);
+    BaseFloatVectorWriter likes_writer(average ? "" : likes_wspecifier);
+    BaseFloatWriter average_likes_writer(average ? likes_wspecifier : "");
+    int32 num_done = 0, num_err = 0;
+
+    for (; !feature_reader.Done(); feature_reader.Next()) {
+      std::string key = feature_reader.Key();
+      const Matrix<BaseFloat> &mat = feature_reader.Value();
+      int32 file_frames = mat.NumRows();
+      Vector<BaseFloat> likes(file_frames);
+      Vector<BaseFloat> likesUBM(file_frames);
+
+      if (gselect_rspecifier != "") {
+        if (!gselect_reader.HasKey(key)) {
+          KALDI_WARN << "No gselect information for utterance " << key;
+          num_err++;
+          continue;
+        }
+        const std::vector<std::vector<int32> > &gselect =
+            gselect_reader.Value(key);
+        if (gselect.size() != static_cast<size_t>(file_frames)) {
+          KALDI_WARN << "gselect information for utterance " << key
+                     << " has wrong size " << gselect.size() << " vs. "
+                     << file_frames;
+          num_err++;
+          continue;
+        }
+        
+        for (int32 i = 0; i < file_frames; i++) {
+          SubVector<BaseFloat> data(mat, i);
+          const std::vector<int32> &this_gselect = gselect[i];
+          int32 gselect_size = this_gselect.size();
+          KALDI_ASSERT(gselect_size > 0);
+          Vector<BaseFloat> loglikes;
+          Vector<BaseFloat> loglikesUBM;
+          dgmm.LogLikelihoodsPreselect(data, this_gselect, &loglikes);
+          dubm.LogLikelihoodsPreselect(data, this_gselect, &loglikesUBM);
+          likes(i) = loglikes.LogSumExp();
+          likesUBM(i) =  loglikesUBM.LogSumExp();
+        }
+      } else { // no gselect..
+        for (int32 i = 0; i < file_frames; i++){
+          likes(i)    = dgmm.LogLikelihood(mat.Row(i));
+          likesUBM(i) = dubm.LogLikelihood(mat.Row(i));
+        }
+
+      }
+
+      tot_like += likes.Sum();
+      tot_frames += file_frames;
+      if (average)
+        average_likes_writer.Write(key, (likes.Sum() - likesUBM.Sum())/ file_frames);
+        //average_likes_writer.Write(key, (likes.Sum())/ file_frames);
+      else
+        likes_writer.Write(key, likes);
+      num_done++;
+    }
+    KALDI_LOG << "Done " << num_done << " files; " << num_err
+              << " with errors.";
+    KALDI_LOG << "Overall likelihood per "
+              << "frame = " << (tot_like/tot_frames) << " over " << tot_frames
+              << " frames.";
+    return (num_done != 0 ? 0 : 1);
+  } catch(const std::exception &e) {
+    std::cerr << e.what();
+    return -1;
+  }
+}
diff --git a/src/makefiles/default_rules.mk b/src/makefiles/default_rules.mk
index 34abd90..0f0d980 100644
--- a/src/makefiles/default_rules.mk
+++ b/src/makefiles/default_rules.mk
@@ -36,7 +36,7 @@ ifeq ($(shell uname), Darwin)
 else ifeq ($(shell uname), Linux)
 	# Building shared library from static (static was compiled with -fPIC)
 	$(CXX) -shared -o $@ -Wl,--no-undefined -Wl,--as-needed  -Wl,-soname=$@,--whole-archive $(LIBNAME).a -Wl,--no-whole-archive $(LDFLAGS) $(LDLIBS)
-	rm -f $(KALDILIBDIR)/$@; ln -s $(shell pwd)/$@ $(KALDILIBDIR)/$@
+	rm -f $(KALDILIBDIR)/$@; cp -f $(shell pwd)/$@ $(KALDILIBDIR)/$@
 else  # Platform not supported
 	$(error Dynamic libraries not supported on this platform. Run configure with --static flag.)
 endif
-- 
2.1.4

