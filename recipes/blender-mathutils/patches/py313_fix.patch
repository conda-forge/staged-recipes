Subject: [PATCH] py313 fix
---
Index: src/generic/py_capi_utils.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/generic/py_capi_utils.c b/src/generic/py_capi_utils.c
--- a/src/generic/py_capi_utils.c	(revision e5489a6aa7e20baae3e1233d8733ca7bb838142f)
+++ b/src/generic/py_capi_utils.c	(date 1757337283785)
@@ -1629,7 +1629,12 @@
 
 int PyC_Long_AsBool(PyObject *value)
 {
+#if PY_VERSION_HEX >= 0x030D0000  /* Python 3.13+ */
+  const int test = PyLong_AsInt(value);
+#else
   const int test = _PyLong_AsInt(value);
+#endif
+
   if (UNLIKELY(test == -1 && PyErr_Occurred())) {
     return -1;
   }
@@ -1642,7 +1647,11 @@
 
 int8_t PyC_Long_AsI8(PyObject *value)
 {
+#if PY_VERSION_HEX >= 0x030D0000  /* Python 3.13+ */
+  const int test = PyLong_AsInt(value);
+#else
   const int test = _PyLong_AsInt(value);
+#endif
   if (UNLIKELY(test == -1 && PyErr_Occurred())) {
     return -1;
   }
@@ -1655,7 +1664,11 @@
 
 int16_t PyC_Long_AsI16(PyObject *value)
 {
+#if PY_VERSION_HEX >= 0x030D0000  /* Python 3.13+ */
+  const int test = PyLong_AsInt(value);
+#else
   const int test = _PyLong_AsInt(value);
+#endif
   if (UNLIKELY(test == -1 && PyErr_Occurred())) {
     return -1;
   }
Index: src/generic/py_capi_utils.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/generic/py_capi_utils.h b/src/generic/py_capi_utils.h
--- a/src/generic/py_capi_utils.h	(revision e5489a6aa7e20baae3e1233d8733ca7bb838142f)
+++ b/src/generic/py_capi_utils.h	(date 1757337343302)
@@ -257,7 +257,11 @@
 /* inline so type signatures match as expected */
 Py_LOCAL_INLINE(int32_t) PyC_Long_AsI32(PyObject *value)
 {
+#if PY_VERSION_HEX >= 0x030D0000  /* Python 3.13+ */
+  return (int32_t)PyLong_AsInt(value);
+#else
   return (int32_t)_PyLong_AsInt(value);
+#endif
 }
 Py_LOCAL_INLINE(int64_t) PyC_Long_AsI64(PyObject *value)
 {
