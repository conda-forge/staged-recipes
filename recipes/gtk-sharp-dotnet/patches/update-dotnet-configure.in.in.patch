--- ../../../src_cache/2_12_45_a4bb3593/configure.in.in	2025-01-18 11:02:43.670375800 -0800
+++ configure.in.in	2025-01-20 21:18:37.709725900 -0800
@@ -1,6 +1,6 @@
-
+# Initialization and basic configuration
 AC_INIT([gtk-sharp], [@GTK_SHARP_VERSION@])
-AC_CONFIG_SRCDIR(README)
-AC_CANONICAL_SYSTEM
-AC_CONFIG_HEADERS(config.h)
+AC_CONFIG_SRCDIR([README])
+AC_CONFIG_HEADERS([config.h])
+AC_CONFIG_MACRO_DIRS([m4])
 AM_INIT_AUTOMAKE
@@ -8,2 +8,3 @@
 
+# API and Package Versions
 API_VERSION=@ASSEMBLY_VERSION@
@@ -13,167 +14,27 @@
 
-PACKAGE_VERSION=gtk-sharp-2.0
-AC_SUBST(PACKAGE_VERSION)
-
+# Set up Win64 platform checks
 WIN64DEFINES=
-
 case "$host" in
-	x86_64-*-mingw*|x86_64-*-cygwin*)
-		WIN64DEFINES="-define:WIN64LONGS"
-		platform_win32=yes
-		AC_DEFINE(PLATFORM_WIN32,1,[Platform is Win32])
-		if test "x$cross_compiling" = "xno"; then
-			CC="gcc -g"
-			HOST_CC="gcc"
-		fi
-		;;
-	*-*-mingw*|*-*-cygwin*)
-		platform_win32=yes
-		AC_DEFINE(PLATFORM_WIN32,1,[Platform is Win32])
-		if test "x$cross_compiling" = "xno"; then
-			CC="gcc -g"
-			HOST_CC="gcc"
-		fi
-		;;
-	*)
-		platform_win32=no
-		;;
+    x86_64-*-mingw*|x86_64-*-cygwin*)
+        WIN64DEFINES="-define:WIN64LONGS"
+        platform_win32=yes
+        AC_DEFINE([PLATFORM_WIN32], [1], [Platform is Win32])
+        ;;
+    *-*-mingw*|*-*-cygwin*)
+        platform_win32=yes
+        AC_DEFINE([PLATFORM_WIN32], [1], [Platform is Win32])
+        ;;
+    *)
+        platform_win32=no
+        ;;
 esac
+AM_CONDITIONAL([PLATFORM_WIN32], [test x$platform_win32 = xyes])
 
-AM_CONDITIONAL(PLATFORM_WIN32, test x$platform_win32 = xyes)
-
-AC_CHECK_TOOL(CC, gcc, gcc)
-AC_PROG_CC
-AC_PROG_INSTALL
-
-dnl may require a specific autoconf version
-dnl AC_PROG_CC_FOR_BUILD
-dnl CC_FOR_BUILD not automatically detected
-CC_FOR_BUILD=$CC
-BUILD_EXEEXT=
-if test "x$cross_compiling" = "xyes"; then
-	CC_FOR_BUILD=cc
-	BUILD_EXEEXT=""
-fi
-AC_SUBST(CC_FOR_BUILD)
-AC_SUBST(HOST_CC)
-AC_SUBST(BUILD_EXEEXT)
-
-# Set STDC_HEADERS
-AC_HEADER_STDC
-AC_LIBTOOL_WIN32_DLL
-AM_PROG_LIBTOOL
-
-# not 64 bit clean in cross-compile
-AC_CHECK_SIZEOF(void *, 4)
-
-CFLAGS="${CFLAGS} -g -Wall -Wunused -Wmissing-prototypes -Wmissing-declarations -Wstrict-prototypes  -Wmissing-prototypes -Wnested-externs  -Wshadow -Wpointer-arith -Wno-cast-qual -Wcast-align -Wwrite-strings"
-
-if test "x$enable_maintainer_mode" = "xyes"; then
-DEBUG_FLAGS='-debug:pdbonly'
-else
-DEBUG_FLAGS=
-AC_ARG_ENABLE(debug, [  --enable-debug          Build debugger (.mdb) files for dlls],
-	DEBUG_FLAGS='-debug'
-)
-fi
-
-enable_msi="no"
-if test "x$platform_win32" = "xyes"; then
-	AC_PATH_PROG(WIX, candle, no)
-	if test "x$WIX" != "xno" ; then
-		enable_msi="yes"
-	fi
-fi
-
-CSDEFINES='@VERSIONCSDEFINES@'
-
-GTK_SHARP_VERSION_CFLAGS='@VERSIONCFLAGS@'
-AC_SUBST(GTK_SHARP_VERSION_CFLAGS)
-
-AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
-if test "x$PKG_CONFIG" = "xno"; then
-	AC_MSG_ERROR([You need to install pkg-config])
-fi
-
-dnl for use on the build system
-BUILD_GTK_CFLAGS=`$PKG_CONFIG --cflags gtk+-2.0`
-BUILD_GTK_LIBS=`$PKG_CONFIG --libs gtk+-2.0`
-AC_SUBST(BUILD_GTK_CFLAGS)
-AC_SUBST(BUILD_GTK_LIBS)
-
-AC_CHECK_SIZEOF(off_t)
-OFF_T_FLAGS="-define:OFF_T_$ac_cv_sizeof_off_t"
-AC_SUBST(OFF_T_FLAGS)
-
-MONO_REQUIRED_VERSION=1.0
-FIRST_MONO_VERSION_WITH_NET_4_6_SUPPORT=4.4
-PKG_CHECK_MODULES(MONO_DEPENDENCY, mono >= $MONO_REQUIRED_VERSION, has_mono=true, has_mono=false)
-if test "x$has_mono" = "xfalse" ; then
-	PKG_CHECK_MODULES(MONO_DEPENDENCY, mono-2 >= $MONO_REQUIRED_VERSION, has_mono=true, has_mono=false)
-	if test "x$has_mono" = "xtrue" ; then
-		PKG_CHECK_MODULES(MONO_DEPENDENCY, mono-2 >= $FIRST_MONO_VERSION_WITH_NET_4_6_SUPPORT, NET_4_6_SUPPORT=true, NET_4_6_SUPPORT=false)
-	fi
-else
-	PKG_CHECK_MODULES(MONO_DEPENDENCY, mono >= $FIRST_MONO_VERSION_WITH_NET_4_6_SUPPORT, NET_4_6_SUPPORT=true, NET_4_6_SUPPORT=false)
-fi
-
-if test "x$platform_win32" = "xyes"; then
-	NET_4_6_SUPPORT=true
-fi
-
-AC_PATH_PROG(GACUTIL, gacutil, no)
-if test "x$GACUTIL" = "xno" ; then
-	AC_MSG_ERROR([No gacutil tool found. You need to install either the mono or .Net SDK.])
-fi
-
-AC_PATH_PROG([AL], al, no)
-if test "x$AL" = "xno" ; then
-	AC_MSG_ERROR([No al tool found. You need to install either the mono or .Net SDK.])
-fi
-
-if test "x$has_mono" = "xtrue"; then
-GACUTIL_FLAGS='-package $(PACKAGE_VERSION) -gacdir $(DESTDIR)$(prefix)/lib'
-GENERATED_SOURCES=generated/*.cs
-AC_PATH_PROG(RUNTIME, mono, no)
-
-# If mono is found, it's in the path.  Require it to be in the path at runtime as well
-if test "x$RUNTIME" != "xno" ; then
-	RUNTIME=mono
-fi
-
-AC_PATH_PROG([CSC], mcs, no)
-if test `uname -s` = "Darwin"; then
-	LIB_PREFIX=
-	LIB_SUFFIX=.dylib
-else
-	LIB_PREFIX=.so
-	LIB_SUFFIX=
-fi
-SDCHECK="`$GACUTIL -l |grep ^System.Drawing, | head -n1 |cut -f1 -d','`"
-if test "x$SDCHECK" = "xSystem.Drawing"; then
-	enable_dotnet=yes
-else
-	enable_dotnet=no
-fi
-else
-AC_PATH_PROG(CSC, csc.exe, no)
-GACUTIL_FLAGS=
-GENERATED_SOURCES=generated\\\\*.cs
-enable_dotnet=yes
-
-if test x$CSC = "xno"; then
-	AC_MSG_ERROR([You need to install either mono or .Net])
-else
-RUNTIME=
+LT_INIT([shared])
+RUNTIME="dotnet"
+CSC="$RUNTIME build"
+GACUTIL="$RUNTIME nuget"
 LIB_PREFIX=
-LIB_SUFFIX=.dylib
-fi
-fi
-
-CS="C#"
-if test "x$CSC" = "xno" ; then
-	AC_MSG_ERROR([No $CS compiler found])
-fi
+LIB_SUFFIX=.dll
 
-AL="\"$AL\""
 AC_SUBST(RUNTIME)
@@ -181,13 +42,25 @@
 AC_SUBST(GACUTIL)
-AC_SUBST(GACUTIL_FLAGS)
 AC_SUBST(LIB_PREFIX)
 AC_SUBST(LIB_SUFFIX)
-AC_SUBST(GENERATED_SOURCES)
 
-PKG_CHECK_MODULES(MONO_CAIRO, mono-cairo >= $MONO_REQUIRED_VERSION, enable_mono_cairo=no, enable_mono_cairo=yes)
-AC_SUBST(MONO_CAIRO_LIBS)
+CSDEFINES='@VERSIONCSDEFINES@'
+GTK_SHARP_VERSION_CFLAGS='@VERSIONCFLAGS@'
+AC_SUBST(CSDEFINES)
+AC_SUBST(GTK_SHARP_VERSION_CFLAGS)
 
-GTK_REQUIRED_VERSION=@GTK_REQUIRED_VERSION@
+# Add preprocessor and compiler flags
+CFLAGS="${CFLAGS} -g -Wall -Wunused -Wmissing-prototypes -Wmissing-declarations -Wstrict-prototypes -Wmissing-prototypes -Wnested-externs -Wshadow -Wpointer-arith -Wno-cast-qual -Wcast-align -Wwrite-strings"
+CSFLAGS="$CSDEFINES $WIN64DEFINES -unsafe"
+AC_SUBST(CFLAGS)
+AC_SUBST(CSFLAGS)
 
-PKG_CHECK_MODULES(GLIB, gobject-2.0 >= $GTK_REQUIRED_VERSION)
+AC_PATH_PROG([RUNTIME], [dotnet], no)
+if test "x$RUNTIME" = "xno"; then
+  AC_MSG_ERROR([No dotnet CLI tool found. Please install the .NET SDK (https://dotnet.microsoft.com/).])
+fi
+AM_CONDITIONAL([ENABLE_DOTNET], [true])
+AM_CONDITIONAL([ENABLE_MONO_CAIRO], [false])
+AM_CONDITIONAL([ENABLE_MONODOC], [false])
+# PKG-Config dependency checks
+PKG_CHECK_MODULES(GLIB, [gobject-2.0 >= @GTK_REQUIRED_VERSION@])
 AC_SUBST(GLIB_CFLAGS)
@@ -195,3 +68,3 @@
 
-PKG_CHECK_MODULES(PANGO, pango)
+PKG_CHECK_MODULES(PANGO, [pango])
 AC_SUBST(PANGO_CFLAGS)
@@ -199,3 +72,3 @@
 
-PKG_CHECK_MODULES(ATK, atk)
+PKG_CHECK_MODULES(ATK, [atk])
 AC_SUBST(ATK_CFLAGS)
@@ -203,3 +76,3 @@
 
-PKG_CHECK_MODULES(GTK, gtk+-2.0 >= $GTK_REQUIRED_VERSION)
+PKG_CHECK_MODULES(GTK, [gtk+-2.0 >= @GTK_REQUIRED_VERSION@])
 AC_SUBST(GTK_CFLAGS)
@@ -208,44 +81,14 @@
 GLADE_REQUIRED_VERSION=2.3.6
-PKG_CHECK_MODULES(GLADE, libglade-2.0 >= $GLADE_REQUIRED_VERSION, enable_glade=yes, enable_glade=no)
-AC_SUBST(GLADE_CFLAGS)
-AC_SUBST(GLADE_LIBS)
-
-GDK_BACKEND=`pkg-config --variable=target gtk+-2.0`
-AC_SUBST(GDK_BACKEND)
-
-AC_PATH_PROG(MDASSEMBLER, mdassembler, no)
-AC_PATH_PROG(MONODOCER, monodocer, no)
-if test "x$MONODOCER" = "xno" -o "x$MDASSEMBLER" = "xno"; then
-  enable_monodoc=no
-  doc_sources_dir=
-else
-  enable_monodoc=yes
-  doc_sources_dir="`pkg-config --variable=sourcesdir monodoc`"
-fi
-AC_SUBST(MDASSEMBLER)
-AC_SUBST(MONODOCER)
-
-AM_CONDITIONAL(ENABLE_MONO_CAIRO, test "x$enable_mono_cairo" = "xyes")
-AM_CONDITIONAL(ENABLE_GLADE, test "x$enable_glade" = "xyes")
-AM_CONDITIONAL(ENABLE_DOTNET, test "x$enable_dotnet" = "xyes")
-AM_CONDITIONAL(ENABLE_MONODOC, test "x$enable_monodoc" = "xyes")
-AM_CONDITIONAL(ENABLE_MSI, test "x$enable_msi" = "xyes")
-AM_CONDITIONAL(ENABLE_MONOGETOPTIONS, test "x$has_mono" = "xtrue")
+PKG_CHECK_MODULES(GLADE, [libglade-2.0 >= $GLADE_REQUIRED_VERSION], enable_glade=yes, enable_glade=no)
+AM_CONDITIONAL([ENABLE_GLADE], [test x$enable_glade = xyes])
 
-CSFLAGS="$DEBUG_FLAGS $CSDEFINES $WIN64DEFINES -unsafe"
-
-if test "x$NET_4_6_SUPPORT" = "xtrue" ; then
-  CSFLAGS="$CSFLAGS -define:HAVE_NET_4_6"
-fi
-PKG_CHECK_MODULES(GLIB_2_31,
-  glib-2.0 >= 2.31,
-  HAVE_GLIB_2_31_OR_HIGHER=yes, HAVE_GLIB_2_31_OR_HIGHER=no)
-
-if test "x$HAVE_GLIB_2_31_OR_HIGHER" = "xyes" ; then
-  CFLAGS="$CFLAGS -DDISABLE_GTHREAD_CHECK"
-  CSFLAGS="$CSFLAGS -define:DISABLE_GTHREAD_CHECK"
+# MSI support for Windows
+enable_msi="no"
+if test "x$platform_win32" = "xyes"; then
+  AC_PATH_PROG([WIX], [candle], no)
+  if test "x$WIX" != "xno"; then
+    enable_msi="yes"
+  fi
 fi
-
-AC_SUBST(CSFLAGS)
-AC_SUBST(CFLAGS)
+AM_CONDITIONAL([ENABLE_MSI], [test x$enable_msi = xyes])
 
@@ -255,18 +98,5 @@
 policy.config
-msi/gtk-sharp-2.0.wxs
-msi/Makefile
-msi/unmanaged/Makefile
-msi/unmanaged/custom/Makefile
-msi/unmanaged/custom/etc/Makefile
-msi/unmanaged/custom/etc/gtk-2.0/Makefile
-msi/unmanaged/custom/share/Makefile
-msi/unmanaged/custom/share/icons/Makefile
-msi/unmanaged/custom/share/icons/hicolor/Makefile
 sources/Makefile
 parser/Makefile
-parser/gapi-2.0.pc
-parser/gapi2-fixup
-parser/gapi2-parser
 generator/Makefile
-generator/gapi2-codegen
 glib/Makefile
@@ -296,18 +126,5 @@
 gtkdotnet/gtk-dotnet-2.0.pc
-doc/Makefile
-sample/GtkDemo/Makefile
-sample/Makefile
-sample/pixmaps/Makefile
-sample/test/Makefile
-sample/valtest/Makefile
-sample/valtest/valtest.exe.config
-sample/opaquetest/Makefile
-sample/opaquetest/opaquetest.exe.config
 ])
 
-if test x$platform_win32 = xyes; then
-   # Get rid of 'cyg' prefixes in library names
-   sed -e "s/\/cyg\//\/\//" libtool > libtool.new; mv libtool.new libtool; chmod 755 libtool
-fi
-
+# Final setup report
 echo "---"
@@ -315,23 +132,12 @@
 echo ""
-echo "   * Installation prefix = $prefix"
-echo "   * $CS compiler: $CSC $CSFLAGS"
+echo "   Installation prefix = $prefix"
+echo "   C# compiler: $CSC"
 echo ""
-echo "   Optional assemblies included in the build:"
+echo "Optional assemblies included in the build:"
 echo ""
-echo "      * glade-sharp.dll: $enable_glade"
-echo "      * gtk-dotnet.dll: $enable_dotnet "
-if test "x$enable_mono_cairo" = "xyes"; then
-  echo "      * Mono.Cairo.dll: building local assembly"
+echo "   glade-sharp: $enable_glade"
+if test "x$enable_msi" = "xyes"; then
+  echo "   Generating MSI installer for Windows."
 else
-  echo "      * Mono.Cairo.dll: using system assembly"
-fi
-echo ""
-echo "      NOTE: if any of the above say 'no' you may install the"
-echo "            corresponding development packages for them, rerun"
-echo "            autogen.sh to include them in the build."
-echo ""
-echo "   * Documentation build enabled: $enable_monodoc "
-if test "x$enable_monodoc" = "xyes" -a "x$doc_sources_dir" != "x$prefix/lib/monodoc/sources"; then
-  echo "      WARNING: The install prefix is different than the monodoc prefix."
-  echo "               Monodoc will not be able to load the documentation."
+  echo "   No installer will be built."
 fi
