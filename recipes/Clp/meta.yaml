{% set name = "coin-or-clp" %}
{% set version = "1.17.4" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  - url: https://github.com/coin-or/Clp/archive/releases/{{ version }}.tar.gz
    # sha256: 7e2856ef7cab4bc1a439756cf101d5184a7af09d2921452a22a459ac8f949b7b
    sha256: ef412cde00cb1313d9041115a700d8d59d4b8b8b5e4dde43e9deb5108fcfbea8
    patches:
      - cmake.patch

build:
  number: 0
  skip: true  # [win]
  run_exports:
    - {{ pin_subpackage(name, max_pin='x.x') }}

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - cmake
    - make  # [unix]
  host:
    - coin-or-utils
    - coin-or-osi

test:
  commands:
    - test -f $PREFIX/lib/libClp${SHLIB_EXT}
    - test -f $PREFIX/lib/libOsiClp${SHLIB_EXT}
    - test -f $PREFIX/include/coin/ClpGubDynamicMatrix.hpp
    - test -f $PREFIX/include/coin/OsiClpSolverInterface.hpp
    - test -f $PREFIX/lib/cmake/Clp/ClpConfig.cmake

about: 
  home: https://projects.coin-or.org/Clp
  dev_url: https://github.com/coin-or/Clp
  license: EPL-1.0
  license_family: OTHER
  license_file: LICENSE
  summary: 'COIN-OR linear programming (Clp)' 
  description: |
    Clp (Coin-or linear programming) is an open-source linear programming solver.
    It is primarily meant to be used as a callable library, but a basic,
    stand-alone executable version is also available. It is designed to find
    solutions of mathematical optimization problems of the form

    minimize c'x such that lhs ≤ Ax ≤ rhs and lb ≤ x ≤ ub

    CLP includes primal and dual Simplex solvers. Both dual and primal algorithms can use matrix storage methods provided by the user (0-1 and network matrices are already supported in addition to the default sparse matrix). The dual algorithm has Dantzig and Steepest edge row pivot choices; new ones may be provided by the user. The same is true for the column pivot choice of the primal algorithm. The primal can also use a non linear cost which should work for piecewise linear convex functions. CLP also includes a barrier method for solving LPs.

extra:
  recipe-maintainers:
    - wolfv
