context:
  name: "rakudo"
  version: "2025.06"

package:
  name: ${{ name|lower }}
  version: ${{ version }}

source:
  url: https://github.com/${{ name }}/${{ name }}/releases/download/${{ version }}/${{ name }}-${{ version }}.tar.gz
  sha256: 202164a266f43091fde1f8cb22fdc45d9cfa03e9961aee708ba92b6d29087a72
  patches:
    - fix-null-chars.patch
    - fix-ignore-errors.patch
    - remove-all-conditionals.patch
    - fix-nqp-libdir-whitespace.patch

build:
  number: 0
  skip:
    - win
    - osx
  script:
    interpreter: perl
    content: |
      use strict;
      use warnings;
      use File::Spec;

      # Clean environment variables to remove null characters and excessive whitespace
      sub clean_env_var {
          my $var = shift;
          if (defined $ENV{$var}) {
              # Remove null bytes and trailing whitespace
              $ENV{$var} =~ tr/\0//d;
              $ENV{$var} =~ s/\s+$//;
          }
      }

      clean_env_var('BUILD_PREFIX');
      clean_env_var('PREFIX');

      # Find nqp executable (cross-platform)
      sub which {
          my $cmd = shift;
          my $exe_ext = $^O eq 'MSWin32' ? '.exe' : '';

          for my $dir (split($^O eq 'MSWin32' ? ';' : ':', $ENV{PATH})) {
              my $path = File::Spec->catfile($dir, $cmd . $exe_ext);
              return $path if -x $path;
          }
          die "Cannot find $cmd in PATH\n";
      }

      my $nqp_path = which('nqp');

      # Configure Rakudo
      my @configure_args = (
          'Configure.pl',
          '--backends=moar',
          "--prefix=$ENV{PREFIX}",
          "--with-nqp=$nqp_path",
          '--no-silent-build',
          # Note: Complains about MoarVM, NQP and Rakudo not being in the same directory, so we ignore errors.
          '--ignore-errors',
          '--relocatable'
      );

      print "Running: perl @configure_args\n";
      system('perl', @configure_args) == 0
          or die "Configure failed: $?\n";

      # Build and install
      my $make_cmd = $^O eq 'MSWin32' ? 'nmake' : 'make';
      my $cpu_count = $ENV{CPU_COUNT} // 1;

      print "Running: $make_cmd -j$cpu_count\n";
      system($make_cmd, "-j$cpu_count") == 0
          or die "Make failed: $?\n";

      print "Running: $make_cmd install\n";
      system($make_cmd, 'install') == 0
          or die "Make install failed: $?\n";

      print "Rakudo build completed successfully\n";

requirements:
  build:
    - ${{ compiler("c") }}
    - ${{ stdlib("c") }}
    - perl
    - make
    - nqp
  host:
    - nqp

  run_exports:
    - ${{ pin_subpackage("rakudo", exact=True) }}

# Not reproducible, complains that it cannot find executable. Compiles
# only when environment is manually loaded.
tests:
  - script:
      - raku -e 'say("Hello from Raku")'
      - out=$(raku -e 'say 40+2'); test "$out" = "42"
      - rakudo-debug --version
      - rakudo-debug-m --version
      - perl6 --version
      - perl6-debug --version
      - perl6-m --version
      - perl6-debug-m --version
      - rakudo-m --version
      - raku --version
      - rakudo --version

about:
  homepage: https://rakudo.org/
  license: Artistic-2.0
  license_file: LICENSE
  summary: A Raku Programming Language compiler for the MoarVM, JVM and Javascript virtual machines.
  description: |
    Rakudo is currently the most developed implementation of the Raku language; though there have been other partial implementations in the past. The Rakudo compiler has moar, jvm and js backends. Note that each backend has a slightly different set of features. For historical compilers see https://www.raku.org/compilers/.
  repository: https://github.com/rakudo/rakudo
  documentation: https://rakudo.org/docs

extra:
  recipe-maintainers:
    - remimimimimi
