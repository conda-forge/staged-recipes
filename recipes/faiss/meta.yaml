{% set version = "1.6.3" %}

package:
  name: faiss
  version: {{ version }}

source:
  url: https://github.com/facebookresearch/faiss/archive/v{{ version }}.tar.gz
  sha256: e1a41c159f0b896975fbb133e0240a233af5c9286c09a28fde6aefff5336e542
  patches:
    - patches/0001-change-python-Makefile-to-point-to-libfaiss.-SHLIB_E.patch

build:
  number: 0
  skip: True  # [win]

requirements:
  build:
    - {{ compiler('cxx') }}

outputs:
  - name: libfaiss-cpu
    script: build-lib-cpu.sh
    requirements:
      build:
        - {{ compiler('cxx') }}
        - cmake
        - llvm-openmp  # [osx]
        - libgomp      # [linux]
      host:
        - blas =*=mkl
        - mkl-devel
      run:
        - blas =*=mkl
        - mkl-devel

    test:
      commands:
        # shared
        - test -f $PREFIX/lib/libfaiss.so                           # [linux]
        - test -f $PREFIX/lib/libfaiss.dylib                        # [osx]
        - if not exist %PREFIX%\\Library\\bin\\libfaiss.dll exit 1  # [win]

        # absence of static libraries
        - test ! -f $PREFIX/lib/libfaiss.a                          # [not win]
        - if exist %PREFIX%\\Library\\lib\\libfaiss.lib exit 1      # [win]

        # conda tools
        - conda inspect linkages -p $PREFIX $PKG_NAME               # [not win]
        - conda inspect objects -p $PREFIX $PKG_NAME                # [osx]

        # headers for upstream-folders './', 'impl/', 'utils/'
        {% for each_header in [
            'AutoTune.h', 'clone_index.h', 'Clustering.h', 'DirectMap.h',
            'Index.h', 'Index2Layer.h', 'IndexBinary.h', 'IndexBinaryFlat.h',
            'IndexBinaryFromFloat.h', 'IndexBinaryHash.h', 'IndexBinaryHNSW.h',
            'IndexBinaryIVF.h', 'IndexFlat.h', 'IndexHNSW.h', 'IndexIVF.h',
            'IndexIVFFlat.h', 'IndexIVFPQ.h', 'IndexIVFPQR.h',
            'IndexIVFSpectralHash.h', 'IndexLattice.h', 'IndexLSH.h', 'IndexPQ.h',
            'IndexPreTransform.h', 'IndexReplicas.h', 'IndexScalarQuantizer.h',
            'IndexShards.h', 'index_factory.h', 'index_io.h', 'InvertedLists.h',
            'IVFlib.h', 'MatrixStats.h', 'MetaIndexes.h', 'MetricType.h',
            'OnDiskInvertedLists.h', 'VectorTransform.h',
            'impl/AuxIndexStructures.h', 'impl/FaissAssert.h', 'impl/FaissException.h',
            'impl/HNSW.h', 'impl/io.h', 'impl/lattice_Zn.h', 'impl/PolysemousTraining.h',
            'impl/ProductQuantizer-inl.h', 'impl/ProductQuantizer.h',
            'impl/ScalarQuantizer.h', 'impl/ThreadedIndex-inl.h', 'impl/ThreadedIndex.h',
            'utils/distances.h', 'utils/extra_distances.h', 'utils/hamming-inl.h',
            'utils/hamming.h', 'utils/Heap.h', 'utils/random.h', 'utils/utils.h',
            'utils/WorkerThread.h'
        ] %}
        - test -f $PREFIX/include/faiss/{{ each_header }}                                    # [unix]
        - if not exist %LIBRARY_INC%\\faiss\\{{ "\\".join(each_header.split("/")) }} exit 1  # [win]
        {% endfor %}

  - name: faiss-cpu
    script: build-cpu.sh
    requirements:
      build:
        - {{ compiler('cxx') }}
        - swig
        - cmake
      host:
        - python
        - pip
        - blas =*=mkl
        - {{ pin_subpackage('libfaiss-cpu', exact=True) }}
        # TODO: relax restriction here!
        - numpy >=1.18.*
        - llvm-openmp  # [osx]
        - libgomp      # [linux]
      run:
        - {{ pin_subpackage('libfaiss-cpu', exact=True) }}
        - blas =*=mkl
        - numpy

    test:
      requires:
        # this is necessary for a single test in the test suite
        - scipy
      source_files:
        - tests/
        - conda/faiss/run_test.py
      imports:
        - faiss
      commands:
        - python conda/faiss/run_test.py
        - python -m unittest discover tests

#   - name: faiss-gpu
#     build:
#       script: build-gpu.sh  # [unix]
#     # [removed for the moment]

about:
  home: https://github.com/facebookresearch/faiss
  license: MIT
  license_family: MIT
  license_file: LICENSE
  summary: 'A library for efficient similarity search and clustering of dense vectors.'

  description: |
    Faiss is a library for efficient similarity search and clustering of dense vectors.
    It contains algorithms that search in sets of vectors of any size, up to ones that
    possibly do not fit in RAM. It also contains supporting code for evaluation and
    parameter tuning. Faiss is written in C++ with complete wrappers for Python/numpy.
    Some of the most useful algorithms are implemented on the GPU. It is developed by
    [Facebook AI Research](https://research.fb.com/category/facebook-ai-research-fair/).
  doc_url: https://rawgit.com/facebookresearch/faiss/master/docs/html/annotated.html
  dev_url: https://github.com/facebookresearch/faiss

extra:
  recipe-maintainers:
    - h-vetinari
