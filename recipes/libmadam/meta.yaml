# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Jinja variables help maintain the recipe as you'll update the version only here.
# Using the name variable with the URL in line 14 is convenient
# when copying and pasting from another recipe, but not really needed.
{% set org = "hpc4cmb" %}
{% set name = "libmadam" %}
{% set version = "1.0.2" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  # url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  # If getting the source from GitHub, remove the line above,
  # uncomment the line below, and modify as needed. Use releases if available:
  url: https://github.com/{{ org }}/{{ name }}/releases/download/v{{ version }}/{{ name }}-{{ version }}.tar.bz2
  # and otherwise fall back to archive: 
  # url: https://github.com/simplejson/simplejson/archive/v{{ version }}.tar.gz
  sha256: f1434f95d5f59d9de3783b0dad1cb815e6abc8d38994c345c46b2e8529f0c03b
  # sha256 is the preferred checksum -- you can get it for a file with:
  #  `openssl sha256 <file name>`.
  # You may need the openssl package, available on conda-forge:
  #  `conda install openssl -c conda-forge``

build:
  # Uncomment the following line if the package is pure Python and the recipe is exactly the same for all platforms.
  # It is okay if the dependencies are not built for all platforms/versions, although selectors are still not allowed.
  # See https://conda-forge.org/docs/maintainer/knowledge_base.html#noarch-python for more details.
  # noarch: python
  number: 0
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  # script: "{{ PYTHON }} -m pip install . -vv"
  skip: True  # [win]

requirements:
  build:
    # If your project compiles code (such as a C extension) then add the required compilers as separate entries here.
    # Compilers are named 'c', 'cxx' and 'fortran'.
    - {{ compiler('c') }}
    - {{ compiler('fortran') }}
    - {{ mpi }}
  host:
    - python
    - pip
    - autoconf
    - automake
    - make
    - libtool
    - cfitsio
    - fftw
    - libblas
    - liblapack
  run:
    - python
    - {{ mpi }}
    - cfitsio
    - numpy

test:
  requires:
    - numpy
  # Some packages might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  source_files:
   - python/**/*.py
  imports:
    - libmadam_wrapper

about:
  home: https://github.com/hpc4cmb/libmadam
  # Remember to specify the license variants for BSD, Apache, GPL, and LGPL.
  # Use the SPDX identifier, e.g: GPL-2.0-only instead of GNU General Public License version 2.0
  # See https://spdx.org/licenses/
  license: GPL-3.0-only
  # The license_family, i.e. "BSD" if license is "BSD-3-Clause". (optional)
  # license_family: MIT
  # It is strongly encouraged to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # See https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#license-file
  license_file: LICENSE.md
  summary: 'Making CMB temperature and polarization maps with Madam'
  # The remaining entries in this section are optional, but recommended.
  description: |
    Library version of the Madam mapmaking code

    The Madam mapmaking algorithm is discussed in the following research papers:

    E. Keihänen, H. Kurki-Suonio and T. Poutanen:
    Madam - A Map-making method for CMB experiments,
    MNRAS 360 (2005) 390, astro-ph/0412517

    E. Keihänen, R. Keskitalo, H. Kurki-Suonio, T. Poutanen, A.-S. Sirviö:
    Making CMB temperature and polarization maps with Madam,
    A&A 510 (2010) A57, arXiv:0907.0367
  # doc_url: https://simplejson.readthedocs.io/
  # dev_url: https://github.com/simplejson/simplejson

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - ickc
