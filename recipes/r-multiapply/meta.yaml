{% set version = '2.1.1' %}
{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-multiapply
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/multiApply_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/multiApply/multiApply_{{ version }}.tar.gz
  sha256: 90da358d72f98d2efb89e894e1d9dc95c8f8efa75a1cd5555ab5c6c93fb653ef

build:
  merge_build_host: True  # [win]
  number: 0
  noarch: generic
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    - {{ posix }}zip               # [win]
  host:
    - r-base
    - r-doparallel
    - r-foreach
    - r-plyr
  run:
    - r-base
    - r-doparallel
    - r-foreach
    - r-plyr

test:
  commands:
    - $R -e "library('multiApply')"           # [not win]
    - "\"%R%\" -e \"library('multiApply')\""  # [win]

about:
  home: https://earth.bsc.es/gitlab/ces/multiApply
  license: LGPL-3.0-only
  summary: The base apply function and its variants, as well as the related functions in the
    'plyr' package, typically apply user-defined functions to a single argument (or
    a list of vectorized arguments in the case of mapply). The 'multiApply' package
    extends this paradigm with its only function, Apply, which efficiently applies functions
    taking one or a list of multiple unidimensional or multidimensional arrays (or combinations
    thereof) as input. The input arrays can have different numbers of dimensions as
    well as different dimension lengths, and the applied function can return one or
    a list of unidimensional or multidimensional arrays as output. This saves development
    time by preventing the R user from writing often error-prone and memory-inefficient
    loops dealing with multiple complex arrays. Also, a remarkable feature of Apply
    is the transparent use of multi-core through its parameter 'ncores'. In contrast
    to the base apply function, this package suggests the use of 'target dimensions'
    as opposite to the 'margins' for specifying the dimensions relevant to the function
    to be applied.
  license_family: LGPL
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/LGPL-3'

extra:
  recipe-maintainers:
    - conda-forge/r

# Package: multiApply
# Title: Apply Functions to Multiple Multidimensional Arrays or Vectors
# Version: 2.1.1
# Authors@R: c( person("BSC-CNS", role = c("aut", "cph")), person("Nicolau", "Manubens", , "nicolau.manubens@bsc.es", role = "aut"), person("Alasdair", "Hunter", , "alasdair.hunter@bsc.es", role = "aut"), person("Nuria", "Perez", , "nuria.perez@bsc.es", role = "cre"))
# Description: The base apply function and its variants, as well as the related functions in the 'plyr' package, typically apply user-defined functions to a single argument (or a list of vectorized arguments in the case of mapply). The 'multiApply' package extends this paradigm with its only function, Apply, which efficiently applies functions taking one or a list of multiple unidimensional or multidimensional arrays (or combinations thereof) as input. The input arrays can have different numbers of dimensions as well as different dimension lengths, and the applied function can return one or a list of unidimensional or multidimensional arrays as output. This saves development time by preventing the R user from writing often error-prone and memory-inefficient loops dealing with multiple complex arrays. Also, a remarkable feature of Apply is the transparent use of multi-core through its parameter 'ncores'. In contrast to the base apply function, this package suggests the use of 'target dimensions' as opposite to the 'margins' for specifying the dimensions relevant to the function to be applied.
# Depends: R (>= 3.2.0)
# Imports: doParallel, foreach, plyr
# Suggests: testthat
# License: LGPL-3
# URL: https://earth.bsc.es/gitlab/ces/multiApply
# BugReports: https://earth.bsc.es/gitlab/ces/multiApply/issues
# Encoding: UTF-8
# LazyData: true
# RoxygenNote: 5.0.0
# NeedsCompilation: no
# Packaged: 2019-09-03 14:10:50 UTC; nperez
# Author: BSC-CNS [aut, cph], Nicolau Manubens [aut], Alasdair Hunter [aut], Nuria Perez [cre]
# Maintainer: Nuria Perez <nuria.perez@bsc.es>
# Repository: CRAN
# Date/Publication: 2019-09-03 15:40:02 UTC
