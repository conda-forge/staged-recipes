{% set name = "dydxprotocol-v4-client-cpp" %}
{% set version = "1.1.31" %}

{% set so_version = "0.0.1" %}
{% set so_major_version = so_version.split('.')[0] %}

{% set dydx_v4_client_header_paths = {
  'common': ["types.h"],
  'common/streams': ["base.h"],
  'common/encoding': ["base64.h", "bech32.h"],
  'common/requests': ["util.h", "base.h"],
  'dydx_v4_futures': ["types.h", "composite_client.h", "constants.h", "instrument_info.h", "exchange_info.h", "example_configs.h", "account_info.h", "enums.h"],
  'dydx_v4_futures/requests': ["faucet.h", "node_grpc_gateway.h", "indexer.h"],
  'dydx_v4_futures/streams': ["indexer.h"],
  'dydx_v4_futures/encoding': ["signing.h", "proto.h", "proto_constructors.h"],
} %}

{% set dydx_v4_proto_header_paths = {
  'dydxprotocol/clob': ["order.pb.h", "query.pb.h", "operation.pb.h", "order_removals.pb.h", "genesis.pb.h", "tx.pb.h", "equity_tier_limit_config.pb.h", "clob_pair.pb.h", "matches.pb.h", "liquidations_config.pb.h", "liquidations.pb.h", "process_proposer_matches_events.pb.h", "mev.pb.h", "block_rate_limit_config.pb.h"],
  'dydxprotocol/subaccounts': ["subaccount.pb.h", "asset_position.pb.h", "query.pb.h", "genesis.pb.h", "perpetual_position.pb.h"],
  'dydxprotocol/assets': ["query.pb.h", "genesis.pb.h", "tx.pb.h", "asset.pb.h"],
  'dydxprotocol/perpetuals': ["perpetual.pb.h", "query.pb.h", "genesis.pb.h", "tx.pb.h", "params.pb.h"],
  'dydxprotocol/feetiers': ["query.pb.h", "genesis.pb.h", "tx.pb.h", "params.pb.h"],
  'dydxprotocol/blocktime': ["query.pb.h", "genesis.pb.h", "tx.pb.h", "blocktime.pb.h", "params.pb.h"],
  'dydxprotocol/rewards': ["reward_share.pb.h", "query.pb.h", "genesis.pb.h", "tx.pb.h", "params.pb.h"],
  'dydxprotocol/sending': ["query.pb.h", "genesis.pb.h", "tx.pb.h", "transfer.pb.h"],
  'dydxprotocol/prices': ["query.pb.h", "genesis.pb.h", "tx.pb.h", "market_param.pb.h", "market_price.pb.h"],
  'dydxprotocol/epochs': ["query.pb.h", "genesis.pb.h", "epoch_info.pb.h"],
  'dydxprotocol/indexer/shared': ["removal_reason.pb.h"],
  'dydxprotocol/indexer/socks': ["messages.pb.h"],
  'dydxprotocol/indexer/redis': ["redis_order.pb.h"],
  'dydxprotocol/indexer/events': ["events.pb.h"],
  'dydxprotocol/indexer/off_chain_updates': ["off_chain_updates.pb.h"],
  'dydxprotocol/indexer/indexer_manager': ["event.pb.h"],
  'dydxprotocol/indexer/protocol/v1': ["subaccount.pb.h", "clob.pb.h"],
  'dydxprotocol/delaymsg': ["query.pb.h", "block_message_ids.pb.h", "genesis.pb.h", "tx.pb.h", "delayed_message.pb.h"],
  'dydxprotocol/daemons/liquidation': ["liquidation.pb.h"],
  'dydxprotocol/daemons/pricefeed': ["price_feed.pb.h"],
  'dydxprotocol/daemons/bridge': ["bridge.pb.h"],
  'dydxprotocol/stats': ["query.pb.h", "genesis.pb.h", "tx.pb.h", "stats.pb.h", "params.pb.h"],
  'dydxprotocol/bridge': ["query.pb.h", "genesis.pb.h", "tx.pb.h", "bridge_event.pb.h", "params.pb.h", "bridge_event_info.pb.h"],
  'dydxprotocol/vest': ["query.pb.h", "genesis.pb.h", "tx.pb.h", "vest_entry.pb.h"],
} %}

package:
  name: dydxprotocol-v4-client-cpp-split
  version: {{ version }}

source:
  folder: all-sources
  url: https://github.com/dydxprotocol/v4-clients/archive/refs/tags/v4-client-js@{{ version }}.tar.gz
  sha256: eb6ffc4e53aa0a22f195092f2102fb5233c5c4dda7b11700208a1974d1428297
  patches:
    - patches/0001-remove-beast-specification.patch
    - patches/0002-add-cstdint-header.patch

build:
  number: 0

requirements:
  build:
    - {{ compiler('c') }}  # [not win]
    - {{ compiler('cxx') }}  # [not win]
    - {{ stdlib("c") }}
    # Using experimental m2w64 toolchain for now
    - mingw-w64-ucrt-x86_64-gcc  # [win and x86_64]
    - mingw-w64-ucrt-x86_64-g++  # [win and x86_64]
    - cmake >=3.25
    - ninja
    - patch  # [unix]
    - m2-patch  # [win]
  host:
    - catch2
    - fmt
    - libabseil >=20240116
    - libbip3x
    - libboost-devel
    - libprotobuf
    - libtoolbox
    - make
    - nlohmann_json
    - openssl
    - pkg-config
    - zlib

outputs:
  - name: libdydx_v4_client_lib
    build:
      run_exports:
        - {{ pin_subpackage('libdydx_v4_client_lib-' ~ so_major_version) }}
        - {{ pin_subpackage('libdydx_v4_proto-' ~ so_major_version) }}
    files:
      {% for path, headers in dydx_v4_client_header_paths.items() %}
        {% for header in headers %}
      - include/dydx_v4_client/{{ path }}/{{ header }}  # [unix]
      - Library\\include\\dydx_v4_client\\{{ path | replace('/', '\\\\') }}\\{{ header }}  # [win]
        {% endfor %}
      {% endfor %}

      - lib/libdydx_v4_client_lib.so  # [linux]
      - lib/libdydx_v4_client_lib.dylib  # [osx]
      - Library/lib/dydx_v4_client_lib.lib  # [win]
      - Library/lib/dydx_v4_client_lib.{{ so_major_version }}.lib  # [win]
      - Library/bin/dydx_v4_client_lib.dll  # [win]

      - lib/pkgconfig/dydx_v4_client_lib.pc  # [unix]
      - Library/lib/pkgconfig/dydx_v4_client_lib.pc  # [win]
      - lib/cmake/dydx_v4_client_lib/dydx_v4_client_lib-config.cmake  # [unix]
      - Library/lib/cmake/dydx_v4_client_lib/dydx_v4_client_lib-config.cmake  # [win]

      - bin/dydx_v4_client_lib_tests  # [unix]
      - bin\\dydx_v4_client_lib_tests.exe  # [win]
    requirements:
      build:
        - {{ compiler('c') }}  # [not win]
        - {{ compiler('cxx') }}  # [not win]
        - {{ stdlib("c") }}
        # Using experimental m2w64 toolchain for now
        - mingw-w64-ucrt-x86_64-gcc  # [win and x86_64]
        - mingw-w64-ucrt-x86_64-g++  # [win and x86_64]
      host:
        - {{ pin_subpackage('libdydx_v4_client_lib-' ~ so_major_version) }}
        - {{ pin_subpackage('libdydx_v4_proto-' ~ so_major_version) }}
        - fmt
        - libbip3x-3
        - openssl
      run:
        - {{ pin_subpackage('libdydx_v4_client_lib-' ~ so_major_version) }}
        - {{ pin_subpackage('libdydx_v4_proto-' ~ so_major_version) }}
    test:
      commands:
        {% for path, headers in dydx_v4_client_header_paths.items() %}
          {% for header in headers %}
        - test -f ${PREFIX}/include/dydx_v4_client/{{ path }}/{{ header }}  # [unix]
        - if not exist %PREFIX%\\Library\\include\\dydx_v4_client\\{{ path | replace('/', '\\\\') }}\\{{ header }} exit 1  # [win]
          {% endfor %}
        {% endfor %}

        - test -f ${PREFIX}/lib/libdydx_v4_client_lib.so  # [linux]
        - test -f ${PREFIX}/lib/libdydx_v4_client_lib.dylib  # [osx]
        - if not exist %PREFIX%\\Library/lib/dydx_v4_client_lib.lib exit 1  # [win]
        - if not exist %PREFIX%\\Library/lib/dydx_v4_client_lib.{{ so_major_version }}.lib exit 1  # [win]
        - if not exist %PREFIX%\\Library/bin/dydx_v4_client_lib.dll exit 1  # [win]

        - test -f ${PREFIX}/lib/pkgconfig/dydx_v4_client_lib.pc  # [unix]
        - if not exist %PREFIX%\\Library/lib/pkgconfig/dydx_v4_client_lib.pc exit 1  # [win]
        - test -f ${PREFIX}/lib/cmake/dydx_v4_client_lib/dydx_v4_client_lib-config.cmake  # [unix]
        - if not exist %PREFIX%\\Library/lib/cmake/dydx_v4_client_lib/dydx_v4_client_lib-config.cmake exit 1  # [win]

        - dydx_v4_client_lib_tests



  - name: libdydx_v4_client_lib-{{ so_major_version }}
    build:
      run_exports:
        - {{ pin_subpackage('libdydx_v4_client_lib-' ~ so_major_version) }}
      ignore_run_exports:
        - libdydx_v4_proto-{{ so_major_version }}
    files:
      - lib/libdydx_v4_client_lib.so.{{ so_major_version }}  # [linux]
      - lib/libdydx_v4_client_lib.{{ so_major_version }}.dylib  # [osx]
      - Library\\bin\\dydx_v4_client_lib.{{ so_major_version }}.dll  # [win]
      - lib/libdydx_v4_client_lib.so.{{ so_version }}  # [linux]
      - lib/libdydx_v4_client_lib.{{ so_version }}.dylib  # [osx]
      - Library\\bin\\dydx_v4_client_lib.{{ so_version }}.dll  # [win]
    requirements:
      build:
        - {{ compiler('c') }}  # [not win]
        - {{ compiler('cxx') }}  # [not win]
        - {{ stdlib("c") }}
        # Using experimental m2w64 toolchain for now
        - mingw-w64-ucrt-x86_64-gcc  # [win and x86_64]
        - mingw-w64-ucrt-x86_64-g++  # [win and x86_64]
      host:
        - {{ pin_subpackage('libdydx_v4_proto-' ~ so_major_version) }}
        - fmt
        - libbip3x-3
        - libboost-devel
        - libprotobuf
        - openssl
      run:
        - {{ pin_subpackage('libdydx_v4_proto-' ~ so_major_version) }}
    test:
      commands:
        - test -f ${PREFIX}/lib/libdydx_v4_client_lib${SHLIB_EXT}.{{ so_major_version }}  # [linux]
        - test -f ${PREFIX}/lib/libdydx_v4_client_lib.{{ so_major_version }}${SHLIB_EXT}  # [osx]
        - if not exist %PREFIX%\\Library\\bin\\dydx_v4_client_lib.{{ so_major_version }}%SHLIB_EXT% exit 1  # [win]
        - test -f ${PREFIX}/lib/libdydx_v4_client_lib${SHLIB_EXT}.{{ so_version }}  # [linux]
        - test -f ${PREFIX}/lib/libdydx_v4_client_lib.{{ so_version }}${SHLIB_EXT}  # [osx]
        - if not exist %PREFIX%\\Library\\bin\\dydx_v4_client_lib.{{ so_version }}%SHLIB_EXT% exit 1  # [win]



  - name: libdydx_v4_proto
    build:
      run_exports:
        - {{ pin_subpackage('libdydx_v4_proto-' ~ so_major_version) }}
    files:
      {% for path, headers in dydx_v4_proto_header_paths.items() %}
        {% for header in headers %}
      - include/dydx_v4_proto/{{ path }}/{{ header }}  # [unix]
      - Library\\include\\dydx_v4_proto\\{{ path | replace('/', '\\\\') }}\\{{ header }}  # [win]
        {% endfor %}
      {% endfor %}

      - lib/libdydx_v4_proto.so  # [linux]
      - lib/libdydx_v4_proto.dylib  # [osx]
      - Library/lib/dydx_v4_proto.lib  # [win]
      - Library/lib/dydx_v4_proto.{{ so_major_version }}.lib  # [win]
      - Library/bin/dydx_v4_proto.dll  # [win]

      - lib/pkgconfig/dydx_v4_proto.pc  # [unix]
      - Library/lib/pkgconfig/dydx_v4_proto.pc  # [win]
      - lib/cmake/dydx_v4_proto/dydx_v4_proto-config.cmake  # [unix]
      - Library/lib/cmake/dydx_v4_proto/dydx_v4_proto-config.cmake  # [win]
    requirements:
      build:
        - {{ compiler('c') }}  # [not win]
        - {{ compiler('cxx') }}  # [not win]
        - {{ stdlib("c") }}
        # Using experimental m2w64 toolchain for now
        - mingw-w64-ucrt-x86_64-gcc  # [win and x86_64]
        - mingw-w64-ucrt-x86_64-g++  # [win and x86_64]
      host:
        - {{ pin_subpackage('libdydx_v4_proto-' ~ so_major_version) }}
      run:
        - {{ pin_subpackage('libdydx_v4_proto-' ~ so_major_version) }}
    test:
      commands:
        {% for path, headers in dydx_v4_proto_header_paths.items() %}
          {% for header in headers %}
        - test -f ${PREFIX}/include/dydx_v4_proto/{{ path }}/{{ header }}  # [unix]
        - if not exist %PREFIX%\\Library\\include\\dydx_v4_proto\\{{ path | replace('/', '\\\\') }}\\{{ header }} exit 1  # [win]
          {% endfor %}
        {% endfor %}

        - test -f ${PREFIX}/lib/libdydx_v4_proto${SHLIB_EXT}  # [unix]
        - if not exist %PREFIX%\\Library\\bin\\dydx_v4_proto%SHLIB_EXT% exit 1  # [win]
        - if not exist %PREFIX%\\Library\\lib\\dydx_v4_proto.lib exit 1  # [win]

        - test -f ${PREFIX}/lib/pkgconfig/dydx_v4_proto.pc  # [unix]
        - if not exist %PREFIX%\\Library/lib/pkgconfig/dydx_v4_proto.pc exit 1  # [win]
        - test -f ${PREFIX}/lib/cmake/dydx_v4_proto/dydx_v4_proto-config.cmake  # [unix]
        - if not exist %PREFIX%\\Library/lib/cmake/dydx_v4_proto/dydx_v4_proto-config.cmake exit 1  # [win]



  - name: libdydx_v4_proto-{{ so_major_version }}
    build:
      run_exports:
        - {{ pin_subpackage('libdydx_v4_proto-' ~ so_major_version) }}
    files:
      - lib/libdydx_v4_proto.so.{{ so_major_version }}  # [linux]
      - lib/libdydx_v4_proto.{{ so_major_version }}.dylib  # [osx]
      - Library\\bin\\dydx_v4_proto.{{ so_major_version }}.dll  # [win]
      - lib/libdydx_v4_proto.so.{{ so_version }}  # [linux]
      - lib/libdydx_v4_proto.{{ so_version }}.dylib  # [osx]
      - Library\\bin\\dydx_v4_proto.{{ so_version }}.dll  # [win]
    requirements:
      build:
        - {{ compiler('c') }}  # [not win]
        - {{ compiler('cxx') }}  # [not win]
        - {{ stdlib("c") }}
        # Using experimental m2w64 toolchain for now
        - mingw-w64-ucrt-x86_64-gcc  # [win and x86_64]
        - mingw-w64-ucrt-x86_64-g++  # [win and x86_64]
      host:
        - libabseil >=20240116
        - libprotobuf
    test:
      commands:
        - test -f ${PREFIX}/lib/libdydx_v4_proto${SHLIB_EXT}.{{ so_major_version }}  # [linux]
        - test -f ${PREFIX}/lib/libdydx_v4_proto.{{ so_major_version }}${SHLIB_EXT}  # [osx]
        - if not exist %PREFIX%\\Library\\bin\\dydx_v4_proto.{{ so_major_version }}%SHLIB_EXT% exit 1  # [win]
        - test -f ${PREFIX}/lib/libdydx_v4_proto${SHLIB_EXT}.{{ so_version }}  # [linux]
        - test -f ${PREFIX}/lib/libdydx_v4_proto.{{ so_version }}${SHLIB_EXT}  # [osx]
        - if not exist %PREFIX%\\Library\\bin\\dydx_v4_proto.{{ so_version }}%SHLIB_EXT% exit 1  # [win]

about:
  home: https://github.com/dydxprotocol/v4-clients
  summary: 'The dYdX Chain Clients used for placing transactions and querying the dYdX chain.'
  description: |
    The dYdX Chain Clients used for placing transactions and querying the dYdX chain.
  license: AGPL-3.0-only
  license_file:
    - all-sources/LICENSE

extra:
  recipe-maintainers:
    - MementoRC
  feedstock-name: dydxprotocol-v4-client-cpp
