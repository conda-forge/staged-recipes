{% set name = "openvino" %}
{% set version = "2022.3.0" %}
# TODO: decide about version
{% set commit_number = "11111" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  - url: https://github.com/ilya-lavrenov/openvino/archive/50e0d77aacfb26d56059808e2abb1419e43f8656.tar.gz
    sha256: a872a28a0d5fb63742e56b636d34a22916184461c0f4cd7659d76dd26b932ca0
    folder: openvino_sources
    patches:
      - patches/0001-install-paths.patch
  - url: https://github.com/openvinotoolkit/openvino_contrib/archive/1ca3a1ebd01ad76231042b68f6260976cebd662d.tar.gz  # [aarch64 or arm64]
    sha256: 49ed81e415c25fdb04e80a82b31441dae2b5d9067a70662f79b885c70f3e2581  # [aarch64 or arm64]
    folder: openvino_contrib  # [aarch64 or arm64]
  - url: https://github.com/ARM-software/ComputeLibrary/archive/refs/tags/v22.08.tar.gz  # [aarch64 or arm64]
    sha256: ac2ce7b5636e99f175b084362f83fe24d72e6ceb0bd62ee5866772f7355d024d  # [aarch64 or arm64]
    folder: openvino_contrib/modules/arm_plugin/thirdparty/ComputeLibrary  # [aarch64 or arm64]
  - url: https://github.com/onnx/onnx/archive/refs/tags/v1.12.0.tar.gz
    sha256: 052ad3d5dad358a33606e0fc89483f8150bb0655c99b12a43aa58b5b7f0cc507
    folder: openvino_sources/thirdparty/onnx/onnx
  - url: https://github.com/herumi/xbyak/archive/refs/tags/v6.63.tar.gz
    sha256: 16c60f0682502624115c4dc9fec66782ae68ef32e469946f50cd169179ea92bb
    folder: openvino_sources/thirdparty/xbyak
  - url: https://github.com/intel/ittapi/archive/refs/tags/v3.23.0.tar.gz
    sha256: 9af1231808c602c2f7a66924c8798b1741d3aa4b15f3874d82ca7a89b5dbb1b1
    folder: openvino_sources/thirdparty/ittapi/ittapi
  - url: https://github.com/openvinotoolkit/oneDNN/archive/6df930dab5ab0a7dfaea6100acd03b479e2fa0a8.tar.gz  # [x86_64]
    sha256: 8667b6497205a7fa50a378fd5eeb175584ce4ade88ba5f36e7f4de3831576e43  # [x86_64]
    folder: openvino_sources/src/plugins/intel_cpu/thirdparty/onednn  # [x86_64]
  - url: https://github.com/oneapi-src/oneDNN/archive/b5faa77a4a651f1e44fa77348eded54ea3ec3eef.tar.gz  # [win64 or linux64]
    sha256: cc2faf62420b95f6c81835078910e32ee1cb12738531f4af02d06fcaa2a6a12d  # [win64 or linux64]
    folder: openvino_sources/src/plugins/intel_gpu/thirdparty/onednn_gpu  # [win64 or linux64]
  - url: https://github.com/nlohmann/json/archive/refs/tags/v3.11.2.tar.gz
    sha256: d69f9deb6a75e2580465c6c4c5111b89c4dc2fa94e3a85fcd2ffcd9a143d9273
    folder: openvino_sources/thirdparty/json/nlohmann_json
  - url: https://github.com/pboettch/json-schema-validator/archive/refs/tags/2.1.0.tar.gz
    sha256: 83f61d8112f485e0d3f1e72d51610ba3924b179926a8376aef3c038770faf202
    folder: openvino_sources/thirdparty/json/nlohmann_json_schema_validator
  - url: https://github.com/opencv/ade/archive/refs/tags/v0.1.1f.tar.gz
    sha256: c316680efbb5dd3ac4e10bb8cea345cf26a6a25ebc22418f8f0b8ca931a550e9
    folder: openvino_sources/thirdparty/ade
  - url: https://github.com/KhronosGroup/OpenCL-Headers/archive/refs/tags/v2021.04.29.tar.gz  # [win64 or linux64]
    sha256: 477e2b26125d99a9b2f20c68262f27ca3f3ca7899593a8af2b7fe077bdce18d1  # [win64 or linux64]
    folder: openvino_sources/thirdparty/ocl/cl_headers  # [win64 or linux64]
  - url: https://github.com/KhronosGroup/OpenCL-CLHPP/archive/refs/tags/v2.0.14.tar.gz  # [win64 or linux64]
    sha256: c8821a7638e57a2c4052631c941af720b581edda634db6ab0b59924c958d69b6  # [win64 or linux64]
    folder: openvino_sources/thirdparty/ocl/clhpp_headers  # [win64 or linux64]
  - url: https://github.com/KhronosGroup/OpenCL-ICD-Loader/archive/refs/tags/v2021.04.29.tar.gz  # [win64 or linux64]
    sha256: c2eb8a15b3d6d0795d609f55a4cea92eaa34571f6a21428d5593673b568ac6fd  # [win64 or linux64]
    folder: openvino_sources/thirdparty/ocl/icd_loader  # [win64 or linux64]

build:
  number: 0
  script_env:
    - CI_BUILD_NUMBER={{ commit_number }}
  run_exports:
    - {{ pin_subpackage('libopenvino', max_pin='x.x.x') }}
    - {{ pin_subpackage('libopenvino-plugins', max_pin='x.x.x') }}
  ignore_run_exports_from:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - pugixml # static package mistakenly adds run_exports
    - tbb-devel # libopenvino and libopenvino already depend on tbb

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - git
    - cmake >=3.13
    - ccache
    - ninja
    - python >=3.7
    - scons  # [aarch64 or arm64]
    - libprotobuf
    - sysroot_linux-64 =2.17  # [linux64]
  host:
    - tbb-devel =2021.5
    - pugixml # note: only static version is provided
    - libprotobuf-static
  run:
    - {{ pin_subpackage('libopenvino', max_pin='x.x.x') }}
    - {{ pin_subpackage('libopenvino-plugins', max_pin='x.x.x') }}

test:
  requires:
    - {{ compiler('cxx') }}
    - {{ compiler('c') }}
    - ninja
    - cmake >=3.13
    - pkg-config # to find zlib
    - zlib
    - nlohmann_json
    - opencv
    - gflags
    - tbb-devel =2021.5 # TODO: fix pkg-config files
    - pugixml # TODO: fix pkg-config files
  source_files:
    - openvino_sources/samples
    - openvino_sources/thirdparty/cnpy
  files:
    - snippets/
  commands:
    - export MACOSX_DEPLOYMENT_TARGET={{ MACOSX_DEPLOYMENT_TARGET }}  # [osx]
    - export CMAKE_GENERATOR=Ninja  # [unix]
    - set CMAKE_GENERATOR=Ninja  # [win]

    # check libraries
    {% set openvino_libs = [] %}
    {{ openvino_libs.append("") or "" }}
    {{ openvino_libs.append("_c") or "" }}
    {{ openvino_libs.append("_paddle_frontend") or "" }}
    {{ openvino_libs.append("_onnx_frontend") or "" }}
    {% for openvino_lib in openvino_libs %}
    - test -f $PREFIX/lib/libopenvino{{ openvino_lib }}${SHLIB_EXT}  # [unix]
    {% endfor %}

    # C++ samples
    - mkdir -p openvino_sources/samples/cpp/thirdparty
    - cp -R openvino_sources/thirdparty/cnpy openvino_sources/samples/cpp/thirdparty/cnpy
    - cmake -S openvino_sources/samples/cpp -B samples_cpp_build -DBIN_FOLDER=bin
    - cmake --build samples_cpp_build --parallel $CPU_COUNT
    - ./samples_cpp_build/bin/hello_query_device  # [unix]

    # C samples
    - cp openvino_sources/samples/cpp/CMakeLists.txt openvino_sources/samples/c/CMakeLists.txt
    - cmake -S openvino_sources/samples/c -B samples_c_build -DBIN_FOLDER=bin
    - cmake --build samples_c_build --parallel $CPU_COUNT

    # check that devices are found using OpenVINO C API
    # TODO: fix for OSX and Linux64: currently, the application cannot be run because of RPATH
    # - $CC snippets/openvino_available_devices.c $(pkg-config --cflags --libs openvino) -o openvino_devices_test  # [linux]
    # - if [[ $(./openvino_devices_test) != "passed" ]]; then exit 1 ; fi  # [linux]

    # check that frontends are found using OpenVINO C++ API
    - cmake -S snippets -B snippets_build
    - cmake --build snippets_build --config Release --verbose
    - if [[ $(./snippets_build/openvino_frontends_test) != 3 ]]; then exit 1 ; fi  # [unix]


outputs:
  - name: libopenvino
    version: {{ version }}
    script: install/install.sh
    about:
      summary: OpenVINO Core Runtime library
      license_file:
        - LICENSE
        - third-party-programs.txt
        - onednn_third-party-programs.txt
        - runtime-third-party-programs.txt
        - tbb_third-party-programs.txt
    build:
      run_exports:
        - {{ pin_subpackage('libopenvino', max_pin='x.x.x') }}
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - cmake >=3.13
      host:
        - libhwloc >=2.5 # starting from this version hwloc supports hybrid cores
        - tbb-devel =2021.5 # starting from this version TBB uses hwloc in conda
    test:
      commands:
        {% set openvino_libs = [] %}
        {{ openvino_libs.append("") or "" }}
        {{ openvino_libs.append("_c") or "" }}
        {{ openvino_libs.append("_ir_frontend") or "" }}
        {{ openvino_libs.append("_paddle_frontend") or "" }}
        {{ openvino_libs.append("_onnx_frontend") or "" }}
        {{ openvino_libs.append("_tensorflow_frontend") or "" }}
        {% for openvino_lib in openvino_libs %}
        - test -f $PREFIX/lib/libopenvino{{ openvino_lib }}${SHLIB_EXT}.{{ version }}  # [linux]
        - test -f $PREFIX/lib/libopenvino{{ openvino_lib }}.{{ version }}${SHLIB_EXT}  # [osx]
        - if not exist %PREFIX%\\Library\\bin\\openvino{{ openvino_lib }}.dll exit 1  # [win]
        {% endfor %}

  - name: libopenvino-plugins
    version: {{ version }}
    script: install/install_plugins.sh
    about:
      summary: OpenVINO Inference Plugins
      license_file:
        - LICENSE
        - third-party-programs.txt
        - onednn_third-party-programs.txt
        - runtime-third-party-programs.txt
        - tbb_third-party-programs.txt
    build:
      run_exports:
        - {{ pin_subpackage('libopenvino-plugins', max_pin='x.x.x') }}
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - cmake >=3.13
      host:
        - tbb-devel =2021.5
        - {{ pin_subpackage('libopenvino', exact=True) }}
      run:
        - {{ pin_subpackage('libopenvino', exact=True) }}
        - ocl-icd-system  # [linux64]
    test:
      commands:
        {% set openvino_plugin_libs = [] %}
        {{ openvino_plugin_libs.append("intel_cpu") or "" }}  # [x86_64]
        {{ openvino_plugin_libs.append("arm_cpu") or "" }}  # [aarch64 or arm64]
        # {{ openvino_plugin_libs.append("intel_gpu") or "" }}  # [win or linux64]
        {{ openvino_plugin_libs.append("auto") or "" }}
        {{ openvino_plugin_libs.append("auto_batch") or "" }}
        {{ openvino_plugin_libs.append("hetero") or "" }}
        {% for openvino_plugin_lib in openvino_plugin_libs %}
        - test -f $PREFIX/lib/openvino-{{ version }}/libopenvino_{{ openvino_plugin_lib }}_plugin.so  # [unix]
        - if not exist %PREFIX%\\Library\\bin\\openvino-{{ version }}\\openvino_{{ openvino_plugin_lib }}_plugin.dll exit 1  # [win]
        {% endfor %}

  - name: openvino
    script: install/install_dev.sh

about:
  home: https://github.com/openvinotoolkit/openvino
  summary: 'Intel® Distribution of OpenVINO™ Toolkit'
  description: |
    Intel® Distribution of OpenVINO™ toolkit is an open-source toolkit for
    optimizing and deploying AI inference. It can be used to develop
    applications and solutions based on deep learning tasks, such as:
    emulation of human vision, automatic speech recognition, natural
    language processing, recommendation systems, etc. It provides
    high-performance and rich deployment options, from edge to cloud
  license: Apache-2.0
  license_family: Apache
  license_file:
    - LICENSE
    - third-party-programs.txt
    - onednn_third-party-programs.txt
    - runtime-third-party-programs.txt
    - tbb_third-party-programs.txt
  doc_url: https://docs.openvino.ai/latest/index.html
  dev_url: https://github.com/openvinotoolkit/openvino

extra:
  recipe-maintainers:
    - ilya-lavrenov
