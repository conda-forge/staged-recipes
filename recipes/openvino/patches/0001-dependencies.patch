diff --git a/cmake/extra_modules.cmake b/cmake/extra_modules.cmake
index 41f0aea103..4aecfba0bc 100644
--- a/cmake/extra_modules.cmake
+++ b/cmake/extra_modules.cmake
@@ -14,15 +14,19 @@ function(ie_generate_dev_package_config)
     endforeach()
     add_custom_target(ie_dev_targets DEPENDS ${all_dev_targets})
 
-    # if we've found system gflags
-    if(gflags_DIR)
-        set(gflags_BINARY_DIR "${gflags_DIR}")
+    set(PATH_VARS "OpenVINO_SOURCE_DIR")
+    if(ENABLE_SAMPLES OR ENABLE_COMPILE_TOOL)
+        list(APPEND PATH_VARS "gflags_BINARY_DIR")
+        # if we've found system gflags
+        if(gflags_DIR)
+            set(gflags_BINARY_DIR "${gflags_DIR}")
+        endif()
     endif()
 
     configure_package_config_file("${OpenVINO_SOURCE_DIR}/cmake/templates/InferenceEngineDeveloperPackageConfig.cmake.in"
                                   "${CMAKE_BINARY_DIR}/InferenceEngineDeveloperPackageConfig.cmake"
                                   INSTALL_DESTINATION share # not used
-                                  PATH_VARS "OpenVINO_SOURCE_DIR;gflags_BINARY_DIR"
+                                  PATH_VARS ${PATH_VARS}
                                   NO_CHECK_REQUIRED_COMPONENTS_MACRO)
 
     configure_file("${OpenVINO_SOURCE_DIR}/cmake/templates/InferenceEngineConfig-version.cmake.in"
@@ -47,15 +51,19 @@ function(ov_generate_dev_package_config)
     endforeach()
     add_custom_target(ov_dev_targets DEPENDS ${all_dev_targets})
 
-    # if we've found system gflags
-    if(gflags_DIR)
-        set(gflags_BINARY_DIR "${gflags_DIR}")
+    set(PATH_VARS "OpenVINO_SOURCE_DIR")
+    if(ENABLE_SAMPLES OR ENABLE_COMPILE_TOOL)
+        list(APPEND PATH_VARS "gflags_BINARY_DIR")
+        # if we've found system gflags
+        if(gflags_DIR)
+            set(gflags_BINARY_DIR "${gflags_DIR}")
+        endif()
     endif()
 
     configure_package_config_file("${OpenVINO_SOURCE_DIR}/cmake/templates/OpenVINODeveloperPackageConfig.cmake.in"
                                   "${CMAKE_BINARY_DIR}/OpenVINODeveloperPackageConfig.cmake"
                                   INSTALL_DESTINATION share # not used
-                                  PATH_VARS "OpenVINO_SOURCE_DIR;gflags_BINARY_DIR"
+                                  PATH_VARS ${PATH_VARS}
                                   NO_CHECK_REQUIRED_COMPONENTS_MACRO)
 
     configure_file("${OpenVINO_SOURCE_DIR}/cmake/templates/OpenVINOConfig-version.cmake.in"
diff --git a/cmake/templates/InferenceEngineDeveloperPackageConfig.cmake.in b/cmake/templates/InferenceEngineDeveloperPackageConfig.cmake.in
index c731c86449..c930331b0f 100644
--- a/cmake/templates/InferenceEngineDeveloperPackageConfig.cmake.in
+++ b/cmake/templates/InferenceEngineDeveloperPackageConfig.cmake.in
@@ -30,7 +30,9 @@ endforeach()
 message(" ")
 
 # for samples in 3rd party projects
-set_and_check(gflags_DIR "@gflags_BINARY_DIR@")
+if(ENABLE_SAMPLES)
+    set_and_check(gflags_DIR "@gflags_BINARY_DIR@")
+endif()
 
 if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
     # Disable warning as error for private components
diff --git a/cmake/templates/OpenVINODeveloperPackageConfig.cmake.in b/cmake/templates/OpenVINODeveloperPackageConfig.cmake.in
index 97a97e2151..2372ae7e6b 100644
--- a/cmake/templates/OpenVINODeveloperPackageConfig.cmake.in
+++ b/cmake/templates/OpenVINODeveloperPackageConfig.cmake.in
@@ -28,7 +28,9 @@ endforeach()
 message(" ")
 
 # for samples in 3rd party projects
-set_and_check(gflags_DIR "@gflags_BINARY_DIR@")
+if(ENABLE_SAMPLES)
+    set_and_check(gflags_DIR "@gflags_BINARY_DIR@")
+endif()
 
 if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
     # Disable warning as error for private components
diff --git a/thirdparty/CMakeLists.txt b/thirdparty/CMakeLists.txt
index e2820d483f..2bf23562e2 100644
--- a/thirdparty/CMakeLists.txt
+++ b/thirdparty/CMakeLists.txt
@@ -15,7 +15,9 @@ if(ENABLE_PROFILING_ITT)
     add_subdirectory(itt_collector EXCLUDE_FROM_ALL)
 endif()
 
-add_subdirectory(cnpy EXCLUDE_FROM_ALL)
+if(ENABLE_SAMPLES OR ENABLE_TESTS)
+    add_subdirectory(cnpy EXCLUDE_FROM_ALL)
+endif()
 
 if(ENABLE_INTEL_GPU)
     add_subdirectory(ocl)
@@ -29,21 +31,23 @@ ov_install_static_lib(xbyak ${OV_CPACK_COMP_CORE})
 # zlib
 #
 
-if(NOT ANDROID)
-    find_package(PkgConfig QUIET)
-    if(PkgConfig_FOUND)
-        pkg_search_module(zlib QUIET
-                          IMPORTED_TARGET GLOBAL
-                          zlib)
-        if(zlib_FOUND)
-            add_library(zlib::zlib ALIAS PkgConfig::zlib)
-            message(STATUS "${PKG_CONFIG_EXECUTABLE}: zlib (${zlib_VERSION}) is found at ${zlib_PREFIX}")
+if(ENABLE_SAMPLES)
+    if(NOT ANDROID)
+        find_package(PkgConfig QUIET)
+        if(PkgConfig_FOUND)
+            pkg_search_module(zlib QUIET
+                            IMPORTED_TARGET GLOBAL
+                            zlib)
+            if(zlib_FOUND)
+                add_library(zlib::zlib ALIAS PkgConfig::zlib)
+                message(STATUS "${PKG_CONFIG_EXECUTABLE}: zlib (${zlib_VERSION}) is found at ${zlib_PREFIX}")
+            endif()
         endif()
     endif()
-endif()
 
-if(NOT zlib_FOUND)
-    add_subdirectory(zlib EXCLUDE_FROM_ALL)
+    if(NOT zlib_FOUND)
+        add_subdirectory(zlib EXCLUDE_FROM_ALL)
+    endif()
 endif()
 
 #
@@ -297,11 +301,13 @@ ov_install_static_lib(nlohmann_json_schema_validator ${OV_CPACK_COMP_CORE})
 if(CPACK_GENERATOR MATCHES "^(DEB|RPM|CONDA-FORGE|BREW)$")
     # These libraries are dependencies for openvino-samples package
 
-    if((ENABLE_SAMPLES OR ENABLE_COMPILE_TOOL) AND NOT gflags_FOUND)
-        message(FATAL_ERROR "gflags must be used as a ${CPACK_GENERATOR} package. Install libgflags-dev / gflags-devel")
-    endif()
-    if(NOT zlib_FOUND)
-        message(FATAL_ERROR "zlib must be used as a ${CPACK_GENERATOR} package. Install zlib1g-dev / zlib-devel")
+    if(ENABLE_SAMPLES OR ENABLE_COMPILE_TOOL)
+        if(NOT gflags_FOUND)
+            message(FATAL_ERROR "gflags must be used as a ${CPACK_GENERATOR} package. Install libgflags-dev / gflags-devel")
+        endif()
+        if(NOT zlib_FOUND)
+            message(FATAL_ERROR "zlib must be used as a ${CPACK_GENERATOR} package. Install zlib1g-dev / zlib-devel")
+        endif()
     endif()
     if(NOT ENABLE_SYSTEM_PUGIXML AND NOT LINUX_OS_NAME STREQUAL "CentOS 7")
         message(FATAL_ERROR "Pugixml must be used as a ${CPACK_GENERATOR} package. Install libpugixml-dev / pugixml-devel")
