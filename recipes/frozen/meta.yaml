# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe
# If your package is python based, we recommend using Grayskull to generate it instead:
# https://github.com/conda-incubator/grayskull

# Jinja variables help maintain the recipe as you'll update the version only here.
# Using the name variable with the URL in line 16 is convenient
# when copying and pasting from another recipe, but not really needed.
{% set name = "frozen" %}
{% set version = "1.1.1" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/serge-sans-paille/frozen/archive/refs/tags/{{ version }}.tar.gz
  # If getting the source from GitHub, remove the line above,
  # uncomment the line below, and modify as needed. Use releases if available:
  # url: https://github.com/simplejson/simplejson/releases/download/{{ version }}/simplejson-{{ version }}.tar.gz
  # and otherwise fall back to archive:
  # url: https://github.com/simplejson/simplejson/archive/v{{ version }}.tar.gz
  sha256: f7c7075750e8fceeac081e9ef01944f221b36d9725beac8681cbd2838d26be45
  # sha256 is the preferred checksum -- you can get it for a file with:
  #  `openssl sha256 <file name>`.
  # You may need the openssl package, available on conda-forge:
  #  `conda install openssl -c conda-forge``

build:
  # Uncomment the following line if the package is pure Python and the recipe is exactly the same for all platforms.
  # It is okay if the dependencies are not built for all platforms/versions, although selectors are still not allowed.
  # See https://conda-forge.org/docs/maintainer/knowledge_base.html#noarch-python for more details.
  # noarch: python
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  # More info about selectors can be found in the conda-build docs: 
  # https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#preprocessing-selectors
  noarch: generic
  number: 0

requirements:
  build:
    - {{ compiler('cxx') }}
    - make
    - cmake >=3.14
  run:
    - {{ compiler('cxx') }}

test:
  commands:
    - test -f $PREFIX/include/frozen/set.h
    - test -f $PREFIX/include/frozen/string.h
  
  # Some packages might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  imports:
    - simplejson
    - simplejson.tests
  # For python packages, it is useful to run pip check. However, sometimes the
  # metadata used by pip is out of date. Thus this section is optional if it is
  # failing.
  requires:
    - pip
  commands:
    - pip check

about:
  home: https://github.com/serge-sans-paille/frozen
  summary: 'Header-only library that provides 0 cost initialization for immutable containers, fixed-size containers, and various algorithms.'
  description: |
    frozen provides: (1) immutable (a.k.a. frozen),
    constexpr-compatible versions of std::set, std::unordered_set,
    std::map and std::unordered_map; (2) fixed-capacity,
    constinit-compatible versions of std::map and std::unordered_map
    with immutable, compile-time selected keys mapped to mutable
    values; (3) 0-cost initialization version of std::search for frozen needles 
    using Boyer-Moore or Knuth-Morris-Pratt algorithms.
    The unordered_* containers are guaranteed perfect (a.k.a. no hash collision) 
    and the extra storage is linear with respect to the number of keys.
    Once initialized, the container keys cannot be updated, and in exchange, lookups are faster.
    And initialization is free when constexpr or constinit is used.
  license: Apache-2.0
  license_family: Apache
  license_file: LICENSE

extra:
  recipe-maintainers:
    - notestaff
