diff -Nu a/_cffi_build/build.py b/_cffi_build/build.py
--- a/_cffi_build/build.py	2022-11-19 14:10:25.000000000 -0600
+++ b/_cffi_build/build.py	2023-09-25 10:19:04.102511107 -0500
@@ -1,34 +1,84 @@
+import argparse
+import logging
 import os
 from collections import namedtuple
+from typing import Any, List
 
 from cffi import FFI
 
+logging.basicConfig(level=logging.INFO)
+
 here = os.path.dirname(os.path.abspath(__file__))
 
 Source = namedtuple('Source', ('h', 'include'))
 
 
-def _mk_ffi(sources, name='_libsecp256k1', **kwargs):
+def gather_sources_from_directory(directory: str) -> List[Source]:
+    """
+    Gather source files from a given directory.
+
+    :param directory: The directory where source files are located.
+    :return: A list of Source namedtuples.
+    """
+    sources = []
+    for filename in os.listdir(directory):
+        if filename.endswith('.h'):
+            include_line = f'#include <{filename}>'
+            sources.append(Source(filename, include_line))
+    return sorted(sources)
+
+
+define_static_lib = """
+#if defined(_WIN32)
+#   define SECP256K1_STATIC 1
+#   define SECP256K1_API extern __declspec(dllexport)
+#endif
+"""
+
+define_shared_lib = """
+#if defined(_WIN32)
+#   define SECP256K1_API extern __declspec(dllimport)
+#endif
+"""
+
+
+def mk_ffi(sources: List[Source],
+           static_lib: str = '0',
+           name: str = '_libsecp256k1') -> FFI:
+    """
+    Create an FFI object.
+
+    :param sources: A list of Source namedtuples.
+    :param libraries: A list of libraries to link against.
+    :param static_lib: Whether to generate a static lib in Windows.
+    :param name: The name of the FFI object.
+    :return: An FFI object.
+    """
     _ffi = FFI()
-    code = []
+    code = [define_static_lib] if static_lib == '1' else [define_shared_lib]
 
     for source in sources:
-        with open(os.path.join(here, source.h), 'rt') as h:
-            _ffi.cdef(h.read())
+        with open(os.path.join(here, source.h)) as h:
+            logging.info(f'   Including {source.h}...')
+            c_header = h.read().replace('SECP256K1_API', '')
+            _ffi.cdef(c_header)
+
         code.append(source.include)
 
     code.append('#define PY_USE_BUNDLED')
-    _ffi.set_source(name, '\n'.join(code), **kwargs)
+    _ffi.set_source(name, '\n'.join(code))
 
     return _ffi
 
 
-modules = [
-    Source('secp256k1.h', '#include <secp256k1.h>'),
-    Source('secp256k1_ecdh.h', '#include <secp256k1_ecdh.h>'),
-    Source('secp256k1_extrakeys.h', '#include <secp256k1_extrakeys.h>'),
-    Source('secp256k1_recovery.h', '#include <secp256k1_recovery.h>'),
-    Source('secp256k1_schnorrsig.h', '#include <secp256k1_schnorrsig.h>'),
-]
-
-ffi = _mk_ffi(modules, libraries=['secp256k1'])
+if __name__ == '__main__':
+    logging.info('Starting CFFI build process...')
+    parser = argparse.ArgumentParser(description='Generate C code using CFFI.')
+    parser.add_argument('c_file', help='Generated C code filename.')
+    parser.add_argument('static_lib', help='Generate static lib in Windows.', default=False)
+    args = parser.parse_args()
+
+    modules = gather_sources_from_directory(here)
+    ffi = mk_ffi(modules, args.static_lib)
+    ffi.emit_c_code(args.c_file)
+    logging.info(f'   Generated C code: {args.c_file}')
diff -Nu a/_cffi_build/secp256k1_ecdh.h b/_cffi_build/secp256k1_ecdh.h
--- a/_cffi_build/secp256k1_ecdh.h	2022-11-19 14:10:25.000000000 -0600
+++ b/_cffi_build/secp256k1_ecdh.h	2023-09-24 18:31:25.597872341 -0500
@@ -1,8 +1,16 @@
-int secp256k1_ecdh(
-  const secp256k1_context* ctx,
-  unsigned char *result,
-  const secp256k1_pubkey *pubkey,
-  const unsigned char *privkey,
-  void *hashfp,
+typedef int (*secp256k1_ecdh_hash_function)(
+  unsigned char *output,
+  const unsigned char *x32,
+  const unsigned char *y32,
   void *data
 );
+extern const secp256k1_ecdh_hash_function secp256k1_ecdh_hash_function_sha256;
+extern const secp256k1_ecdh_hash_function secp256k1_ecdh_hash_function_default;
+extern int secp256k1_ecdh(
+  const secp256k1_context *ctx,
+  unsigned char *output,
+  const secp256k1_pubkey *pubkey,
+  const unsigned char *seckey,
+  secp256k1_ecdh_hash_function hashfp,
+  void *data
+) ;
diff -Nu a/_cffi_build/secp256k1_ellswift.h b/_cffi_build/secp256k1_ellswift.h
--- a/_cffi_build/secp256k1_ellswift.h	1969-12-31 18:00:00.000000000 -0600
+++ b/_cffi_build/secp256k1_ellswift.h	2023-09-24 18:31:25.581872217 -0500
@@ -0,0 +1,36 @@
+typedef int (*secp256k1_ellswift_xdh_hash_function)(
+    unsigned char *output,
+    const unsigned char *x32,
+    const unsigned char *ell_a64,
+    const unsigned char *ell_b64,
+    void *data
+);
+extern const secp256k1_ellswift_xdh_hash_function secp256k1_ellswift_xdh_hash_function_prefix;
+extern const secp256k1_ellswift_xdh_hash_function secp256k1_ellswift_xdh_hash_function_bip324;
+extern int secp256k1_ellswift_encode(
+    const secp256k1_context *ctx,
+    unsigned char *ell64,
+    const secp256k1_pubkey *pubkey,
+    const unsigned char *rnd32
+) ;
+extern int secp256k1_ellswift_decode(
+    const secp256k1_context *ctx,
+    secp256k1_pubkey *pubkey,
+    const unsigned char *ell64
+) ;
+extern int secp256k1_ellswift_create(
+    const secp256k1_context *ctx,
+    unsigned char *ell64,
+    const unsigned char *seckey32,
+    const unsigned char *auxrnd32
+) ;
+extern int secp256k1_ellswift_xdh(
+  const secp256k1_context *ctx,
+  unsigned char *output,
+  const unsigned char *ell_a64,
+  const unsigned char *ell_b64,
+  const unsigned char *seckey32,
+  int party,
+  secp256k1_ellswift_xdh_hash_function hashfp,
+  void *data
+) ;
diff -Nu a/_cffi_build/secp256k1_extrakeys.h b/_cffi_build/secp256k1_extrakeys.h
--- a/_cffi_build/secp256k1_extrakeys.h	2022-11-19 14:10:25.000000000 -0600
+++ b/_cffi_build/secp256k1_extrakeys.h	2023-09-24 18:31:25.589872279 -0500
@@ -1,78 +1,66 @@
 typedef struct {
     unsigned char data[64];
 } secp256k1_xonly_pubkey;
-
 typedef struct {
     unsigned char data[96];
 } secp256k1_keypair;
-
-int secp256k1_xonly_pubkey_parse(
-    const secp256k1_context* ctx,
-    secp256k1_xonly_pubkey* pubkey,
+extern int secp256k1_xonly_pubkey_parse(
+    const secp256k1_context *ctx,
+    secp256k1_xonly_pubkey *pubkey,
     const unsigned char *input32
-);
-
-int secp256k1_xonly_pubkey_serialize(
-    const secp256k1_context* ctx,
+) ;
+extern int secp256k1_xonly_pubkey_serialize(
+    const secp256k1_context *ctx,
     unsigned char *output32,
-    const secp256k1_xonly_pubkey* pubkey
-);
-
-int secp256k1_xonly_pubkey_cmp(
-    const secp256k1_context* ctx,
-    const secp256k1_xonly_pubkey* pk1,
-    const secp256k1_xonly_pubkey* pk2
-);
-
-int secp256k1_xonly_pubkey_from_pubkey(
-    const secp256k1_context* ctx,
+    const secp256k1_xonly_pubkey *pubkey
+) ;
+extern int secp256k1_xonly_pubkey_cmp(
+    const secp256k1_context *ctx,
+    const secp256k1_xonly_pubkey *pk1,
+    const secp256k1_xonly_pubkey *pk2
+) ;
+extern int secp256k1_xonly_pubkey_from_pubkey(
+    const secp256k1_context *ctx,
     secp256k1_xonly_pubkey *xonly_pubkey,
     int *pk_parity,
     const secp256k1_pubkey *pubkey
-);
-
-int secp256k1_xonly_pubkey_tweak_add(
-    const secp256k1_context* ctx,
+) ;
+extern int secp256k1_xonly_pubkey_tweak_add(
+    const secp256k1_context *ctx,
     secp256k1_pubkey *output_pubkey,
     const secp256k1_xonly_pubkey *internal_pubkey,
     const unsigned char *tweak32
-);
-
-int secp256k1_xonly_pubkey_tweak_add_check(
-    const secp256k1_context* ctx,
+) ;
+extern int secp256k1_xonly_pubkey_tweak_add_check(
+    const secp256k1_context *ctx,
     const unsigned char *tweaked_pubkey32,
     int tweaked_pk_parity,
     const secp256k1_xonly_pubkey *internal_pubkey,
     const unsigned char *tweak32
-);
-
-int secp256k1_keypair_create(
-    const secp256k1_context* ctx,
+) ;
+extern int secp256k1_keypair_create(
+    const secp256k1_context *ctx,
     secp256k1_keypair *keypair,
     const unsigned char *seckey
-);
-
-int secp256k1_keypair_sec(
-    const secp256k1_context* ctx,
+) ;
+extern int secp256k1_keypair_sec(
+    const secp256k1_context *ctx,
     unsigned char *seckey,
     const secp256k1_keypair *keypair
-);
-
-int secp256k1_keypair_pub(
-    const secp256k1_context* ctx,
+) ;
+extern int secp256k1_keypair_pub(
+    const secp256k1_context *ctx,
     secp256k1_pubkey *pubkey,
     const secp256k1_keypair *keypair
-);
-
-int secp256k1_keypair_xonly_pub(
-    const secp256k1_context* ctx,
+) ;
+extern int secp256k1_keypair_xonly_pub(
+    const secp256k1_context *ctx,
     secp256k1_xonly_pubkey *pubkey,
     int *pk_parity,
     const secp256k1_keypair *keypair
-);
-
-int secp256k1_keypair_xonly_tweak_add(
-    const secp256k1_context* ctx,
+) ;
+extern int secp256k1_keypair_xonly_tweak_add(
+    const secp256k1_context *ctx,
     secp256k1_keypair *keypair,
     const unsigned char *tweak32
-);
+) ;
diff -Nu a/_cffi_build/secp256k1.h b/_cffi_build/secp256k1.h
--- a/_cffi_build/secp256k1.h	2022-11-19 14:10:25.000000000 -0600
+++ b/_cffi_build/secp256k1.h	2023-09-25 10:41:27.325753417 -0500
@@ -1,13 +1,11 @@
 typedef struct secp256k1_context_struct secp256k1_context;
-
+typedef struct secp256k1_scratch_space_struct secp256k1_scratch_space;
 typedef struct {
     unsigned char data[64];
 } secp256k1_pubkey;
-
 typedef struct {
     unsigned char data[64];
 } secp256k1_ecdsa_signature;
-
 typedef int (*secp256k1_nonce_function)(
     unsigned char *nonce32,
     const unsigned char *msg32,
@@ -16,155 +14,165 @@
     void *data,
     unsigned int attempt
 );
-
 #define SECP256K1_FLAGS_TYPE_MASK ...
 #define SECP256K1_FLAGS_TYPE_CONTEXT ...
 #define SECP256K1_FLAGS_TYPE_COMPRESSION ...
 #define SECP256K1_FLAGS_BIT_CONTEXT_VERIFY ...
 #define SECP256K1_FLAGS_BIT_CONTEXT_SIGN ...
+#define SECP256K1_FLAGS_BIT_CONTEXT_DECLASSIFY ...
 #define SECP256K1_FLAGS_BIT_COMPRESSION ...
-
+#define SECP256K1_CONTEXT_NONE ...
 #define SECP256K1_CONTEXT_VERIFY ...
 #define SECP256K1_CONTEXT_SIGN ...
-#define SECP256K1_CONTEXT_NONE ...
-
+#define SECP256K1_CONTEXT_DECLASSIFY ...
 #define SECP256K1_EC_COMPRESSED ...
 #define SECP256K1_EC_UNCOMPRESSED ...
+#define SECP256K1_TAG_PUBKEY_EVEN ...
+#define SECP256K1_TAG_PUBKEY_ODD ...
+#define SECP256K1_TAG_PUBKEY_UNCOMPRESSED ...
+extern const secp256k1_context *secp256k1_context_static;
 
-secp256k1_context* secp256k1_context_create(
+extern void secp256k1_selftest(void);
+extern secp256k1_context *secp256k1_context_create(
     unsigned int flags
-);
-
-secp256k1_context* secp256k1_context_clone(
-    const secp256k1_context* ctx
-);
-
-void secp256k1_context_destroy(
-    secp256k1_context* ctx
-);
-
-void secp256k1_context_set_illegal_callback(
-    secp256k1_context* ctx,
-    void (*fun)(const char* message, void* data),
-    const void* data
-);
-
-void secp256k1_context_set_error_callback(
-    secp256k1_context* ctx,
-    void (*fun)(const char* message, void* data),
-    const void* data
-);
-
-int secp256k1_ec_pubkey_parse(
-    const secp256k1_context* ctx,
-    secp256k1_pubkey* pubkey,
+) ;
+extern secp256k1_context *secp256k1_context_clone(
+    const secp256k1_context *ctx
+) ;
+extern void secp256k1_context_destroy(
+    secp256k1_context *ctx
+) ;
+extern void secp256k1_context_set_illegal_callback(
+    secp256k1_context *ctx,
+    void (*fun)(const char *message, void *data),
+    const void *data
+) ;
+extern void secp256k1_context_set_error_callback(
+    secp256k1_context *ctx,
+    void (*fun)(const char *message, void *data),
+    const void *data
+) ;
+extern secp256k1_scratch_space *secp256k1_scratch_space_create(
+    const secp256k1_context *ctx,
+    size_t size
+) ;
+extern void secp256k1_scratch_space_destroy(
+    const secp256k1_context *ctx,
+    secp256k1_scratch_space *scratch
+) ;
+extern int secp256k1_ec_pubkey_parse(
+    const secp256k1_context *ctx,
+    secp256k1_pubkey *pubkey,
     const unsigned char *input,
     size_t inputlen
-);
-
-int secp256k1_ec_pubkey_serialize(
-    const secp256k1_context* ctx,
+) ;
+extern int secp256k1_ec_pubkey_serialize(
+    const secp256k1_context *ctx,
     unsigned char *output,
     size_t *outputlen,
-    const secp256k1_pubkey* pubkey,
+    const secp256k1_pubkey *pubkey,
     unsigned int flags
-);
-
-int secp256k1_ecdsa_signature_parse_compact(
-    const secp256k1_context* ctx,
-    secp256k1_ecdsa_signature* sig,
+) ;
+extern int secp256k1_ec_pubkey_cmp(
+    const secp256k1_context *ctx,
+    const secp256k1_pubkey *pubkey1,
+    const secp256k1_pubkey *pubkey2
+) ;
+extern int secp256k1_ecdsa_signature_parse_compact(
+    const secp256k1_context *ctx,
+    secp256k1_ecdsa_signature *sig,
     const unsigned char *input64
-);
-
-int secp256k1_ecdsa_signature_parse_der(
-    const secp256k1_context* ctx,
-    secp256k1_ecdsa_signature* sig,
+) ;
+extern int secp256k1_ecdsa_signature_parse_der(
+    const secp256k1_context *ctx,
+    secp256k1_ecdsa_signature *sig,
     const unsigned char *input,
     size_t inputlen
-);
-
-int secp256k1_ecdsa_signature_serialize_der(
-    const secp256k1_context* ctx,
+) ;
+extern int secp256k1_ecdsa_signature_serialize_der(
+    const secp256k1_context *ctx,
     unsigned char *output,
     size_t *outputlen,
-    const secp256k1_ecdsa_signature* sig
-);
-
-int secp256k1_ecdsa_signature_serialize_compact(
-    const secp256k1_context* ctx,
+    const secp256k1_ecdsa_signature *sig
+) ;
+extern int secp256k1_ecdsa_signature_serialize_compact(
+    const secp256k1_context *ctx,
     unsigned char *output64,
-    const secp256k1_ecdsa_signature* sig
-);
-
-int secp256k1_ecdsa_verify(
-    const secp256k1_context* ctx,
+    const secp256k1_ecdsa_signature *sig
+) ;
+extern int secp256k1_ecdsa_verify(
+    const secp256k1_context *ctx,
     const secp256k1_ecdsa_signature *sig,
-    const unsigned char *msg32,
+    const unsigned char *msghash32,
     const secp256k1_pubkey *pubkey
-);
-
-int secp256k1_ecdsa_signature_normalize(
-    const secp256k1_context* ctx,
+) ;
+extern int secp256k1_ecdsa_signature_normalize(
+    const secp256k1_context *ctx,
     secp256k1_ecdsa_signature *sigout,
     const secp256k1_ecdsa_signature *sigin
-);
-
+) ;
 extern const secp256k1_nonce_function secp256k1_nonce_function_rfc6979;
-
 extern const secp256k1_nonce_function secp256k1_nonce_function_default;
-
-int secp256k1_ecdsa_sign(
-    const secp256k1_context* ctx,
+extern int secp256k1_ecdsa_sign(
+    const secp256k1_context *ctx,
     secp256k1_ecdsa_signature *sig,
-    const unsigned char *msg32,
+    const unsigned char *msghash32,
     const unsigned char *seckey,
     secp256k1_nonce_function noncefp,
     const void *ndata
-);
-
-int secp256k1_ec_seckey_verify(
-    const secp256k1_context* ctx,
+) ;
+extern int secp256k1_ec_seckey_verify(
+    const secp256k1_context *ctx,
     const unsigned char *seckey
-);
-
-int secp256k1_ec_pubkey_create(
-    const secp256k1_context* ctx,
+) ;
+extern int secp256k1_ec_pubkey_create(
+    const secp256k1_context *ctx,
     secp256k1_pubkey *pubkey,
     const unsigned char *seckey
-);
-
-int secp256k1_ec_privkey_tweak_add(
-    const secp256k1_context* ctx,
+) ;
+extern int secp256k1_ec_seckey_negate(
+    const secp256k1_context *ctx,
+    unsigned char *seckey
+) ;
+extern int secp256k1_ec_pubkey_negate(
+    const secp256k1_context *ctx,
+    secp256k1_pubkey *pubkey
+) ;
+extern int secp256k1_ec_seckey_tweak_add(
+    const secp256k1_context *ctx,
     unsigned char *seckey,
-    const unsigned char *tweak
-);
-
-int secp256k1_ec_pubkey_tweak_add(
-    const secp256k1_context* ctx,
+    const unsigned char *tweak32
+) ;
+extern int secp256k1_ec_pubkey_tweak_add(
+    const secp256k1_context *ctx,
     secp256k1_pubkey *pubkey,
-    const unsigned char *tweak
-);
-
-int secp256k1_ec_privkey_tweak_mul(
-    const secp256k1_context* ctx,
+    const unsigned char *tweak32
+) ;
+extern int secp256k1_ec_seckey_tweak_mul(
+    const secp256k1_context *ctx,
     unsigned char *seckey,
-    const unsigned char *tweak
-);
-
-int secp256k1_ec_pubkey_tweak_mul(
-    const secp256k1_context* ctx,
+    const unsigned char *tweak32
+) ;
+extern int secp256k1_ec_pubkey_tweak_mul(
+    const secp256k1_context *ctx,
     secp256k1_pubkey *pubkey,
-    const unsigned char *tweak
-);
-
-int secp256k1_context_randomize(
-    secp256k1_context* ctx,
+    const unsigned char *tweak32
+) ;
+extern int secp256k1_context_randomize(
+    secp256k1_context *ctx,
     const unsigned char *seed32
-);
-
-int secp256k1_ec_pubkey_combine(
-    const secp256k1_context* ctx,
+) ;
+extern int secp256k1_ec_pubkey_combine(
+    const secp256k1_context *ctx,
     secp256k1_pubkey *out,
-    const secp256k1_pubkey * const * ins,
+    const secp256k1_pubkey * const *ins,
     size_t n
-);
+) ;
+extern int secp256k1_tagged_sha256(
+    const secp256k1_context *ctx,
+    unsigned char *hash32,
+    const unsigned char *tag,
+    size_t taglen,
+    const unsigned char *msg,
+    size_t msglen
+) ;
diff -Nu a/_cffi_build/secp256k1_preallocated.h b/_cffi_build/secp256k1_preallocated.h
--- a/_cffi_build/secp256k1_preallocated.h	1969-12-31 18:00:00.000000000 -0600
+++ b/_cffi_build/secp256k1_preallocated.h	2023-09-24 18:31:25.585872248 -0500
@@ -0,0 +1,17 @@
+extern size_t secp256k1_context_preallocated_size(
+    unsigned int flags
+) ;
+extern secp256k1_context *secp256k1_context_preallocated_create(
+    void *prealloc,
+    unsigned int flags
+) ;
+extern size_t secp256k1_context_preallocated_clone_size(
+    const secp256k1_context *ctx
+) ;
+extern secp256k1_context *secp256k1_context_preallocated_clone(
+    const secp256k1_context *ctx,
+    void *prealloc
+) ;
+extern void secp256k1_context_preallocated_destroy(
+    secp256k1_context *ctx
+) ;
diff -Nu a/_cffi_build/secp256k1_recovery.h b/_cffi_build/secp256k1_recovery.h
--- a/_cffi_build/secp256k1_recovery.h	2022-11-19 14:10:25.000000000 -0600
+++ b/_cffi_build/secp256k1_recovery.h	2023-09-24 18:31:25.569872124 -0500
@@ -1,39 +1,34 @@
 typedef struct {
     unsigned char data[65];
 } secp256k1_ecdsa_recoverable_signature;
-
-int secp256k1_ecdsa_recoverable_signature_parse_compact(
-    const secp256k1_context* ctx,
-    secp256k1_ecdsa_recoverable_signature* sig,
+extern int secp256k1_ecdsa_recoverable_signature_parse_compact(
+    const secp256k1_context *ctx,
+    secp256k1_ecdsa_recoverable_signature *sig,
     const unsigned char *input64,
     int recid
-);
-
-int secp256k1_ecdsa_recoverable_signature_convert(
-    const secp256k1_context* ctx,
-    secp256k1_ecdsa_signature* sig,
-    const secp256k1_ecdsa_recoverable_signature* sigin
-);
-
-int secp256k1_ecdsa_recoverable_signature_serialize_compact(
-    const secp256k1_context* ctx,
+) ;
+extern int secp256k1_ecdsa_recoverable_signature_convert(
+    const secp256k1_context *ctx,
+    secp256k1_ecdsa_signature *sig,
+    const secp256k1_ecdsa_recoverable_signature *sigin
+) ;
+extern int secp256k1_ecdsa_recoverable_signature_serialize_compact(
+    const secp256k1_context *ctx,
     unsigned char *output64,
     int *recid,
-    const secp256k1_ecdsa_recoverable_signature* sig
-);
-
-int secp256k1_ecdsa_sign_recoverable(
-    const secp256k1_context* ctx,
+    const secp256k1_ecdsa_recoverable_signature *sig
+) ;
+extern int secp256k1_ecdsa_sign_recoverable(
+    const secp256k1_context *ctx,
     secp256k1_ecdsa_recoverable_signature *sig,
-    const unsigned char *msg32,
+    const unsigned char *msghash32,
     const unsigned char *seckey,
     secp256k1_nonce_function noncefp,
     const void *ndata
-);
-
-int secp256k1_ecdsa_recover(
-    const secp256k1_context* ctx,
+) ;
+extern int secp256k1_ecdsa_recover(
+    const secp256k1_context *ctx,
     secp256k1_pubkey *pubkey,
     const secp256k1_ecdsa_recoverable_signature *sig,
-    const unsigned char *msg32
-);
+    const unsigned char *msghash32
+) ;
diff -Nu a/_cffi_build/secp256k1_schnorrsig.h b/_cffi_build/secp256k1_schnorrsig.h
--- a/_cffi_build/secp256k1_schnorrsig.h	2022-11-19 14:10:25.000000000 -0600
+++ b/_cffi_build/secp256k1_schnorrsig.h	2023-09-25 10:42:36.690584464 -0500
@@ -8,44 +8,31 @@
     size_t algolen,
     void *data
 );
-
 extern const secp256k1_nonce_function_hardened secp256k1_nonce_function_bip340;
-
 typedef struct {
     unsigned char magic[4];
     secp256k1_nonce_function_hardened noncefp;
-    void* ndata;
+    void *ndata;
 } secp256k1_schnorrsig_extraparams;
-
-int secp256k1_schnorrsig_sign(
-    const secp256k1_context* ctx,
+extern int secp256k1_schnorrsig_sign32(
+    const secp256k1_context *ctx,
     unsigned char *sig64,
     const unsigned char *msg32,
     const secp256k1_keypair *keypair,
     const unsigned char *aux_rand32
-);
-
-int secp256k1_schnorrsig_sign32(
-    const secp256k1_context* ctx,
-    unsigned char *sig64,
-    const unsigned char *msg32,
-    const secp256k1_keypair *keypair,
-    const unsigned char *aux_rand32
-);
-
-int secp256k1_schnorrsig_sign_custom(
-    const secp256k1_context* ctx,
+) ;
+extern int secp256k1_schnorrsig_sign_custom(
+    const secp256k1_context *ctx,
     unsigned char *sig64,
     const unsigned char *msg,
     size_t msglen,
     const secp256k1_keypair *keypair,
     secp256k1_schnorrsig_extraparams *extraparams
-);
-
-int secp256k1_schnorrsig_verify(
-    const secp256k1_context* ctx,
+) ;
+extern int secp256k1_schnorrsig_verify(
+    const secp256k1_context *ctx,
     const unsigned char *sig64,
     const unsigned char *msg,
     size_t msglen,
     const secp256k1_xonly_pubkey *pubkey
-);
+) ;
