diff --git a/setup.py b/setup.py
index c121d33..824f18f 100644
--- a/setup.py
+++ b/setup.py
@@ -147,11 +147,30 @@ class build_clib(_build_clib):
             # library needs to be downloaded
             self.get_source_files()
 
+        bash, autoreconf = None, "autoreconf -if --warnings=all"
+        for path in ["LIBRARY_BIN", "PREFIX", "BUILD_PREFIX", "SP_DIR"]:
+            if os.environ.get(path, None) is None:
+                continue
+
+            if bash is not None:
+                break
+
+            for root, _, filenames in os.walk(os.environ.get(path)):
+                for filename in filenames:
+                    if filename in ["bash", "bash.exe"]:
+                        bash = os.path.join(root, filename)
+                        break
+
+        if bash is None:
+            bash = "bash"
+
         if not os.path.exists(absolute('libsecp256k1/configure')):
             # configure script hasn't been generated yet
-            autogen = absolute('libsecp256k1/autogen.sh')
-            os.chmod(absolute(autogen), 0o755)
-            subprocess.check_call([autogen], cwd=absolute('libsecp256k1'))
+            subprocess.check_call([bash, '-c', autoreconf], cwd=absolute('libsecp256k1'))
+
+            #autogen = absolute('libsecp256k1/autogen.sh')
+            #os.chmod(absolute(autogen), 0o755)
+            #subprocess.check_call([autogen], cwd=absolute('libsecp256k1'))
 
         for filename in [
             'libsecp256k1/configure',
@@ -191,10 +210,10 @@ class build_clib(_build_clib):
             '--enable-exhaustive-tests=no',
         ]
         if 'COINCURVE_CROSS_HOST' in os.environ:
-            cmd.append('--host={}'.format(os.environ['COINCURVE_CROSS_HOST']))
+            cmd.append(f"--host={os.environ['COINCURVE_CROSS_HOST']}")
 
-        log.debug('Running configure: {}'.format(' '.join(cmd)))
-        subprocess.check_call(cmd, cwd=build_temp)
+        log.debug(f"Running configure: {' '.join(cmd)}")
+        subprocess.check_call([bash, '-c', " ".join(cmd)], cwd=build_temp)
 
         subprocess.check_call([MAKE], cwd=build_temp)
         subprocess.check_call([MAKE, 'install'], cwd=build_temp)
