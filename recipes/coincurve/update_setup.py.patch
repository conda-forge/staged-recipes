diff --git a/setup.py b/setup.py
--- a/setup.py	(revision a3c2fdb643d684090ed33b79de4703b3d49924f8)
+++ b/setup.py	(date 1693838572861)
@@ -1,21 +1,14 @@
 import errno
 import os
 import os.path
-import platform
-import shutil
-import subprocess
-import tarfile
+import sys
 from distutils import log
 from distutils.command.build_clib import build_clib as _build_clib
 from distutils.command.build_ext import build_ext as _build_ext
 from distutils.errors import DistutilsError
-from io import BytesIO
-import sys

 from setuptools import Distribution as _Distribution, setup, find_packages, __version__ as setuptools_version
 from setuptools.command.develop import develop as _develop
-from setuptools.command.egg_info import egg_info as _egg_info
-from setuptools.command.sdist import sdist as _sdist

 try:
     from wheel.bdist_wheel import bdist_wheel as _bdist_wheel
@@ -25,21 +18,11 @@


 sys.path.append(os.path.abspath(os.path.dirname(__file__)))
-from setup_support import absolute, build_flags, detect_dll, has_system_lib  # noqa: E402
+from setup_support import build_flags, detect_dll, has_system_lib  # noqa: E402


 BUILDING_FOR_WINDOWS = detect_dll()

-MAKE = 'gmake' if platform.system() in ['FreeBSD', 'OpenBSD'] else 'make'
-
-# IMPORTANT: keep in sync with .github/workflows/build.yml
-#
-# Version of libsecp256k1 to download if none exists in the `libsecp256k1` directory
-UPSTREAM_REF = os.getenv('COINCURVE_UPSTREAM_REF') or 'ddf2b2910eb19032f8dd657c66735115ae24bfba'
-
-LIB_TARBALL_URL = f'https://github.com/bitcoin-core/secp256k1/archive/{UPSTREAM_REF}.tar.gz'
-
-
 # We require setuptools >= 3.3
 if [int(i) for i in setuptools_version.split('.', 2)[:2]] < [3, 3]:
     raise SystemExit(
@@ -47,60 +30,6 @@
         'package. Please upgrade to a newer version (>= 3.3).'.format(setuptools_version)
     )

-
-def download_library(command):
-    if command.dry_run:
-        return
-    libdir = absolute('libsecp256k1')
-    if os.path.exists(os.path.join(libdir, 'autogen.sh')):
-        # Library already downloaded
-        return
-    if not os.path.exists(libdir):
-        command.announce('downloading libsecp256k1 source code', level=log.INFO)
-        try:
-            import requests
-
-            r = requests.get(LIB_TARBALL_URL, stream=True)
-            status_code = r.status_code
-            if status_code == 200:
-                content = BytesIO(r.raw.read())
-                content.seek(0)
-                with tarfile.open(fileobj=content) as tf:
-                    dirname = tf.getnames()[0].partition('/')[0]
-                    tf.extractall()
-                shutil.move(dirname, libdir)
-            else:
-                raise SystemExit('Unable to download secp256k1 library: HTTP-Status: %d', status_code)
-        except requests.exceptions.RequestException as e:
-            raise SystemExit('Unable to download secp256k1 library: %s', str(e))
-
-
-class egg_info(_egg_info):
-    def run(self):
-        # Ensure library has been downloaded (sdist might have been skipped)
-        download_library(self)
-
-        _egg_info.run(self)
-
-
-class sdist(_sdist):
-    def run(self):
-        download_library(self)
-        _sdist.run(self)
-
-
-if _bdist_wheel:
-
-    class bdist_wheel(_bdist_wheel):
-        def run(self):
-            download_library(self)
-            _bdist_wheel.run(self)
-
-
-else:
-    bdist_wheel = None
-
-
 class build_clib(_build_clib):
     def initialize_options(self):
         _build_clib.initialize_options(self)
@@ -111,16 +40,6 @@
         if self.build_flags is None:
             self.build_flags = {'include_dirs': [], 'library_dirs': [], 'define': []}

-    def get_source_files(self):
-        # Ensure library has been downloaded (sdist might have been skipped)
-        download_library(self)
-
-        return [
-            absolute(os.path.join(root, filename))
-            for root, _, filenames in os.walk(absolute('libsecp256k1'))
-            for filename in filenames
-        ]
-
     def build_libraries(self, libraries):
         raise Exception('build_libraries')

@@ -143,68 +62,10 @@
             if e.errno != errno.EEXIST:
                 raise

-        if not os.path.exists(absolute('libsecp256k1')):
-            # library needs to be downloaded
-            self.get_source_files()
-
-        if not os.path.exists(absolute('libsecp256k1/configure')):
-            # configure script hasn't been generated yet
-            autogen = absolute('libsecp256k1/autogen.sh')
-            os.chmod(absolute(autogen), 0o755)
-            subprocess.check_call([autogen], cwd=absolute('libsecp256k1'))
-
-        for filename in [
-            'libsecp256k1/configure',
-            'libsecp256k1/build-aux/compile',
-            'libsecp256k1/build-aux/config.guess',
-            'libsecp256k1/build-aux/config.sub',
-            'libsecp256k1/build-aux/depcomp',
-            'libsecp256k1/build-aux/install-sh',
-            'libsecp256k1/build-aux/missing',
-            'libsecp256k1/build-aux/test-driver',
-        ]:
-            try:
-                os.chmod(absolute(filename), 0o755)
-            except OSError as e:
-                # some of these files might not exist depending on autoconf version
-                if e.errno != errno.ENOENT:
-                    # If the error isn't 'No such file or directory' something
-                    # else is wrong and we want to know about it
-                    raise
-
-        cmd = [
-            absolute('libsecp256k1/configure'),
-            '--disable-shared',
-            '--enable-static',
-            '--disable-dependency-tracking',
-            '--with-pic',
-            '--enable-module-extrakeys',
-            '--enable-module-recovery',
-            '--enable-module-schnorrsig',
-            '--prefix',
-            os.path.abspath(self.build_clib),
-            '--enable-experimental',
-            '--enable-module-ecdh',
-            '--enable-benchmark=no',
-            '--enable-tests=no',
-            '--enable-openssl-tests=no',
-            '--enable-exhaustive-tests=no',
-        ]
-        if 'COINCURVE_CROSS_HOST' in os.environ:
-            cmd.append('--host={}'.format(os.environ['COINCURVE_CROSS_HOST']))
-
-        log.debug('Running configure: {}'.format(' '.join(cmd)))
-        subprocess.check_call(cmd, cwd=build_temp)
-
-        subprocess.check_call([MAKE], cwd=build_temp)
-        subprocess.check_call([MAKE, 'install'], cwd=build_temp)
-
         self.build_flags['include_dirs'].extend(build_flags('libsecp256k1', 'I', build_temp))
         self.build_flags['library_dirs'].extend(build_flags('libsecp256k1', 'L', build_temp))
         if not has_system_lib():
             self.build_flags['define'].append(('CFFI_ENABLE_RECOVERY', None))
-        else:
-            pass


 class build_ext(_build_ext):
@@ -256,9 +117,6 @@
             'build_clib': build_clib,
             'build_ext': build_ext,
             'develop': develop,
-            'egg_info': egg_info,
-            'sdist': sdist,
-            'bdist_wheel': bdist_wheel,
         },
     )

@@ -274,9 +132,9 @@
     license='MIT OR Apache-2.0',

     python_requires='>=3.7',
-    install_requires=['asn1crypto', 'cffi>=1.3.0'],
+    install_requires=['asn1crypto', 'libsecp256k1>=0.3.2', 'cffi>=1.3.0'],

-    packages=find_packages(exclude=('_cffi_build', '_cffi_build.*', 'libsecp256k1', 'tests')),
+    packages=find_packages(exclude=('_cffi_build', '_cffi_build.*', 'tests')),
     package_data=package_data,

     distclass=Distribution,
