diff --git a/setup.py b/setup.py
index c121d33..595f84b 100644
--- a/setup.py
+++ b/setup.py
@@ -1,6 +1,7 @@
 import errno
 import os
 import os.path
+import pathlib
 import platform
 import shutil
 import subprocess
@@ -21,8 +22,6 @@ try:
     from wheel.bdist_wheel import bdist_wheel as _bdist_wheel
 except ImportError:
     _bdist_wheel = None
-    pass
-

 sys.path.append(os.path.abspath(os.path.dirname(__file__)))
 from setup_support import absolute, build_flags, detect_dll, has_system_lib  # noqa: E402
@@ -36,7 +35,7 @@ MAKE = 'gmake' if platform.system() in ['FreeBSD', 'OpenBSD'] else 'make'
 #
 # Version of libsecp256k1 to download if none exists in the `libsecp256k1` directory
 UPSTREAM_REF = os.getenv('COINCURVE_UPSTREAM_REF') or 'ddf2b2910eb19032f8dd657c66735115ae24bfba'
-
+LIB_NAME = 'libsecp256k1'
 LIB_TARBALL_URL = f'https://github.com/bitcoin-core/secp256k1/archive/{UPSTREAM_REF}.tar.gz'


@@ -48,31 +47,43 @@ if [int(i) for i in setuptools_version.split('.', 2)[:2]] < [3, 3]:
     )


-def download_library(command):
+def download_library(command, libdir=LIB_NAME, force=False):
     if command.dry_run:
         return
-    libdir = absolute('libsecp256k1')
+
+    if force:
+        shutil.rmtree(libdir, ignore_errors=True)
+
     if os.path.exists(os.path.join(libdir, 'autogen.sh')):
         # Library already downloaded
         return
-    if not os.path.exists(libdir):
-        command.announce('downloading libsecp256k1 source code', level=log.INFO)
-        try:
-            import requests
-
-            r = requests.get(LIB_TARBALL_URL, stream=True)
-            status_code = r.status_code
-            if status_code == 200:
-                content = BytesIO(r.raw.read())
-                content.seek(0)
-                with tarfile.open(fileobj=content) as tf:
-                    dirname = tf.getnames()[0].partition('/')[0]
-                    tf.extractall()
-                shutil.move(dirname, libdir)
-            else:
-                raise SystemExit('Unable to download secp256k1 library: HTTP-Status: %d', status_code)
-        except requests.exceptions.RequestException as e:
-            raise SystemExit('Unable to download secp256k1 library: %s', str(e))
+
+    # Ensure the path exists
+    os.makedirs(libdir, exist_ok=True)
+
+    # _download will use shutil.move, thus remove the directory
+    os.rmdir(libdir)
+
+    command.announce(f'Downloading {LIB_NAME} source code', level=log.INFO)
+    from requests.exceptions import RequestException
+    try:
+        _download_library(libdir)
+    except RequestException as e:
+        raise SystemExit(f'Unable to download {LIB_NAME} library: {str(e)}', ) from e
+
+
+def _download_library(libdir):
+    import requests
+    r = requests.get(LIB_TARBALL_URL, stream=True)
+    status_code = r.status_code
+    if status_code != 200:
+        raise SystemExit(f'Unable to download {LIB_NAME} library: HTTP-Status: {status_code}')
+    content = BytesIO(r.raw.read())
+    content.seek(0)
+    with tarfile.open(fileobj=content) as tf:
+        dirname = tf.getnames()[0].partition('/')[0]
+        tf.extractall()
+    shutil.move(dirname, libdir)


 class egg_info(_egg_info):
@@ -85,7 +96,7 @@ class egg_info(_egg_info):

 class sdist(_sdist):
     def run(self):
-        download_library(self)
+        download_library(self, force=True)
         _sdist.run(self)


@@ -116,55 +127,70 @@ class build_clib(_build_clib):
         download_library(self)

         return [
-            absolute(os.path.join(root, filename))
-            for root, _, filenames in os.walk(absolute('libsecp256k1'))
+            os.path.join(root, filename)
+            for root, _, filenames in os.walk(LIB_NAME)
             for filename in filenames
         ]

     def build_libraries(self, libraries):
-        raise Exception('build_libraries')
+        raise NotImplementedError('build_libraries')

     def check_library_list(self, libraries):
-        raise Exception('check_library_list')
+        raise NotImplementedError('check_library_list')

     def get_library_names(self):
-        return build_flags('libsecp256k1', 'l', os.path.abspath(self.build_temp))
+        return build_flags(LIB_NAME, 'l', os.path.join(os.path.abspath(self.build_clib), 'lib', 'pkgconfig'))

     def run(self):
+        cwd = pathlib.Path().absolute()
+
         if has_system_lib():
             log.info('Using system library')
             return

-        build_temp = os.path.abspath(self.build_temp)
+        build_external_library = os.path.join(cwd, 'build_external_library')
+        built_lib_dir = os.path.join(build_external_library, LIB_NAME)
+        installed_lib_dir = os.path.abspath(self.build_clib)

         try:
-            os.makedirs(build_temp)
+            os.makedirs(build_external_library)
         except OSError as e:
             if e.errno != errno.EEXIST:
                 raise

-        if not os.path.exists(absolute('libsecp256k1')):
-            # library needs to be downloaded
-            self.get_source_files()
+        download_library(self, libdir=built_lib_dir)
+
+        bash, autoreconf = None, "autoreconf -if --warnings=all"
+        for path in ["LIBRARY_BIN", "PREFIX", "BUILD_PREFIX", "SP_DIR"]:
+            if os.environ.get(path, None) is None:
+                continue
+
+            if bash is not None:
+                break
+
+            for root, _, filenames in os.walk(os.environ.get(path)):
+                for filename in filenames:
+                    if filename in ["bash", "bash.exe"]:
+                        bash = os.path.join(root, filename)
+                        break
+
+        if bash is None:
+            bash = "bash"

-        if not os.path.exists(absolute('libsecp256k1/configure')):
-            # configure script hasn't been generated yet
-            autogen = absolute('libsecp256k1/autogen.sh')
-            os.chmod(absolute(autogen), 0o755)
-            subprocess.check_call([autogen], cwd=absolute('libsecp256k1'))
+        subprocess.check_call([bash, '-c', autoreconf], cwd=built_lib_dir)

         for filename in [
-            'libsecp256k1/configure',
-            'libsecp256k1/build-aux/compile',
-            'libsecp256k1/build-aux/config.guess',
-            'libsecp256k1/build-aux/config.sub',
-            'libsecp256k1/build-aux/depcomp',
-            'libsecp256k1/build-aux/install-sh',
-            'libsecp256k1/build-aux/missing',
-            'libsecp256k1/build-aux/test-driver',
+            os.path.join(built_lib_dir, 'configure'),
+            os.path.join(built_lib_dir, 'build-aux', 'compile'),
+            os.path.join(built_lib_dir, 'build-aux', 'config.guess'),
+            os.path.join(built_lib_dir, 'build-aux', 'config.sub'),
+            os.path.join(built_lib_dir, 'build-aux', 'depcomp'),
+            os.path.join(built_lib_dir, 'build-aux', 'install-sh'),
+            os.path.join(built_lib_dir, 'build-aux', 'missing'),
+            os.path.join(built_lib_dir, 'build-aux', 'test-driver'),
         ]:
             try:
-                os.chmod(absolute(filename), 0o755)
+                os.chmod(filename, 0o700)
             except OSError as e:
                 # some of these files might not exist depending on autoconf version
                 if e.errno != errno.ENOENT:
@@ -173,7 +199,7 @@ class build_clib(_build_clib):
                     raise

         cmd = [
-            absolute('libsecp256k1/configure'),
+            'configure',
             '--disable-shared',
             '--enable-static',
             '--disable-dependency-tracking',
@@ -182,29 +208,28 @@ class build_clib(_build_clib):
             '--enable-module-recovery',
             '--enable-module-schnorrsig',
             '--prefix',
-            os.path.abspath(self.build_clib),
+            installed_lib_dir,
             '--enable-experimental',
             '--enable-module-ecdh',
             '--enable-benchmark=no',
             '--enable-tests=no',
-            '--enable-openssl-tests=no',
             '--enable-exhaustive-tests=no',
         ]
         if 'COINCURVE_CROSS_HOST' in os.environ:
-            cmd.append('--host={}'.format(os.environ['COINCURVE_CROSS_HOST']))
+            cmd.append(f"--host={os.environ['COINCURVE_CROSS_HOST']}")

-        log.debug('Running configure: {}'.format(' '.join(cmd)))
-        subprocess.check_call(cmd, cwd=build_temp)
+        log.debug(f"Running configure: {' '.join(cmd)}")
+        # Prepend the current directory to PATH so that the correct version of configure is used
+        os.environ['PATH'] = built_lib_dir + os.pathsep + os.environ['PATH']
+        subprocess.check_call([bash, '-c', ' '.join(cmd)], cwd=built_lib_dir)

-        subprocess.check_call([MAKE], cwd=build_temp)
-        subprocess.check_call([MAKE, 'install'], cwd=build_temp)
+        subprocess.check_call([MAKE], cwd=built_lib_dir)
+        subprocess.check_call([MAKE, 'install'], cwd=built_lib_dir)

-        self.build_flags['include_dirs'].extend(build_flags('libsecp256k1', 'I', build_temp))
-        self.build_flags['library_dirs'].extend(build_flags('libsecp256k1', 'L', build_temp))
+        self.build_flags['include_dirs'].extend(build_flags(LIB_NAME, 'I', os.path.join(installed_lib_dir, "lib", "pkgconfig")))
+        self.build_flags['library_dirs'].extend(build_flags(LIB_NAME, 'L', os.path.join(installed_lib_dir, "lib", "pkgconfig")))
         if not has_system_lib():
             self.build_flags['define'].append(('CFFI_ENABLE_RECOVERY', None))
-        else:
-            pass


 class build_ext(_build_ext):
@@ -227,7 +252,7 @@ class develop(_develop):
         if not has_system_lib():
             raise DistutilsError(
                 "This library is not usable in 'develop' mode when using the "
-                'bundled libsecp256k1. See README for details.'
+                f'bundled {LIB_NAME}. See README for details.'
             )
         _develop.run(self)

@@ -240,7 +265,7 @@ if BUILDING_FOR_WINDOWS:
         def is_pure(self):
             return False

-    package_data['coincurve'].append('libsecp256k1.dll')
+    package_data['coincurve'].append(f'{LIB_NAME}.dll')
     setup_kwargs = dict()
 else:

@@ -267,7 +292,7 @@ setup(
     name='coincurve',
     version='18.0.0',

-    description='Cross-platform Python CFFI bindings for libsecp256k1',
+    description=f'Cross-platform Python CFFI bindings for {LIB_NAME}',
     long_description=open('README.md', 'r').read(),
     long_description_content_type='text/markdown',
     author_email='Ofek Lev <oss@ofek.dev>',
@@ -276,7 +301,7 @@ setup(
     python_requires='>=3.7',
     install_requires=['asn1crypto', 'cffi>=1.3.0'],

-    packages=find_packages(exclude=('_cffi_build', '_cffi_build.*', 'libsecp256k1', 'tests')),
+    packages=find_packages(exclude=('_cffi_build', '_cffi_build.*', LIB_NAME, 'tests')),
     package_data=package_data,

     distclass=Distribution,
