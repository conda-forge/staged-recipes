diff -Nu a/coincurve/context.py b/coincurve/context.py
--- a/coincurve/context.py	2022-11-19 14:10:25.000000000 -0600
+++ b/coincurve/context.py	2023-09-25 10:19:04.102511107 -0500
@@ -1,5 +1,6 @@
 from os import urandom
 from threading import Lock
+from typing import Optional
 
 from coincurve.flags import CONTEXT_ALL, CONTEXT_FLAGS
 
@@ -7,9 +8,9 @@
 
 
 class Context:
-    def __init__(self, seed: bytes = None, flag=CONTEXT_ALL, name: str = ''):
+    def __init__(self, seed: Optional[bytes] = None, flag=CONTEXT_ALL, name: str = ''):
         if flag not in CONTEXT_FLAGS:
-            raise ValueError('{} is an invalid context flag.'.format(flag))
+            raise ValueError(f'{flag} is an invalid context flag.')
         self._lock = Lock()
 
         self.ctx = ffi.gc(lib.secp256k1_context_create(flag), lib.secp256k1_context_destroy)
@@ -17,14 +18,15 @@
 
         self.name = name
 
-    def reseed(self, seed: bytes = None):
+    def reseed(self, seed: Optional[bytes] = None):
         """
         Protects against certain possible future side-channel timing attacks.
         """
         with self._lock:
             seed = urandom(32) if not seed or len(seed) != 32 else seed
             res = lib.secp256k1_context_randomize(self.ctx, ffi.new('unsigned char [32]', seed))
-            assert res == 1
+            if not res:
+                raise ValueError('secp256k1_context_randomize')
 
     def __repr__(self):
         return self.name or super().__repr__()
diff -Nu a/coincurve/ecdsa.py b/coincurve/ecdsa.py
--- a/coincurve/ecdsa.py	2022-11-19 14:10:25.000000000 -0600
+++ b/coincurve/ecdsa.py	2023-09-02 16:54:48.207368141 -0500
@@ -76,7 +76,8 @@
     output = ffi.new('unsigned char[%d]' % CDATA_SIG_LENGTH)
 
     res = lib.secp256k1_ecdsa_signature_serialize_compact(context.ctx, output, raw_sig)
-    assert res == 1
+    if not res:
+        raise ValueError('secp256k1_ecdsa_signature_serialize_compact')
 
     return bytes(ffi.buffer(output, CDATA_SIG_LENGTH))
 
@@ -87,7 +88,8 @@
 
     raw_sig = ffi.new('secp256k1_ecdsa_signature *')
     res = lib.secp256k1_ecdsa_signature_parse_compact(context.ctx, raw_sig, ser_sig)
-    assert res == 1
+    if not res:
+        raise ValueError('secp256k1_ecdsa_signature_parse_compact')
 
     return raw_sig
 
diff -Nu a/coincurve/keys.py b/coincurve/keys.py
--- a/coincurve/keys.py	2022-11-19 14:10:25.000000000 -0600
+++ b/coincurve/keys.py	2023-09-25 10:50:50.335746923 -0500
@@ -1,5 +1,5 @@
 import os
-from typing import Tuple
+from typing import Optional, Tuple
 
 from asn1crypto.keys import ECDomainParameters, ECPointBitString, ECPrivateKey, PrivateKeyAlgorithm, PrivateKeyInfo
 
@@ -24,7 +24,7 @@
 
 
 class PrivateKey:
-    def __init__(self, secret: bytes = None, context: Context = GLOBAL_CONTEXT):
+    def __init__(self, secret: Optional[bytes] = None, context: Context = GLOBAL_CONTEXT):
         """
         :param secret: The secret used to initialize the private key.
                        If not provided or `None`, a new key will be generated.
@@ -159,7 +159,7 @@
 
         secret = ffi.new('unsigned char [32]', self.secret)
 
-        success = lib.secp256k1_ec_privkey_tweak_add(self.context.ctx, secret, scalar)
+        success = lib.secp256k1_ec_seckey_tweak_add(self.context.ctx, secret, scalar)
 
         if not success:
             raise ValueError('The tweak was out of range, or the resulting private key is invalid.')
@@ -186,7 +186,7 @@
 
         secret = ffi.new('unsigned char [32]', self.secret)
 
-        lib.secp256k1_ec_privkey_tweak_mul(self.context.ctx, secret, scalar)
+        lib.secp256k1_ec_seckey_tweak_mul(self.context.ctx, secret, scalar)
 
         secret = bytes(ffi.buffer(secret, 32))
 
@@ -407,7 +407,7 @@
 
         return PublicKey(public_key, context)
 
-    def format(self, compressed: bool = True) -> bytes:
+    def format(self, compressed: bool = True) -> bytes:  # noqa: A003
         """
         Format the public key.
 
@@ -579,7 +579,7 @@
 
         return cls(xonly_pubkey, parity=not not pk_parity[0], context=context)
 
-    def format(self) -> bytes:
+    def format(self) -> bytes:  # noqa: A003
         """Serialize the public key.
 
         :return: The public key serialized as 32 bytes.
Common subdirectories: coincurve/__pycache__ and b/coincurve/__pycache__
diff -Nu a/coincurve/utils.py b/coincurve/utils.py
--- a/coincurve/utils.py	2022-11-19 14:10:25.000000000 -0600
+++ b/coincurve/utils.py	2023-09-25 10:19:04.102511107 -0500
@@ -27,11 +27,11 @@
 
 else:  # no cov
 
-    class __Nonce(tuple):
+    class __Nonce(tuple):  # noqa: N801
         def __repr__(self):
             return '(ffi.NULL, ffi.NULL)'
 
-    class __HasherSHA256:
+    class __HasherSHA256:  # noqa: N801
         def __call__(self, bytestr: bytes) -> bytes:
             return _sha256(bytestr).digest()
 
@@ -88,7 +88,7 @@
 
 def validate_secret(secret: bytes) -> bytes:
     if not 0 < bytes_to_int(secret) < GROUP_ORDER_INT:
-        raise ValueError('Secret scalar must be greater than 0 and less than {}.'.format(GROUP_ORDER_INT))
+        raise ValueError(f'Secret scalar must be greater than 0 and less than {GROUP_ORDER_INT}.')
     return pad_scalar(secret)
 
 
diff -Nu a/coincurve/_windows_libsecp256k1.py b/coincurve/_windows_libsecp256k1.py
--- a/coincurve/_windows_libsecp256k1.py	2022-11-19 14:10:25.000000000 -0600
+++ b/coincurve/_windows_libsecp256k1.py	1969-12-31 18:00:00.000000000 -0600
@@ -1,376 +0,0 @@
-import os
-
-from cffi import FFI
-
-BASE_DEFINITIONS = """
-typedef struct secp256k1_context_struct secp256k1_context;
-
-typedef struct {
-    unsigned char data[64];
-} secp256k1_pubkey;
-
-typedef struct {
-    unsigned char data[64];
-} secp256k1_ecdsa_signature;
-
-typedef int (*secp256k1_nonce_function)(
-    unsigned char *nonce32,
-    const unsigned char *msg32,
-    const unsigned char *key32,
-    const unsigned char *algo16,
-    void *data,
-    unsigned int attempt
-);
-
-#define SECP256K1_FLAGS_TYPE_MASK 255
-#define SECP256K1_FLAGS_TYPE_CONTEXT 1
-#define SECP256K1_FLAGS_TYPE_COMPRESSION 2
-
-#define SECP256K1_FLAGS_BIT_CONTEXT_VERIFY 256
-#define SECP256K1_FLAGS_BIT_CONTEXT_SIGN 512
-#define SECP256K1_FLAGS_BIT_COMPRESSION 256
-
-#define SECP256K1_CONTEXT_VERIFY 257
-#define SECP256K1_CONTEXT_SIGN 513
-#define SECP256K1_CONTEXT_NONE 1
-
-#define SECP256K1_EC_COMPRESSED 258
-#define SECP256K1_EC_UNCOMPRESSED 2
-
-secp256k1_context* secp256k1_context_create(
-    unsigned int flags
-);
-
-secp256k1_context* secp256k1_context_clone(
-    const secp256k1_context* ctx
-);
-
-void secp256k1_context_destroy(
-    secp256k1_context* ctx
-);
-
-void secp256k1_context_set_illegal_callback(
-    secp256k1_context* ctx,
-    void (*fun)(const char* message, void* data),
-    const void* data
-);
-
-void secp256k1_context_set_error_callback(
-    secp256k1_context* ctx,
-    void (*fun)(const char* message, void* data),
-    const void* data
-);
-
-int secp256k1_ec_pubkey_parse(
-    const secp256k1_context* ctx,
-    secp256k1_pubkey* pubkey,
-    const unsigned char *input,
-    size_t inputlen
-);
-
-int secp256k1_ec_pubkey_serialize(
-    const secp256k1_context* ctx,
-    unsigned char *output,
-    size_t *outputlen,
-    const secp256k1_pubkey* pubkey,
-    unsigned int flags
-);
-
-int secp256k1_ecdsa_signature_parse_compact(
-    const secp256k1_context* ctx,
-    secp256k1_ecdsa_signature* sig,
-    const unsigned char *input64
-);
-
-int secp256k1_ecdsa_signature_parse_der(
-    const secp256k1_context* ctx,
-    secp256k1_ecdsa_signature* sig,
-    const unsigned char *input,
-    size_t inputlen
-);
-
-int secp256k1_ecdsa_signature_serialize_der(
-    const secp256k1_context* ctx,
-    unsigned char *output,
-    size_t *outputlen,
-    const secp256k1_ecdsa_signature* sig
-);
-
-int secp256k1_ecdsa_signature_serialize_compact(
-    const secp256k1_context* ctx,
-    unsigned char *output64,
-    const secp256k1_ecdsa_signature* sig
-);
-
-int secp256k1_ecdsa_verify(
-    const secp256k1_context* ctx,
-    const secp256k1_ecdsa_signature *sig,
-    const unsigned char *msg32,
-    const secp256k1_pubkey *pubkey
-);
-
-int secp256k1_ecdsa_signature_normalize(
-    const secp256k1_context* ctx,
-    secp256k1_ecdsa_signature *sigout,
-    const secp256k1_ecdsa_signature *sigin
-);
-
-extern const secp256k1_nonce_function secp256k1_nonce_function_rfc6979;
-
-extern const secp256k1_nonce_function secp256k1_nonce_function_default;
-
-int secp256k1_ecdsa_sign(
-    const secp256k1_context* ctx,
-    secp256k1_ecdsa_signature *sig,
-    const unsigned char *msg32,
-    const unsigned char *seckey,
-    secp256k1_nonce_function noncefp,
-    const void *ndata
-);
-
-int secp256k1_ec_seckey_verify(
-    const secp256k1_context* ctx,
-    const unsigned char *seckey
-);
-
-int secp256k1_ec_pubkey_create(
-    const secp256k1_context* ctx,
-    secp256k1_pubkey *pubkey,
-    const unsigned char *seckey
-);
-
-int secp256k1_ec_privkey_tweak_add(
-    const secp256k1_context* ctx,
-    unsigned char *seckey,
-    const unsigned char *tweak
-);
-
-int secp256k1_ec_pubkey_tweak_add(
-    const secp256k1_context* ctx,
-    secp256k1_pubkey *pubkey,
-    const unsigned char *tweak
-);
-
-int secp256k1_ec_privkey_tweak_mul(
-    const secp256k1_context* ctx,
-    unsigned char *seckey,
-    const unsigned char *tweak
-);
-
-int secp256k1_ec_pubkey_tweak_mul(
-    const secp256k1_context* ctx,
-    secp256k1_pubkey *pubkey,
-    const unsigned char *tweak
-);
-
-int secp256k1_context_randomize(
-    secp256k1_context* ctx,
-    const unsigned char *seed32
-);
-
-int secp256k1_ec_pubkey_combine(
-    const secp256k1_context* ctx,
-    secp256k1_pubkey *out,
-    const secp256k1_pubkey * const * ins,
-    size_t n
-);
-"""
-
-EXTRAKEYS_DEFINITIONS = """
-typedef struct {
-    unsigned char data[64];
-} secp256k1_xonly_pubkey;
-
-typedef struct {
-    unsigned char data[96];
-} secp256k1_keypair;
-
-int secp256k1_xonly_pubkey_parse(
-    const secp256k1_context* ctx,
-    secp256k1_xonly_pubkey* pubkey,
-    const unsigned char *input32
-);
-
-int secp256k1_xonly_pubkey_serialize(
-    const secp256k1_context* ctx,
-    unsigned char *output32,
-    const secp256k1_xonly_pubkey* pubkey
-);
-
-int secp256k1_xonly_pubkey_cmp(
-    const secp256k1_context* ctx,
-    const secp256k1_xonly_pubkey* pk1,
-    const secp256k1_xonly_pubkey* pk2
-);
-
-int secp256k1_xonly_pubkey_from_pubkey(
-    const secp256k1_context* ctx,
-    secp256k1_xonly_pubkey *xonly_pubkey,
-    int *pk_parity,
-    const secp256k1_pubkey *pubkey
-);
-
-int secp256k1_xonly_pubkey_tweak_add(
-    const secp256k1_context* ctx,
-    secp256k1_pubkey *output_pubkey,
-    const secp256k1_xonly_pubkey *internal_pubkey,
-    const unsigned char *tweak32
-);
-
-int secp256k1_xonly_pubkey_tweak_add_check(
-    const secp256k1_context* ctx,
-    const unsigned char *tweaked_pubkey32,
-    int tweaked_pk_parity,
-    const secp256k1_xonly_pubkey *internal_pubkey,
-    const unsigned char *tweak32
-);
-
-int secp256k1_keypair_create(
-    const secp256k1_context* ctx,
-    secp256k1_keypair *keypair,
-    const unsigned char *seckey
-);
-
-int secp256k1_keypair_sec(
-    const secp256k1_context* ctx,
-    unsigned char *seckey,
-    const secp256k1_keypair *keypair
-);
-
-int secp256k1_keypair_pub(
-    const secp256k1_context* ctx,
-    secp256k1_pubkey *pubkey,
-    const secp256k1_keypair *keypair
-);
-
-int secp256k1_keypair_xonly_pub(
-    const secp256k1_context* ctx,
-    secp256k1_xonly_pubkey *pubkey,
-    int *pk_parity,
-    const secp256k1_keypair *keypair
-);
-
-int secp256k1_keypair_xonly_tweak_add(
-    const secp256k1_context* ctx,
-    secp256k1_keypair *keypair,
-    const unsigned char *tweak32
-);
-"""
-
-RECOVERY_DEFINITIONS = """
-typedef struct {
-    unsigned char data[65];
-} secp256k1_ecdsa_recoverable_signature;
-
-int secp256k1_ecdsa_recoverable_signature_parse_compact(
-    const secp256k1_context* ctx,
-    secp256k1_ecdsa_recoverable_signature* sig,
-    const unsigned char *input64,
-    int recid
-);
-
-int secp256k1_ecdsa_recoverable_signature_convert(
-    const secp256k1_context* ctx,
-    secp256k1_ecdsa_signature* sig,
-    const secp256k1_ecdsa_recoverable_signature* sigin
-);
-
-int secp256k1_ecdsa_recoverable_signature_serialize_compact(
-    const secp256k1_context* ctx,
-    unsigned char *output64,
-    int *recid,
-    const secp256k1_ecdsa_recoverable_signature* sig
-);
-
-int secp256k1_ecdsa_sign_recoverable(
-    const secp256k1_context* ctx,
-    secp256k1_ecdsa_recoverable_signature *sig,
-    const unsigned char *msg32,
-    const unsigned char *seckey,
-    secp256k1_nonce_function noncefp,
-    const void *ndata
-);
-
-int secp256k1_ecdsa_recover(
-    const secp256k1_context* ctx,
-    secp256k1_pubkey *pubkey,
-    const secp256k1_ecdsa_recoverable_signature *sig,
-    const unsigned char *msg32
-);
-"""
-
-SCHNORRSIG_DEFINITIONS = """
-typedef int (*secp256k1_nonce_function_hardened)(
-    unsigned char *nonce32,
-    const unsigned char *msg,
-    size_t msglen,
-    const unsigned char *key32,
-    const unsigned char *xonly_pk32,
-    const unsigned char *algo,
-    size_t algolen,
-    void *data
-);
-
-extern const secp256k1_nonce_function_hardened secp256k1_nonce_function_bip340;
-
-typedef struct {
-    unsigned char magic[4];
-    secp256k1_nonce_function_hardened noncefp;
-    void* ndata;
-} secp256k1_schnorrsig_extraparams;
-
-int secp256k1_schnorrsig_sign(
-    const secp256k1_context* ctx,
-    unsigned char *sig64,
-    const unsigned char *msg32,
-    const secp256k1_keypair *keypair,
-    const unsigned char *aux_rand32
-);
-
-int secp256k1_schnorrsig_sign32(
-    const secp256k1_context* ctx,
-    unsigned char *sig64,
-    const unsigned char *msg32,
-    const secp256k1_keypair *keypair,
-    const unsigned char *aux_rand32
-);
-
-int secp256k1_schnorrsig_sign_custom(
-    const secp256k1_context* ctx,
-    unsigned char *sig64,
-    const unsigned char *msg,
-    size_t msglen,
-    const secp256k1_keypair *keypair,
-    secp256k1_schnorrsig_extraparams *extraparams
-);
-
-int secp256k1_schnorrsig_verify(
-    const secp256k1_context* ctx,
-    const unsigned char *sig64,
-    const unsigned char *msg,
-    size_t msglen,
-    const secp256k1_xonly_pubkey *pubkey
-);
-"""
-
-ECDH_DEFINITIONS = """
-int secp256k1_ecdh(
-  const secp256k1_context* ctx,
-  unsigned char *result,
-  const secp256k1_pubkey *pubkey,
-  const unsigned char *privkey,
-  void *hashfp,
-  void *data
-);
-"""
-
-ffi = FFI()
-
-ffi.cdef(BASE_DEFINITIONS)
-ffi.cdef(EXTRAKEYS_DEFINITIONS)
-ffi.cdef(RECOVERY_DEFINITIONS)
-ffi.cdef(SCHNORRSIG_DEFINITIONS)
-ffi.cdef(ECDH_DEFINITIONS)
-
-here = os.path.dirname(os.path.abspath(__file__))
-lib = ffi.dlopen(os.path.join(here, 'libsecp256k1.dll'))
