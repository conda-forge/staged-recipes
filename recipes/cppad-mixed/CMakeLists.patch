diff --git a/CMakeLists.txt b/CMakeLists.txt
index 37a99042..89893e99 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -12,13 +12,21 @@
 #                        -D cmake_libdir=value \
 #                        -D ldlt_cholmod=value \
 #                        -D optimize_cppad_function=value \
-#                        -D for_hes_sparsity=value
+#                        -D for_hes_sparsity=value \
+# optional variables:    -D cmake_search_prefix=value
 # ============================================================================
 # Macro definitions
 # ============================================================================
+#
+# print_variable(variable)
 MACRO(print_variable variable)
    MESSAGE(STATUS "${variable}=${${variable}}" )
 ENDMACRO(print_variable variable)
+#
+# trace_line_in_file(${CMAKE_CURRENT_LIST_LINE}, ${CMAKE_CURRENT_LIST_FILE} )
+MACRO(trace_line_in_file line file)
+MESSAGE(STATUS "Line ${line} in ${file}")
+ENDMACRO( )
 # ----------------------------------------------------------------------------
 # required_definition( variable type docstring )
 #
@@ -50,6 +58,10 @@ MACRO( required_definition variable type docstring )
          SET( ${variable}_01 0 )
       ENDIF( ${variable} )
    ENDIF( ${type} STREQUAL "BOOL" )
+   IF( ${type} STREQUAL "PATH" )
+      CMAKE_PATH(SET ${variable} "${${variable}}" )
+      MESSAGE( STATUS "${variable} = ${${variable}}" )
+   ENDIF( ${type} STREQUAL "PATH" )
 ENDMACRO( required_definition )
 # ----------------------------------------------------------------------------
 # optional_definition( variable type docstring )
@@ -75,6 +87,10 @@ MACRO( optional_definition variable type docstring )
          SET( ${variable}_01 0 )
       ENDIF( ${variable} )
    ENDIF( ${type} STREQUAL "BOOL" )
+   IF( ${type} STREQUAL "PATH" )
+      CMAKE_PATH(SET ${variable} "${${variable}}" )
+      MESSAGE( STATUS "${variable} = ${${variable}}" )
+   ENDIF( ${type} STREQUAL "PATH" )
 ENDMACRO( optional_definition )
 # ============================================================================
 CMAKE_MINIMUM_REQUIRED(VERSION 3.0)
@@ -127,33 +143,43 @@ required_definition(optimize_cppad_function BOOL
 required_definition(for_hes_sparsity BOOL
    "use forward (reverse) method for computing Hessian w.r.t. random effects"
 )
+optional_definition( cmake_search_prefix PATH
+   "another prefix used when searching for installed tools"
+)
 # ----------------------------------------------------------------------------
 MESSAGE(STATUS "END:")
 # ----------------------------------------------------------------------------
 # https://gitlab.kitware.com/cmake/community/-/wikis/doc/cmake/RPATH-handling
 #
+# CMAKE_SKIP_BUILD_RPATH
 # use, i.e. don't skip the full RPATH for the build tree
-set(CMAKE_SKIP_BUILD_RPATH FALSE)
+SET(CMAKE_SKIP_BUILD_RPATH FALSE)
 #
+# CMAKE_BUILD_WITH_INSTALL_RPATH
 # when building, don't use the install RPATH already
 # (but later on when installing)
-set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
-#
-set(CMAKE_INSTALL_RPATH "${cmake_install_prefix}/${cmake_libdir}")
+SET(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
 #
+# CMAKE_INSTAL_RPATH_USE_LINK_PATH
 # add the automatically determined parts of the RPATH
 # which point to directories outside the build tree to the install RPATH
-set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
+SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
 #
-# the RPATH to be used when installing, but only if it's not a system directory
-list(FIND
+# isSyatemDir
+# is this RPATH choice a system directory
+LIST(FIND
    CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES
    "${cmake_install_prefix}/${cmake_libdir}"
    isSystemDir
 )
+#
+# CMAKE_INSTALL_RPATH
+# the RPATH to be used when installing, but only if it's not a system directory
+SET(CMAKE_INSTALL_RPATH "")
 if("${isSystemDir}" STREQUAL "-1")
-   set(CMAKE_INSTALL_RPATH "${dismod_at_pefix}/${cmake_libdir}")
+   SET(CMAKE_INSTALL_RPATH "${cmake_install_prefix}/${cmake_libdir}")
 endif("${isSystemDir}" STREQUAL "-1")
+print_variable( CMAKE_INSTALL_RPATH )
 # ----------------------------------------------------------------------------
 # check compiler flags
 #
@@ -198,13 +224,9 @@ ENDIF( cppad_mixed_has_nullptr_flag )
 MESSAGE(STATUS "cppad_mixed_has_nullptr = ${cppad_mixed_has_nullptr_01}")
 # ----------------------------------------------------------------------------
 # no pkg-config for SuiteSparse so explicitly set following values:
-# suitesparse_LIBRARY_DIRS
-# suitesparse_INCLUDE_DIRS
-# suitesparse_LIBRARIES
 #
 # suitesparse_prefix
 # suitesparse_suffix
-# suitesparse_in_cholmod_include_01
 SET(suitesparse_prefix "NOTFOUND")
 SET(suitesparse_suffix "NOTFOUND")
 EXECUTE_PROCESS(
@@ -212,7 +234,7 @@ EXECUTE_PROCESS(
    OUTPUT_VARIABLE brew_prefix
    OUTPUT_STRIP_TRAILING_WHITESPACE
 )
-IF( NOT "${brew_prefix}" STREQUAL "" )
+IF( FALSE )
    FOREACH(suffix "include" "include/suitesparse")
       IF( EXISTS "${brew_prefix}/${suffix}/cholmod.h" )
          MESSAGE(STATUS "Using ${brew_prefix}/${suffix}/cholmod.h" )
@@ -220,13 +242,17 @@ IF( NOT "${brew_prefix}" STREQUAL "" )
          SET(suitesparse_suffix "${suffix}")
       ENDIF( EXISTS "${brew_prefix}/${suffix}/cholmod.h" )
    ENDFOREACH(suffix "include" "include/suitesparse")
-ENDIF( NOT ( "${brew_prefix}" STREQUAL "" ) )
+ENDIF( )
+IF( NOT cmake_search_prefix )
+   SET(cmake_search_prefix "" )
+ENDIF( NOT cmake_search_prefix )
 FOREACH(prefix
    /usr
    /usr/local
    /opt/local
    /usr/local/opt/suitesparse
    ${cmake_install_prefix}
+   ${cmake_search_prefix}
 )
    FOREACH(suffix "include" "include/suitesparse")
       IF( EXISTS "${prefix}/${suffix}/cholmod.h" )
@@ -263,7 +289,7 @@ ELSE( ${suitesparse_suffix} STREQUAL "include" )
    SET(suitesparse_INCLUDE_DIRS  "${suitesparse_prefix}/include/suitesparse" )
 ENDIF( ${suitesparse_suffix} STREQUAL "include" )
 #
-# set suitesparse_LIBRARIES
+# suitesparse_LIBRARIES
 SET(suitesparse_LIBRARIES
    "cholmod;amd;camd;colamd;ccolamd;suitesparseconfig"
 )
@@ -271,22 +297,18 @@ SET(suitesparse_LIBRARIES
 # suitesparse_LIBRARY_DIRS
 SET(suitesparse_LIBRARY_DIRS "NOTFOUND")
 FOREACH(suffix "lib" "lib64" "${cmake_libdir}" )
-   SET(both "${suitesparse_prefix}/${suffix}")
-   SET(globbing_expression "${both}/libcholmod.*")
-   FILE(GLOB match_1 ${globbing_expression})
-   IF( match_1 )
-      SET(suitesparse_LIBRARY_DIRS "${both}")
-   ELSE( match_1 )
-      SET(globbing_expression "${both}/*/libcholmod.*")
-      FILE(GLOB match_2 ${globbing_expression})
-      IF( match_2 )
-         SET(suitesparse_LIBRARY_DIRS "${both}")
-      ENDIF( match_2 )
-   ENDIF( match_1 )
+   SET(libdir "${suitesparse_prefix}/${suffix}")
+   FOREACH(name "libcholmod" "cholmod")
+      SET(globbing_expression "${libdir}/${name}.*")
+      FILE(GLOB match_1 ${globbing_expression})
+      IF( match_1 )
+         SET(suitesparse_LIBRARY_DIRS "${libdir}")
+      ENDIF( match_1 )
+   ENDFOREACH(name "libcholmod" "cholmod")
 ENDFOREACH(suffix "lib" "lib64" "${cmake_libdir}" )
 IF( NOT suitesparse_LIBRARY_DIRS )
    MESSAGE(FATAL_ERROR
-      "Cannot find libcholmod.* in ${suitesparse_prefix}/libdir"
+      "Cannot find cholmod library in ${suitesparse_prefix}/libdir"
       " where libdir is lib, lib64, or cmake_libdir"
    )
 ENDIF( NOT suitesparse_LIBRARY_DIRS )
