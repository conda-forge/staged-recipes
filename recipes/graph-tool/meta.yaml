# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Jinja variables help maintain the recipe as you'll update the version only here.
{% set name = "graph-tool" %}
{% set version = "2.18" %}
{% set sha256 = "3aa8a8a30480ac4351a52c4aa517714384607d4a9cb04d6b9b34a215462c14dd" %}
# sha256 is the prefered checksum -- you can get it for a file with:
#  `openssl sha256 <file name>`.
# You may need the openssl package, available on conda-forge
#  `conda install openssl -c conda-forge``

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  fn: release-{{ version }}.tar.gz
  url: https://github.com/count0/graph-tool/archive/release-{{ version }}.tar.gz
  sha256: {{ sha256 }}

build:
  number: 0
  skip: true  # [win]

requirements:
  build:
    - python
    # When setuptools is available add the `--single-version-externally-managed --record record.txt` above.
    - setuptools
    - numpy
    - scipy
    - matplotlib
    - bzip2
    - zlib
    - expat >=2.1.0
    - graphviz
    - cairo
    - cairomm
    - fontconfig
    - boost >=1.58
    - cgal
    - mpfr
    - gmp
    - toolchain
  run:
    - python

test:
  # Some package might need a `test/commands` key to check CLI.
  imports:
    - graph_tool.all

about:
  home: http://graph-tool.skewed.de/

  # Remember to specify the license variants for BSD, Apache, GPL, and LGLP.
  # Prefer the short version, e.g: GPL-2.0 instead of GNU General Public License version 2.0
  # See https://opensource.org/licenses/alphabetical
  license: GPLv3

  summary: '"Graph-tool is an efficient Python module for manipulation and statistical analysis of graphs (a.k.a. networks).'

  # The remaining entries in this section are optional, but recommended
  description: |
    Graph-tool is an efficient Python module for manipulation and statistical
    analysis of graphs (a.k.a. networks). Contrary to most other python modules
    with similar functionality, the core data structures and algorithms are implemented
    in C++, making extensive use of template metaprogramming,
    based heavily on the Boost Graph Library.
    This confers it a level of performance that is comparable
    (both in memory usage and computation time) to that of a pure C/C++ library.
  doc_url: https://graph-tool.skewed.de/static/doc/index.html

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - vgauthier
