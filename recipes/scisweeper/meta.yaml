{% set name = "scisweeper" %}
{% set version = "0.0.2" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: ea377b2f5c4de74dddeb824c7b87aae5e1ee376c9e5392f2b8b42d42cb0df2a1

build:
  number: 0
  script: "{{ PYTHON }} -m pip install . -vv"
  noarch: python

requirements:
  host:
    - python
    - pip
  run:
    - python
    - numpy
    - pandas
    - pysqa >=0.0.3
    - h5io
    - pyfileindex
    - tqdm

test:
  imports:
    - scisweeper

about:
  home: https://github.com/scisweeper/scisweeper
  license: BSD-3-Clause
  license_family: BSD
  license_file: LICENSE
  summary: 'scientific parameter sweeper, with easy debugging capabilities and an interface for most scientific queuing systems.'

  description: |
    scisweeper is a utility for parameter sweeps in a scientific environment. 
    By defining the write_input and collect_output function, as well as a 
    link to the executable the users can link scisweeper to their own code. 
    Afterwards scisweeper can execute the parameter sweep either locally 
    using a given number of parallel threads or submit the individual 
    calculations to a queuing system like LFS, MOAB, SGE, SLURM, or TORQUE 
    using the built-in interface to pysqa. After the calculations are 
    finished the results are summarized in a pandas.DataFrame, which makes 
    them easily accessible for machine learning tools like tensorflow or 
    pytorch. Coming from a scientific environment scisweeper was develop 
    with a focus on debugging. Broken jobs can be identified, executed again 
    manually or deleted and in case you need to update the collect_output 
    function there is no need to execute the calculations again, the output 
    can be parsed separatly to update the results in the pandas.DataFrame.
  doc_url: https://github.com/scisweeper/scisweeper
  dev_url: https://github.com/scisweeper/scisweeper

extra:
  recipe-maintainers:
    - jan-janssen
