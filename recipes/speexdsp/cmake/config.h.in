/* config.h.in - CMake configuration header template for SpeexDSP */

#ifndef CONFIG_H
#define CONFIG_H

/* Version information */
#define PACKAGE_VERSION "@PROJECT_VERSION@"
#define VERSION "@PROJECT_VERSION@"
#define PACKAGE_NAME "@PROJECT_NAME@"
#define PACKAGE_STRING "@PROJECT_NAME@ @PROJECT_VERSION@"

/* Build configuration */
#cmakedefine FLOATING_POINT
#cmakedefine FIXED_POINT
#cmakedefine DISABLE_FLOAT_API
#cmakedefine DISABLE_VBR
#cmakedefine USE_SSE
#cmakedefine _USE_SSE
#cmakedefine USE_NEON

/* Platform-specific definitions */
#ifdef _WIN32
    #define HAVE_ALLOCA 1
    #define USE_ALLOCA 1
    /* EXPORT is defined by CMake to avoid linkage conflicts */
    #ifndef EXPORT
        #define EXPORT
    #endif
#else
    #cmakedefine HAVE_ALLOCA_H
    #cmakedefine HAVE_ALLOCA
    #cmakedefine USE_ALLOCA
    #define EXPORT
#endif

/* Math functions */
#ifdef _WIN32
    #include <math.h>
    #ifndef M_PI
        #define M_PI 3.14159265358979323846
    #endif
#endif

/* Compiler and system features */
#define HAVE_STDINT_H 1
#define HAVE_INTTYPES_H 1
#cmakedefine HAVE_MEMORY_H
#define HAVE_STDLIB_H 1
#define HAVE_STRING_H 1
#cmakedefine HAVE_STRINGS_H
#cmakedefine HAVE_SYS_STAT_H
#cmakedefine HAVE_SYS_TYPES_H
#cmakedefine HAVE_UNISTD_H

/* Variable length arrays */
#ifdef _MSC_VER
    /* MSVC doesn't support C99 VLA, could use alloca instead */
    /* not defining VAR_ARRAYS, lets code fall back to fixed arrays */
    #undef VAR_ARRAYS
    #define USE_ALLOCA 1
    #include <malloc.h>
    #define ALLOC(var, size, type) type *var = (type*)_alloca(sizeof(type)*(size))
#else
    /* Use VLA on non-MSVC compilers that support it */
    #define VAR_ARRAYS 1
    #define ALLOC(var, size, type) type var[size]
#endif

/* FFT implementation - use KissFFT (built-in) */
#define USE_KISS_FFT 1
#define HAVE_KISS_FFT 1

/* Small FFT implementation (alternative to KissFFT) */
/* #undef USE_SMALLFT */

/* Endianness */
#cmakedefine WORDS_BIGENDIAN

/* Define to 1 if you have the <dlfcn.h> header file. */
#cmakedefine HAVE_DLFCN_H

/* Define to the sub-directory where libtool stores uninstalled libraries. */
#define LT_OBJDIR ".libs/"

/* Name of package */
#define PACKAGE "speexdsp"

/* Define to the address where bug reports for this package should be sent. */
#define PACKAGE_BUGREPORT "speex-dev@xiph.org"

/* Define to the full name of this package. */
#define PACKAGE_NAME "speexdsp"

/* Define to the full name and version of this package. */
#define PACKAGE_STRING "speexdsp @PROJECT_VERSION@"

/* Define to the one symbol short name of this package. */
#define PACKAGE_TARNAME "speexdsp"

/* Define to the home page for this package. */
#define PACKAGE_URL ""

/* Define to the version of this package. */
#define PACKAGE_VERSION "@PROJECT_VERSION@"

/* The size of `int', as computed by sizeof. */
#define SIZEOF_INT 4

/* The size of `long', as computed by sizeof. */
#ifdef _WIN64
    #define SIZEOF_LONG 4
    #define SIZEOF_LONG_LONG 8
#else
    #define SIZEOF_LONG 4
    #define SIZEOF_LONG_LONG 8
#endif

/* The size of `short', as computed by sizeof. */
#define SIZEOF_SHORT 2

/* Define to 1 if you have the ANSI C header files. */
#define STDC_HEADERS 1

/* Version number of package */
#define VERSION "@PROJECT_VERSION@"

/* Define to __typeof__ if your compiler spells it that way. */
#ifndef _MSC_VER
    #define typeof __typeof__
#endif

/* Define to empty if `const' does not conform to ANSI C. */
/* #undef const */

/* Define to `__inline__' or `__inline' if that's what the C compiler
   calls it, or to nothing if 'inline' is not supported under any name.  */
#ifdef _MSC_VER
    #define inline __inline
#endif

/* Define to equivalent of C99 restrict keyword, or to nothing if this is not
   supported.  Do not define if restrict is supported directly.  */
#ifdef _MSC_VER
    #define restrict __restrict
#endif

/* Define to `unsigned int' if <sys/types.h> does not define. */
/* #undef size_t */

#endif /* CONFIG_H */
