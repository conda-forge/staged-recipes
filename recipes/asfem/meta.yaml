# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Jinja variables help maintain the recipe as you'll update the version only here.
# Using the name variable with the URL in line 14 is convenient
# when copying and pasting from another recipe, but not really needed.
{% set name = "AsFem" %}
{% set version = "0.6" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  #url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  url: https://github.com/yangbai90/AsFem/archive/refs/tags/v0.5.tar.gz
  sha256: e2096d7e84440fcbcb0443599b88d0c127a17d471d2151f9fb7cc8b10e94e949

build:
  # Uncomment the following line if the package is pure Python and the recipe is exactly the same for all platforms.
  # It is okay if the dependencies are not built for all platforms/versions, although selectors are still not allowed.
  # See https://conda-forge.org/docs/maintainer/knowledge_base.html#noarch-python for more details.
  # noarch: python
  number: 0
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  script: "{{ PYTHON }} -m pip install . -vv"

requirements:
  build:
    # If your project compiles code (such as a C extension) then add the required compilers as separate entries here.
    # Compilers are named 'c', 'cxx' and 'fortran'.
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('fortran') }}
    - libgomp  # [linux]
    - make
    - cmake
  host:
    - python
    - numpy
    - pip
    - petsc
    - {{ mpi }}
  run:
    - python
    - numpy
    - {{ mpi }}
    - petsc

test:
  # Some packages might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  # imports:
  #   - simplejson
  #   - simplejson.tests
  # For python packages, it is useful to run pip check. However, sometimes the
  # metadata used by pip is out of date. Thus this section is optional if it is
  # failing.
  requires:
    - pip
  commands:
    - pip check
    - asfem

about:
  home: https://github.com/yangbai90/AsFem
  # Remember to specify the license variants for BSD, Apache, GPL, and LGPL.
  # Use the SPDX identifier, e.g: GPL-2.0-only instead of GNU General Public License version 2.0
  # See https://spdx.org/licenses/
  license: GPL-3.0 License
  # The license_family, i.e. "BSD" if license is "BSD-3-Clause". (optional)
  license_family: GPL-3.0 License
  # It is strongly encouraged to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # See https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#license-file
  license_file: LICENSE.txt
  summary: 'A simple finite element method program'
  # The remaining entries in this section are optional, but recommended.
  description: |
    A simple finite element method program, which is short for AsFem.
    AsFem is written in C++ and designed for phase-field modeling and multiphysics coupling.
    The PETSc library is involved in AsFem for the efficient computing.
  doc_url: https://yangbai90.github.io/AsFem/
  dev_url: https://github.com/yangbai90/AsFem

extra:
  recipe-maintainers:
    - yangbai90
