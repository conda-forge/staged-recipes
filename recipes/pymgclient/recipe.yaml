context:
  name: pymgclient
  version: "1.4.0"

package:
  name: ${{ name|lower }}
  version: ${{ version }}

source:
  url: https://github.com/memgraph/pymgclient/archive/refs/tags/v${{ version }}.tar.gz
  sha256: fc98ccc306fbb61f60c7232a3db9ad0b821947a213c36473679037a607a2b799
  patches:
    - update-setup.py.patch

build:
  script:
    - if: unix
      then: |
        cp ${RECIPE_DIR}/build_mgclient_with_conda_lib_ext.py ${SRC_DIR}
        rm ${SRC_DIR}/setup.cfg
        python -m pip install . -vv --no-build-isolation
      else: |
        copy %RECIPE_DIR%\build_mgclient_with_conda_lib_ext.py %SRC_DIR%
        rm %SRC_DIR%\setup.cfg
        REM Debug: Find gcc anywhere in BUILD_PREFIX
        echo "=== Searching for GCC ==="
        dir /s /b "%BUILD_PREFIX%\*gcc*.exe" 2>nul || echo "No gcc.exe found in BUILD_PREFIX"

        REM Also check PREFIX
        dir /s /b "%PREFIX%\*gcc*.exe" 2>nul || echo "No gcc.exe found in PREFIX"

        REM Check conda environment
        echo "=== Conda packages ==="
        conda list | findstr gcc

        REM Look for cross-compiler names (common in conda-forge)
        if exist "%BUILD_PREFIX%\bin\x86_64-w64-mingw32-gcc.exe" (
            echo "Found cross-compiler gcc"
            set "CC=%BUILD_PREFIX%\bin\x86_64-w64-mingw32-gcc.exe"
            set "CXX=%BUILD_PREFIX%\bin\x86_64-w64-mingw32-g++.exe"
        ) else (
            REM Search for any gcc-like executable
            for /f "delims=" %%i in ('dir /s /b "%BUILD_PREFIX%\*gcc*.exe" 2^>nul ^| findstr /v "lib"') do (
                echo "Found potential gcc: %%i"
                set "CC=%%i"
                set "CXX=%%i"
                goto :found_gcc
            )

            echo "ERROR: No GCC executable found"
            exit /b 1
        )

        :found_gcc
        echo "=== Using GCC ==="
        echo "CC=%CC%"
        echo "CXX=%CXX%"

        REM Test gcc
        "%CC%" --version || (echo "ERROR: GCC test failed" && exit /b 1)

        REM Force distutils to use gcc
        set DISTUTILS_USE_SDK=1

        python -m pip install . -vv --no-build-isolation
  number: 0

requirements:
  build:
    - if: unix
      then:
        - ${{ compiler('c') }}
      else:
        - ${{ compiler('m2w64_c') }}
    - ${{ stdlib('c') }}
  host:
    - mgclient
    - pip
    - python
    - setuptools
  run:
    - mgclient
    - networkx
    - pyopenssl
    - python

tests:
  - python:
      imports:
        - mgclient
      pip_check: true

  - script: |
      pytest test/test_connection.py::test_connect_args_validation
      pytest test/test_types.py::test_node
      pytest test/test_types.py::test_relationship
      pytest test/test_types.py::test_path
    files:
      source: test
    requirements:
      run:
        - pytest
        - python

about:
  homepage: https://github.com/memgraph/pymgclient
  summary: 'Python Memgraph Client'
  description: |
    pymgclient is a Memgraph database adapter for Python programming
    language compliant with the DB-API 2.0 specification described by PEP 249.

    mgclient module is the current implementation of the adapter. It is
    implemented in C as a wrapper around mgclient, the official Memgraph
    client library. As a C extension, it is only compatible with the CPython
    implementation of the Python programming language.
  license: Apache-2.0
  license_file: LICENSE
  documentation: https://memgraph.github.io/pymgclient/
  repository: https://github.com/memgraph/pymgclient

extra:
  recipe-maintainers:
    - MementoRC
