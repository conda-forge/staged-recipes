--- a/setup.py
+++ b/setup.py
@@ -14,6 +14,17 @@

 import os
+import sys
 import platform
+import subprocess
+
+# Ensure gcc is in PATH on Windows
+if sys.platform == "win32":
+    try:
+        subprocess.check_call(['gcc', '--version'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
+        print("DEBUG: GCC found in PATH")
+    except:
+        print("DEBUG: GCC not found in PATH - this will fail")
+        # You might need to add conda's mingw to PATH here
+
 import shutil
 import sys
@@ -26,2 +26,37 @@
 from setuptools.command.build_ext import build_ext
+from build_mgclient_with_conda_lib_ext import build_mgclient_with_conda_lib_ext
+
+class GccBuildExt(build_ext):
+    def build_extensions(self):
+        # Force mingw32 compiler on Windows
+        if sys.platform == "win32":
+            print("DEBUG: Forcing mingw32 compiler object creation")
+            from distutils.cygwinccompiler import Mingw32CCompiler
+            from distutils.unixccompiler import UnixCCompiler
+
+            # Replace the compiler object entirely
+            self.compiler = Mingw32CCompiler()
+            self.compiler.set_executable('compiler_so', 'gcc')
+            self.compiler.set_executable('compiler_cxx', 'g++')
+            self.compiler.set_executable('linker_so', 'gcc -shared')
+            print(f"DEBUG: Compiler object: {type(self.compiler)}")
+
+        super().build_extensions()

@@ -316,3 +351,3 @@
     ext_modules=[
-        Extension(EXTENSION_NAME, sources=sources, depends=headers, extra_link_args=extra_link_args)
+        build_mgclient_with_conda_lib_ext()
     ],
@@ -322,3 +357,2 @@
     },
-    cmdclass={"build_ext": BuildMgclientExt},
+    cmdclass={"build_ext": GccBuildExt},
     install_requires=[
