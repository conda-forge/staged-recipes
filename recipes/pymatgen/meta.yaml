# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Jinja variables help maintain the recipe as you'll update the version only here.
{% set name = "pymatgen" %}
{% set version = "4.5.2" %}
{% set sha256 = "d5cf9ed832972c9c0de2cc1d3e2fff0ed71d8a8ad6f538118dd0680d933f9618" %}
# sha256 is the prefered checksum -- you can get it for a file with:
#  `openssl sha256 <file name>`.
# You may need the openssl package, available on conda-forge
#  `conda install openssl -c conda-forge``

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  fn: {{ name }}-{{ version }}.tar.gz
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: {{ sha256 }}

build:
  number: 0
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for Python 2.7, 3.4, and above, for all major OSs.
  # Add the line "skip: True  # [py<34]" (for example) to limit to Python 3.4 and newer, or "skip: True  # [not win]" to limit to Windows.
  script: python setup.py install --single-version-externally-managed --record record.txt
  entry_points:
    - pmg = pymatgen.cli.pmg:main
    - feff_input_generation = pymatgen.cli.feff_input_generation:main
    - feff_plot_cross_section = pymatgen.cli.feff_plot_cross_section:main
    - feff_plot_dos = pymatgen.cli.feff_plot_dos:main
    - gaussian_analyzer = pymatgen.cli.gaussian_analyzer:main
    - get_environment = pymatgen.cli.get_environment:main
    - pydii = pymatgen.cli.pydii:main
requirements:
  build:
    - python
    - setuptools
    - numpy >=1.9
    - six
    - requests
    - pyyaml >=3.11
    - monty >=0.9.6
    - scipy >=0.14
    - pydispatcher >=2.0.5
    - tabulate
    - spglib >=1.9.8.7
    - matplotlib >=1.5
    - palettable >=2.1.1
    - enum34 #[py27]
    - toolchain
    # if your project compiles code (such as a C extension) then add `toolchain` as a build requirement.
  run:
    - python
    - numpy >=1.9
    - six
    - requests
    - pyyaml >=3.11
    - monty >=0.9.6
    - scipy >=0.14
    - pydispatcher >=2.0.5
    - tabulate
    - spglib >=1.9.8.7
    - matplotlib >=1.5
    - palettable >=2.1.1
    - enum34 #[py27]

test:
  # Some package might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  commands:
  - pmg --help
  - gaussian_analyzer --help
  imports:
  - pymatgen
  - pymatgen.alchemy
  - pymatgen.analysis
  - pymatgen.analysis.chemenv
  - pymatgen.analysis.chemenv.coordination_environments
  - pymatgen.analysis.chemenv.coordination_environments.coordination_geometries_files
  - pymatgen.analysis.chemenv.coordination_environments.strategy_files
  - pymatgen.analysis.chemenv.utils
  - pymatgen.analysis.cost
  - pymatgen.analysis.defects
  - pymatgen.analysis.diffraction
  - pymatgen.analysis.elasticity
  - pymatgen.analysis.hhi
  - pymatgen.analysis.pourbaix
  - pymatgen.apps
  - pymatgen.apps.battery
  - pymatgen.apps.borg
  - pymatgen.cli
  - pymatgen.command_line
  - pymatgen.core
  - pymatgen.electronic_structure
  - pymatgen.entries
  - pymatgen.io
  - pymatgen.io.abinit
  - pymatgen.io.feff
  - pymatgen.io.lammps
  - pymatgen.io.vasp
  - pymatgen.matproj
  - pymatgen.optimization
  - pymatgen.phasediagram
  - pymatgen.serializers
  - pymatgen.structure_prediction
  - pymatgen.symmetry
  - pymatgen.transformations
  - pymatgen.util
  - pymatgen.vis

about:
  home: http://www.pymatgen.org
  # Remember to specify the license variants for BSD, Apache, GPL, and LGLP.
  # Prefer the short version, e.g: GPL-2.0 instead of GNU General Public License version 2.0
  # See https://opensource.org/licenses/alphabetical
  license: MIT
  # The license_family, i.e. "BSD" if license is "BSD-3-Clause". (optional)
  license_family: MIT
  # It is strongly encouraged to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # See http://conda.pydata.org/docs/building/meta-yaml.html#license-file
  license_file: LICENSE.rst
  summary: 'Python Materials Genomics is an analysis code for materials science.'

  # The remaining entries in this section are optional, but recommended
  description: |
    Python Materials Genomics is a robust materials analysis code that defines
    core object representations for structures and molecules with support for many
    electronic structure codes. It is currently the core analysis code powering the
    Materials Project (https://www.materialsproject.org).
  doc_url: http://www.pymatgen.org
  dev_url: https://github.com/materialsproject/pymatgen

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - shyuep
