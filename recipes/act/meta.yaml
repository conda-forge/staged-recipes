{% set name = "act" %}
{% set version = "0.2.63" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/nektos/act/archive/refs/tags/v{{ version }}.tar.gz
  sha256: 67832789cac6d66cf164c31f2d884cccca1343ae07a208f8152fa861f03de5a3

build:
  number: 0

requirements:
  build:
    - {{ compiler('go') }}
    - make
    - go-licenses

# test:
  # # Some packages might need a `test/commands` key to check CLI.
  # # List all the packages/modules that `run_test.py` imports.
  # imports:
  #   - simplejson
  #   - simplejson.tests
  # # For python packages, it is useful to run pip check. However, sometimes the
  # # metadata used by pip is out of date. Thus this section is optional if it is
  # # failing.
  # requires:
  #   - pip
  # commands:
  #   - pip check

about:
  home: https://nektosact.com
  summary: 'Run your GitHub Actions locally!'
  description: |
    Run your GitHub Actions locally! Why would you want to do this? Two reasons:
    - Fast Feedback - Rather than having to commit/push every time you want to test out
      the changes you are making to your .github/workflows/ files (or for any changes to
      embedded GitHub actions), you can use act to run the actions locally. The environment
      variables and filesystem are all configured to match what GitHub provides.
    - Local Task Runner - I love make. However, I also hate repeating myself. With act, you
      can use the GitHub Actions defined in your .github/workflows/ to replace your Makefile!
  license: MIT
  license_family: MIT
  license_file: LICENSE
  doc_url: https://nektosact.com
  dev_url: https://github.com/nektos/act

extra:
  recipe-maintainers:
    - zklaus
