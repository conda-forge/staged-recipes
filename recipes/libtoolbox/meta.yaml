{% set version = "3.4.0" %}

{% set so_major_version = version.split('.')[0] %}

{% set toolbox_h = [
  "collections.h", "data.hpp", "io.h", "log.h", "strings.hpp",
  "term.h", "time_profiler.h", "toolbox_config.h",
] %}
{% set data_h = [
"base64.h", "bytes_data.h", "literals.h", "bytes_array.h", "transformers.h",
"bytes_buffer.h", "utils.h", "basic_data.h",
] %}
{% set strings_h = ["decimal_formatter.h", "regex.h"] %}
{% set toolbox_header_paths = {
  'toolbox': toolbox_h,
  'toolbox/strings': strings_h,
  'toolbox/data': data_h
} %}

package:
  name: libtoolbox-split
  version: {{ version }}

source:
  url: https://github.com/edwardstock/toolbox/archive/refs/tags/{{ version }}.tar.gz
  sha256: 7f9cc4fd67c952cf143a74dd516a971c5bf8c85e66efc3830676758fddf48853
  patches:
    - patches/0001-add-so-version.patch

build:
  number: 0

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ stdlib('c') }}
    - cmake
    - ninja

outputs:
  - name: libtoolbox
    build:
      run_exports:
        - {{ pin_subpackage('libtoolbox-' ~ so_major_version) }}
    files:
      # Core Headers
      {% for path, headers in toolbox_header_paths.items() %}
        {% for header in headers %}
      - include/{{ path }}/{{ header }}  # [unix]
      - Library\\include\\{{ path | replace('/', '\\\\') }}\\{{ header }}  # [win]
        {% endfor %}
      {% endfor %}

      # Libraries
      - lib/libtoolbox.so  # [linux]
      - lib/libtoolbox.dylib  # [osx]
      - Library\\lib\\toolbox.lib  # [win]
      - Library\\lib\\toolbox.{{ so_major_version }}.lib  # [win]
      - Library\\bin\\toolbox.dll  # [win]

      # Configuration files
      - lib/pkgconfig/toolbox.pc  # [unix]
      - Library\\lib\\pkgconfig\\toolbox.pc  # [win]

      {% set toolbox_cmake = [
        "toolbox-config.cmake", "toolbox-config-version.cmake",
        "toolbox-targets.cmake", "toolbox-targets-release.cmake"
      ] %}
      {% for cmake in toolbox_cmake %}
      - lib/cmake/toolbox/{{ cmake }}  # [unix]
      - Library\\lib\\cmake\\toolbox\\{{ cmake }}  # [win]
      - toolbox\\cmake\\{{ cmake }}  # [win]
      {% endfor %}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ stdlib('c') }}
      host:
        - {{ pin_subpackage('libtoolbox-' ~ so_major_version, exact=True) }}
      run:
        - {{ pin_subpackage('libtoolbox-' ~ so_major_version, exact=True) }}
    test:
      files:
        - tests/
      source_files:
        - test-release
      requires:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
        - pkg-config
      commands:
        # Core Headers
        {% for path, headers in toolbox_header_paths.items() %}
          {% for header in headers %}
        - test -f ${PREFIX}/include/{{ path }}/{{ header }}  # [unix]
        - if not exist %PREFIX%\\Library\\include\\{{ path | replace('/', '\\\\') }}\\{{ header }} exit 1  # [win]
          {% endfor %}
        {% endfor %}

        # Libraries
        - test -f ${PREFIX}/lib/libtoolbox${SHLIB_EXT}  # [unix]
        - if not exist %PREFIX%\\Library\\bin\\toolbox%SHLIB_EXT% exit 1  # [win]
        - if not exist %PREFIX%\\Library\\lib\\toolbox.lib exit 1  # [win]
        - if not exist %PREFIX%\\Library\\lib\\toolbox.{{ so_major_version }}.lib exit 1  # [win]

        # Configuration files
        - test -f ${PREFIX}/lib/pkgconfig/toolbox.pc  # [unix]
        - if not exist %PREFIX%\\Library\\lib\\pkgconfig\\toolbox.pc exit 1  # [win]
        - set "PKG_CONFIG_PATH=%PREFIX%\\Library\\lib\\pkgconfig"  # [win]
        - pkg-config --cflags --libs toolbox

        {% set toolbox_cmake = [
          "toolbox-config.cmake", "toolbox-config-version.cmake",
          "toolbox-targets.cmake", "toolbox-targets-release.cmake"
        ] %}
        {% for cmake in toolbox_cmake %}
        - test -f ${PREFIX}/lib/cmake/toolbox/{{ cmake }}  # [unix]
        - if not exist %PREFIX%\\Library\\lib\\cmake\\toolbox\\{{ cmake }} exit 1  # [win]
        - if not exist %PREFIX%\\toolbox\\cmake\\{{ cmake }} exit 1  # [win]
        {% endfor %}
        - cd tests && cmake . -G Ninja && cd ..
        - if [ $? -ne 0 ]; then exit 1; fi  # [unix]
        - if %ERRORLEVEL% NEQ 0 exit 1  # [win]

        # Key testing phase: This test needs both libbtoolbox.so.x and libctoolbox.so.x
        - (cd test-release && LD_PRELOAD="${PREFIX}/lib/libtoolbox.so.{{ so_major_version }}:${PREFIX}/lib/libgcc_s.so.1:${PREFIX}/lib/libstdc++.so.6" ./bin/toolbox-test)  # [linux]
        - (cd test-release && DYLD_INSERT_LIBRARIES="${PREFIX}/lib/libtoolbox.3.dylib" ./bin/toolbox-test)  # [osx]
        - cd test-release\\bin  # [win]
        - toolbox-test.exe  # [win]

  - name: libtoolbox-{{ so_major_version }}
    build:
      run_exports:
        - {{ pin_subpackage('libtoolbox-' ~ so_major_version) }}
    files:
      - lib/libtoolbox.so.{{ so_major_version }}  # [linux]
      - lib/libtoolbox.{{ so_major_version }}.dylib  # [osx]
      - Library\\bin\\toolbox.{{ so_major_version }}.dll  # [win]
      - lib/libtoolbox.so.{{ version }}  # [linux]
      - lib/libtoolbox.{{ version }}.dylib  # [osx]
      - Library\\bin\\toolbox.{{ version }}.dll  # [win]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ stdlib("c") }}
    test:
      source_files:
        - test-release
      commands:
        # No headers (verify no potential overlap)
        {% for path, headers in toolbox_header_paths.items() %}
          {% for header in headers %}
        - test ! -f ${PREFIX}/include/{{ path }}/{{ header }}  # [unix]
        - if exist %PREFIX%\\Library\\include\\{{ path | replace('/', '\\\\') }}\\{{ header }} exit 1  # [win]
          {% endfor %}
        {% endfor %}

        # Versioned toolbox library
        - test -f ${PREFIX}/lib/libtoolbox${SHLIB_EXT}.{{ so_major_version }}  # [linux]
        - test -f ${PREFIX}/lib/libtoolbox.{{ so_major_version }}${SHLIB_EXT}  # [osx]
        - if not exist %PREFIX%\\Library\\bin\\toolbox.{{ so_major_version }}%SHLIB_EXT% exit 1  # [win]
        - test -f ${PREFIX}/lib/libtoolbox${SHLIB_EXT}.{{ version }}  # [linux]
        - test -f ${PREFIX}/lib/libtoolbox.{{ version }}${SHLIB_EXT}  # [osx]
        - if not exist %PREFIX%\\Library\\bin\\toolbox.{{ version }}%SHLIB_EXT% exit 1  # [win]

        # No non-versioned library
        - test ! -f ${PREFIX}/lib/libtoolbox${SHLIB_EXT}  # [unix]
        - if exist %PREFIX%\\Library\\bin\\toolbox%SHLIB_EXT% exit 1  # [win]
        - if exist %PREFIX%\\Library\\lib\\toolbox.lib exit 1  # [win]

        # Key testing phase: This test needs both libbtoolbox.so.x and libctoolbox.so.x
        - (cd test-release && LD_PRELOAD="${PREFIX}/lib/libtoolbox.so.{{ so_major_version }}:${PREFIX}/lib/libgcc_s.so.1:${PREFIX}/lib/libstdc++.so.6" ./bin/toolbox-test)  # [linux]
        - (cd test-release && DYLD_INSERT_LIBRARIES="${PREFIX}/lib/libtoolbox.3.dylib" ./bin/toolbox-test)  # [osx]
        - cd test-release\\bin  # [win]
        - toolbox-test.exe  # [win]

  # Naming conversion (upstream github repo is called toolbox)
  - name: toolbox
    build:
      run_exports:
        - {{ pin_subpackage('libtoolbox-' ~ so_major_version) }}
    requirements:
      host:
        - {{ pin_subpackage('libtoolbox', exact=True) }}
      run:
        - {{ pin_subpackage('libtoolbox', exact=True) }}
    test:
      commands:
        - test -f ${PREFIX}/lib/libtoolbox${SHLIB_EXT}  # [unix]
        - if not exist %PREFIX%\\Library\\bin\\toolbox%SHLIB_EXT% exit 1  # [win]
        - if not exist %PREFIX%\\Library\\lib\\toolbox.lib exit 1  # [win]

about:
  home: https://github.com/edwardstock/toolbox
  summary: 'ToolBox++ - C++ helpers, especially for string and bytes handling'
  description: |
    Usage and features
      toolbox::strings - strings helpers like bool hasNum = matches_pattern("[0-9]", "my194string"")
      toolbox::io - filesystem helpers
      toolbox::collections - collections helpers
      toolbox::data - bytes buffer helpers
      toolbox::term - confirm or prompt for your CLI app
      toolbox::tlog - simple thread-safe logger
  license: MIT
  license_file: LICENSE

extra:
  recipe-maintainers:
    - MementoRC
  feedstock-name: libtoolbox
