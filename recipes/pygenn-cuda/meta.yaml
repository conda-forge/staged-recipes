{% set name = "pygenn-cuda" %}
{% set version = "5.3.0" %}

package:
  name: {{ name }}
  version: {{ version }}

source:
  url: https://github.com/genn-team/genn/archive/refs/tags/5.3.0_RC1.tar.gz
  sha256: f1a6807d15f99d91732cd2484727100e54c39b055bcbe2126e7792d07c776fe3

build:
  number: 0
  skip: true  # [not (linux64 or win)]
  string: "py{{ PY_VER | replace('.', '') }}_cuda{{ cuda_version | replace('.', '') }}_{{ PKG_BUILDNUM }}"
  script: |
    {% if win %}
    :: Point GeNN at Conda's modular CUDA.
    set "CUDA_PATH=%BUILD_PREFIX%\Library"
    :: Let MSBuild projects (for libgenn/backends) link against modular CUDA without the VS CUDA plugin
    set "CUDA_LIBRARY_PATH=%BUILD_PREFIX%\Library\lib"
    :: Make sure modular CUDA headers/libs and DLLs are discoverable during build
    set "INCLUDE=%BUILD_PREFIX%\Library\include;%INCLUDE%"
    set "LIB=%BUILD_PREFIX%\Library\lib;%LIB%"
    set "PATH=%BUILD_PREFIX%\Library\bin;%PATH%"
    "%PYTHON%" setup.py install --single-version-externally-managed --record=record.txt
    {% else %}
    # --- Linux (Conda modular CUDA, POSIX layout) ---
    export CUDA_PATH="${BUILD_PREFIX}"
    export PATH="${BUILD_PREFIX}/bin:${PATH}"
    $PYTHON setup.py install --single-version-externally-managed --record=record.txt
    {% endif %}
  missing_dso_whitelist:
    - $RPATH/libcuda.so.1                     # Provided by NVIDIA driver at runtime, (Linux driver lib)
    - $RPATH/nvcuda.dll                       # Provided by NVIDIA driver at runtime (Windows driver lib)
    # --- GeNN private DLLs (bundled with PyGeNN) ---
    - $RPATH/genn_Release_DLL.dll                 # GeNN core runtime
    - $RPATH/libffi_Release_DLL.dll               # Private libffi runtime
    - $RPATH/genn_single_threaded_cpu_backend_Release_DLL.dll  # CPU backend, bundled
    - $RPATH/genn_cuda_backend_Release_DLL.dll    # CUDA backend, bundled  

requirements:
  build:
    - {{ stdlib("c") }}  # [linux] 
    - {{ compiler('cxx') }}
    - make  # [linux]
    - python
    - setuptools
    - pybind11
    - psutil
    - cuda-nvcc {{ cuda_nvcc }}
    - cuda-cudart-dev {{ cuda_cudart_dev }}
    - cuda-libraries-dev {{ cuda_libraries_dev }}
    - cuda-driver-dev {{ cuda_version }}  # [linux]
    - cuda-cccl {{ cuda_version }}                  

  host:
    - python
    - numpy 
    - setuptools
    - psutil
    - pybind11
    - cuda-cudart-dev {{ cuda_cudart_dev }}
    - cuda-driver-dev {{ cuda_version }}  # [linux]
    - cuda-cccl {{ cuda_version }}
    - libffi

  run:
    - python
    - numpy 
    - psutil
    - make  # [linux] 
    - {{ compiler('cxx') }}  # Required at runtime: PyGeNN JIT-compiles models via `make` + `g++`, so users need a C++ compiler in their environment. 
    - cuda-version =={{ cuda_version }}
    - cuda-nvcc {{ cuda_nvcc }}
    - cuda-cudart {{ cuda_cudart }}
    - cuda-libraries {{ cuda_libraries }}
    - cuda-libraries-dev {{ cuda_libraries_dev }} 
    - cuda-driver-dev {{ cuda_version }}  # [linux]
    - cuda-cccl {{ cuda_version }} 
    - libffi
    - importlib-metadata  # [py<38]
        
test:
  imports:
    - pygenn
  files:
    - tests/run_pygenn_cuda_smoketest.py
  commands:
    - python tests/run_pygenn_cuda_smoketest.py

about:
  home: https://github.com/genn-team/genn
  license: LGPL-2.1-or-later
  license_family: LGPL
  license_file: LICENSE
  summary: "GeNN Python bindings (pygenn) with CUDA backend support"
  description: |
    GeNN (GPU enhanced Neuronal Networks) is a code generation framework for
    accelerating spiking neural network simulations using GPUs.
    This package provides the Python bindings to use GeNN in Python.
  dev_url: https://github.com/genn-team/genn

extra:
  recipe-maintainers:
    - Agrim-P777
    - tnowotny
    - neworderofjamie
