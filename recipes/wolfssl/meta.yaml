{% set name = "wolfssl" %}
{% set version = "5.2.0" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/wolfSSL/wolfssl/archive/refs/tags/v{{ version }}-stable.tar.gz
  sha256: 409b4646c5f54f642de0e9f3544c3b83de7238134f5b1ff93fb44527bf119d05
  patches:
    - patches/0001-disable-ocsp.test-it-requires-ping.patch
    - patches/0002-add-enable-nolibrary-to-configure-to-enable-easy-tes.patch

build:
  number: 0
  run_exports:
    # https://abi-laboratory.pro/index.php?view=timeline&l=wolfssl
    - {{ pin_subpackage('wolfssl', max_pin='x.x') }}
requirements:
  build:
    # If your project compiles code (such as a C extension) then add the required compilers as separate entries here.
    # Compilers are named 'c', 'cxx' and 'fortran'.
    - {{ compiler('c') }}
    - make
    - autoconf  # [unix]
    - automake  # [unix]
    - libtool   # [unix]
    - cmake     # [win]
  host:
    - zlib # ?? CMakeLists.txt has a note about 

test:
  requires:
    - {{ compiler('c') }}  # [unix]
    - make                 # [unix]
    - autoconf             # [unix]
    - automake             # [unix]
    - libtool              # [unix]
    - patch                # [unix]
    - zlib                 # [unix]
    - pkg-config
  source_files:
    - '*'  # [unix] yes, I want it all. run_tests.sh runs distclean and then rebuilds with --enable-nolibrary to run tests on installed lib


about:
  home: https://www.wolfssl.com/products/wolfssl/
  license: GPL-2.0-or-later
  license_family: GPL
  license_file: 
      - COPYING
      - LICENSING
  summary: 'wolfSSL Embedded SSL/TLS Library'
  description: |
    The wolfSSL embedded SSL library (formerly CyaSSL) is a lightweight SSL/TLS library written in
    ANSI C and targeted for embedded, RTOS, and resource-constrained environments - primarily
    because of its small size, speed, and feature set. It is commonly used in standard operating
    environments as well because of its royalty-free pricing and excellent cross platform support.
    wolfSSL supports industry standards up to the current TLS 1.3 and DTLS 1.2, is up to 20 times
    smaller than OpenSSL, and offers progressive ciphers such as ChaCha20, Curve25519, Blake2b and
    Post-Quantum TLS 1.3 groups. User benchmarking and feedback reports dramatically better
    performance when using wolfSSL over OpenSSL.
  doc_url: https://www.wolfssl.com/docs/wolfssl-manual/
  dev_url: https://github.com/wolfSSL/wolfssl

extra:
  recipe-maintainers:
    - timsnyder
