{% set name = "pySLALIB" %}
{% set version = "1.0.4" %}
{% set hash_type = "sha256" %}
{% set hash_value = "21d0e1ae6fc73ade9c90ec9e956b2da33163383388cc84e5ec58994bf66c8b35" %}

package:
  name: '{{ name|lower }}'
  version: '{{ version }}'

source:
  git_url: https://github.com/scottransom/pyslalib
  fn: '{{ name }}-{{ version }}.tar.gz'
  url: https://files.pythonhosted.org/packages/3e/e1/e731f0b69d9145faa2aa321a82ff27d6da1d929ac02d7206ca5ae6ec23e3/{{ name }}-{{ version }}.tar.gz
  '{{ hash_type }}': '{{ hash_value }}'

build:
  number: 0
  script: 'python setup.py install '

requirements:
  build:
    - python
    - numpy
    - gcc
  run:
    - python

test:
  imports:
    - pyslalib
  requires:
    - numpy

about:
  home: https://github.com/scottransom/pyslalib
  license: GPL
  summary: f2py and numpy based wrappers for SLALIB
  description: "pySLALIB v1.0.2  (Dec 2010)\n---------------\n\nThis is archive contains new f2py-generated (and hand-tweaked to\neliminate unnecessary function/subroutine arguments) wrappers for the\n\
    Fortran version of P.T. Wallace's SLALIB positional astronomy library.\nSLALIB used to be hosted by the STARLINK site, although that service\nhas been suspended.  The version of SLALIB included here\
    \ is 2.5-4\n(with several additional tweaks) and is released under the GPL.\n\nThe python wrappers cover every function in SLALIB and a comprehensive\nset of unit tests are available in the test/ directory.\
    \  The only\nexternal dependency is numpy (http://numpy.scipy.org).  These wrappers\nare not related to the older (and apparently abandoned) pySLALIB that\nwas once available on the Web (and which depended\
    \ on Numeric as\nopposed to numpy).\n\nInstallation\n------------\nMost users will only need to do:\n  > python setup.py install\nto generate the wrappers, build, and install the library.\n\nOnce slalib.so\
    \ has been installed in your PYTHONPATH, you can run the\nunittests via:\n  > python test/test_slalib.py\n\nExample Usage (using IPython)\n-------------\nIn [1]: from pyslalib import slalib\n\nIn [2]:\
    \ slalib.sla_veri()\nOut[2]: 2005004\n\nIn [3]: slalib.sla_caldj(1999, 12, 31)\nOut[3]: (51543.0, 0)\n\nIn [4]: slalib.sla_etrms(1976.9)\nOut[4]: array([ -1.62161710e-06,  -3.31007009e-07,  -1.43529663e-07])\n\
    \nIn [5]: slalib.sla_fk45z(1.234, -0.123, 1984)\nOut[5]: (1.2446165107316911, -0.12141858395865548)\n\nIn [6]: slalib.sla_dafin(\"-00 03 34.6\", 1)\nOut[6]: (12, -0.0010404101596610642, 0)\n\nIn [7]:\
    \ slalib.sla_obs(0, \"GBT\")\nOut[7]:\n('GBT',\n 'Green Bank Telescope                    ',\n 1.3934679949996727,\n 0.67078450520692623,\n 880.0)\n\nIf you import \"sladoc\" you can print the original\
    \ Fortran doc\nstrings using something like:\n\nIn [1]: from pyslalib import slalib, sladoc\n\nIn [2]: print sladoc['sla_caldj']\n\"\"\"\n*     - - - - - -\n*      C A L D J\n*     - - - - - -\n*\n\
    *  Gregorian Calendar to Modified Julian Date\n*\n*  (Includes century default feature:  use sla_CLDJ for years\n*   before 100AD.)\n*\n*  Given:\n*     IY,IM,ID     int    year, month, day in Gregorian\
    \ calendar\n*\n...\n\nThanks go to Prasanth for adding the docstring capabilities!\n\nIf you would like to build a shared library for linking with other\nprograms, a simple Makefile is also included\
    \ that should work with\nonly minor tweaks for most Unix-like OSs.\n\nPlease let me know if you find any problems.\n\nScott\n\n----------------------------------\nScott M. Ransom <sransom@nrao.edu>\n\
    http://www.cv.nrao.edu/~sransom"

extra:
  recipe-maintainers: ickc
