diff --git a/LICENSE b/LICENSE
new file mode 100644
index 0000000..d159169
--- /dev/null
+++ b/LICENSE
@@ -0,0 +1,339 @@
+                    GNU GENERAL PUBLIC LICENSE
+                       Version 2, June 1991
+
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc.,
+ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it.  (Some other Free Software Foundation software is covered by
+the GNU Lesser General Public License instead.)  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must show them these terms so they know their
+rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary.  To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at all.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                    GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License applies to any program or other work which contains
+a notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License.  The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language.  (Hereinafter, translation is included without limitation in
+the term "modification".)  Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the
+Program (independent of having been made by running the Program).
+Whether that is true depends on what the Program does.
+
+  1. You may copy and distribute verbatim copies of the Program's
+source code as you receive it, in any medium, provided that you
+conspicuously and appropriately publish on each copy an appropriate
+copyright notice and disclaimer of warranty; keep intact all the
+notices that refer to this License and to the absence of any warranty;
+and give any other recipients of the Program a copy of this License
+along with the Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a fee.
+
+  2. You may modify your copy or copies of the Program or any portion
+of it, thus forming a work based on the Program, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) You must cause the modified files to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    b) You must cause any work that you distribute or publish, that in
+    whole or in part contains or is derived from the Program or any
+    part thereof, to be licensed as a whole at no charge to all third
+    parties under the terms of this License.
+
+    c) If the modified program normally reads commands interactively
+    when run, you must cause it, when started running for such
+    interactive use in the most ordinary way, to print or display an
+    announcement including an appropriate copyright notice and a
+    notice that there is no warranty (or else, saying that you provide
+    a warranty) and that users may redistribute the program under
+    these conditions, and telling the user how to view a copy of this
+    License.  (Exception: if the Program itself is interactive but
+    does not normally print such an announcement, your work based on
+    the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
+
+In addition, mere aggregation of another work not based on the Program
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+    a) Accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of Sections
+    1 and 2 above on a medium customarily used for software interchange; or,
+
+    b) Accompany it with a written offer, valid for at least three
+    years, to give any third party, for a charge no more than your
+    cost of physically performing source distribution, a complete
+    machine-readable copy of the corresponding source code, to be
+    distributed under the terms of Sections 1 and 2 above on a medium
+    customarily used for software interchange; or,
+
+    c) Accompany it with the information you received as to the offer
+    to distribute corresponding source code.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form with such
+    an offer, in accord with Subsection b above.)
+
+The source code for a work means the preferred form of the work for
+making modifications to it.  For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable.  However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License.  Any attempt
+otherwise to copy, modify, sublicense or distribute the Program is
+void, and will automatically terminate your rights under this License.
+However, parties who have received copies, or rights, from you under
+this License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+  5. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Program or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Program.
+
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded.  In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+  9. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of this License which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+this License, you may choose any version ever published by the Free Software
+Foundation.
+
+  10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+                            NO WARRANTY
+
+  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License along
+    with this program; if not, write to the Free Software Foundation, Inc.,
+    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+Also add information on how to contact you by electronic and paper mail.
+
+If the program is interactive, make it output a short notice like this
+when it starts in an interactive mode:
+
+    Gnomovision version 69, Copyright (C) year name of author
+    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, the commands you use may
+be called something other than `show w' and `show c'; they could even be
+mouse-clicks or menu items--whatever suits your program.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the program, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
+  `Gnomovision' (which makes passes at compilers) written by James Hacker.
+
+  <signature of Ty Coon>, 1 April 1989
+  Ty Coon, President of Vice
+
+This General Public License does not permit incorporating your program into
+proprietary programs.  If your program is a subroutine library, you may
+consider it more useful to permit linking proprietary applications with the
+library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.
diff --git a/cmake/FindEspresso.cmake b/cmake/FindEspresso.cmake
index 7cd0b0f..b8fcfca 100644
--- a/cmake/FindEspresso.cmake
+++ b/cmake/FindEspresso.cmake
@@ -58,9 +58,10 @@ foreach(libname qe_pw qe_pp qe_kssolver_dense qe_modules qe_modules_c qe_xclib q
     find_library(${libvar} NAMES ${libname}
         PATHS ${QE_ROOT}
         PATH_SUFFIXES lib build/lib
-        NO_DEFAULT_PATH
-        REQUIRED)
-    list (APPEND QE_LIBRARIES ${${libvar}})
+        NO_DEFAULT_PATH)
+    if(${libvar})
+        list (APPEND QE_LIBRARIES ${${libvar}})
+    endif()
 endforeach()
 
 message(STATUS "Found Quantum ESPRESSO libraries: ${QE_LIBRARIES}")
diff --git a/cmake/FindSCALAPACK.cmake b/cmake/FindSCALAPACK.cmake
new file mode 100644
index 0000000..7a6f2cd
--- /dev/null
+++ b/cmake/FindSCALAPACK.cmake
@@ -0,0 +1,537 @@
+#
+# @copyright (c) 2009-2014 The University of Tennessee and The University of
+# Tennessee Research Foundation. All rights reserved. @copyright (c) 2012-2016
+# Inria. All rights reserved. @copyright (c) 2012-2014 Bordeaux INP, CNRS (LaBRI
+# UMR 5800), Inria, Univ. Bordeaux. All rights reserved.
+#
+# * Find SCALAPACK library This module finds an installed fortran library that
+#   implements the SCALAPACK linear-algebra interface.
+#
+# This module sets the following variables: SCALAPACK_FOUND - set to true if a
+# library implementing the SCALAPACK interface is found SCALAPACK_LINKER_FLAGS -
+# uncached list of required linker flags (excluding -l and -L).
+# SCALAPACK_LIBRARIES - uncached list of libraries (using full path name) to
+# link against to use SCALAPACK SCALAPACK95_LIBRARIES - uncached list of
+# libraries (using full path name) to link against to use SCALAPACK95
+# SCALAPACK95_FOUND - set to true if a library implementing the SCALAPACK f95
+# interface is found BLA_STATIC  if set on this determines what kind of linkage
+# we do (static) BLA_VENDOR  if set checks only the specified vendor, if not set
+# checks all the possibilities BLA_F95     if set on tries to find the f95
+# interfaces for BLAS/SCALAPACK The user can give specific paths where to find
+# the libraries adding cmake options at configure (ex: cmake path/to/project
+# -DSCALAPACK_DIR=path/to/scalapack): SCALAPACK_DIR            - Where to find
+# the base directory of scalapack SCALAPACK_INCDIR         - Where to find the
+# header files SCALAPACK_LIBDIR         - Where to find the library files The
+# module can also look for the following environment variables if paths are not
+# given as cmake variable: SCALAPACK_DIR, SCALAPACK_INCDIR, SCALAPACK_LIBDIR
+# Note that if BLAS_DIR is set, it will also look for scalapack in it List of
+# vendors (BLA_VENDOR) valid in this module Intel(mkl), ACML, Apple, NAS,
+# Generic
+
+# =============================================================================
+# Copyright 2007-2009 Kitware, Inc.
+#
+# Distributed under the OSI-approved BSD License (the "License"); see
+# accompanying file Copyright.txt for details.
+#
+# This software is distributed WITHOUT ANY WARRANTY; without even the implied
+# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+# License for more information.
+# =============================================================================
+# (To distribute this file outside of CMake, substitute the full License text
+# for the above reference.)
+
+# Some macros to print status when search for headers and libs This macro
+# informs why the _lib_to_find file has not been found
+macro(Print_Find_Library_Blas_Status _libname _lib_to_find)
+
+  # save _libname upper/lower case
+  string(TOUPPER ${_libname} LIBNAME)
+  string(TOLOWER ${_libname} libname)
+
+  # print status message(" ")
+  if(${LIBNAME}_LIBDIR)
+    message("${Yellow}${LIBNAME}_LIBDIR is defined but ${_lib_to_find}"
+            "has not been found in ${ARGN}${ColourReset}")
+  else()
+    if(${LIBNAME}_DIR)
+      message("${Yellow}${LIBNAME}_DIR is defined but ${_lib_to_find}"
+              "has not been found in ${ARGN}${ColourReset}")
+    else()
+      message(
+        "${Yellow}${_lib_to_find} not found."
+        "Nor ${LIBNAME}_DIR neither ${LIBNAME}_LIBDIR"
+        "are defined so that we look for ${_lib_to_find} in"
+        "system paths (Linux: LD_LIBRARY_PATH, Windows: LIB,"
+        "Mac: DYLD_LIBRARY_PATH,"
+        "CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES,"
+        "CMAKE_C_IMPLICIT_LINK_DIRECTORIES)${ColourReset}")
+      if(_lib_env)
+        message("${Yellow}${_lib_to_find} has not been found in"
+                "${_lib_env}${ColourReset}")
+      endif()
+    endif()
+  endif()
+  message(
+    "${BoldYellow}Please indicate where to find ${_lib_to_find}. You have three options:\n"
+    "- Option 1: Provide the installation directory of the library with cmake option: -D${LIBNAME}_DIR=your/path/to/${libname}/\n"
+    "- Option 2: Provide the directory where to find the library with cmake option: -D${LIBNAME}_LIBDIR=your/path/to/${libname}/lib/\n"
+    "- Option 3: Update your environment variable (Linux: LD_LIBRARY_PATH, Windows: LIB, Mac: DYLD_LIBRARY_PATH)\n"
+    "- Option 4: If your library provides a PkgConfig file, make sure pkg-config finds your library${ColourReset}"
+  )
+
+endmacro()
+
+if(NOT SCALAPACK_FOUND)
+  set(SCALAPACK_DIR
+      ""
+      CACHE PATH "Installation directory of SCALAPACK library")
+  if(NOT SCALAPACK_FIND_QUIETLY)
+    message(
+      STATUS
+        "A cache variable, namely SCALAPACK_DIR, has been set to specify the install directory of SCALAPACK"
+    )
+  endif()
+endif(NOT SCALAPACK_FOUND)
+
+option(SCALAPACK_VERBOSE "Print some additional information during SCALAPACK
+libraries detection" OFF)
+mark_as_advanced(SCALAPACK_VERBOSE)
+if(BLAS_VERBOSE)
+  set(SCALAPACK_VERBOSE ON)
+endif()
+set(_scalapack_ORIG_CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES})
+
+get_property(_LANGUAGES_ GLOBAL PROPERTY ENABLED_LANGUAGES)
+if(NOT _LANGUAGES_ MATCHES Fortran)
+  include(CheckFunctionExists)
+else(NOT _LANGUAGES_ MATCHES Fortran)
+  include(CheckFortranFunctionExists)
+endif(NOT _LANGUAGES_ MATCHES Fortran)
+
+set(SCALAPACK_FOUND FALSE)
+set(SCALAPACK95_FOUND FALSE)
+
+# TODO: move this stuff to separate module
+
+macro(
+  Check_Scalapack_Libraries
+  LIBRARIES
+  _prefix
+  _name
+  _flags
+  _list
+  _blaslapack
+  _mpi
+  _threads)
+  # This macro checks for the existence of the combination of fortran libraries
+  # given by _list.  If the combination is found, this macro checks (using the
+  # Check_Fortran_Function_Exists macro) whether can link against that library
+  # combination using the name of a routine given by _name using the linker
+  # flags given by _flags.  If the combination of libraries is found and passes
+  # the link test, LIBRARIES is set to the list of complete library paths that
+  # have been found.  Otherwise, LIBRARIES is set to FALSE.
+
+  # N.B. _prefix is the prefix applied to the names of all cached variables that
+  # are generated internally and marked advanced by this macro.
+
+  set(_libraries_work TRUE)
+  set(${LIBRARIES})
+  set(_combined_name)
+  set(ENV_MKLROOT "$ENV{MKLROOT}")
+  set(ENV_BLAS_DIR "$ENV{BLAS_DIR}")
+  set(ENV_BLAS_LIBDIR "$ENV{BLAS_LIBDIR}")
+  set(ENV_SCALAPACK_DIR "$ENV{SCALAPACK_DIR}")
+  set(ENV_SCALAPACK_LIBDIR "$ENV{SCALAPACK_LIBDIR}")
+  if(NOT _libdir)
+    if(BLAS_LIBDIR)
+      list(APPEND _libdir "${BLAS_LIBDIR}")
+    elseif(BLAS_DIR)
+      list(APPEND _libdir "${BLAS_DIR}")
+      list(APPEND _libdir "${BLAS_DIR}/lib")
+      if("${CMAKE_SIZEOF_VOID_P}" EQUAL "8")
+        list(APPEND _libdir "${BLAS_DIR}/lib64")
+        list(APPEND _libdir "${BLAS_DIR}/lib/intel64")
+      else()
+        list(APPEND _libdir "${BLAS_DIR}/lib32")
+        list(APPEND _libdir "${BLAS_DIR}/lib/ia32")
+      endif()
+    elseif(ENV_BLAS_LIBDIR)
+      list(APPEND _libdir "${ENV_BLAS_LIBDIR}")
+    elseif(ENV_BLAS_DIR)
+      list(APPEND _libdir "${ENV_BLAS_DIR}")
+      list(APPEND _libdir "${ENV_BLAS_DIR}/lib")
+      if("${CMAKE_SIZEOF_VOID_P}" EQUAL "8")
+        list(APPEND _libdir "${ENV_BLAS_DIR}/lib64")
+        list(APPEND _libdir "${ENV_BLAS_DIR}/lib/intel64")
+      else()
+        list(APPEND _libdir "${ENV_BLAS_DIR}/lib32")
+        list(APPEND _libdir "${ENV_BLAS_DIR}/lib/ia32")
+      endif()
+    endif()
+    if(SCALAPACK_LIBDIR)
+      list(APPEND _libdir "${SCALAPACK_LIBDIR}")
+    elseif(SCALAPACK_DIR)
+      list(APPEND _libdir "${SCALAPACK_DIR}")
+      list(APPEND _libdir "${SCALAPACK_DIR}/lib")
+      if("${CMAKE_SIZEOF_VOID_P}" EQUAL "8")
+        list(APPEND _libdir "${SCALAPACK_DIR}/lib64")
+        list(APPEND _libdir "${SCALAPACK_DIR}/lib/intel64")
+      else()
+        list(APPEND _libdir "${SCALAPACK_DIR}/lib32")
+        list(APPEND _libdir "${SCALAPACK_DIR}/lib/ia32")
+      endif()
+    elseif(ENV_SCALAPACK_LIBDIR)
+      list(APPEND _libdir "${ENV_SCALAPACK_LIBDIR}")
+    elseif(ENV_SCALAPACK_DIR)
+      list(APPEND _libdir "${ENV_SCALAPACK_DIR}")
+      list(APPEND _libdir "${ENV_SCALAPACK_DIR}/lib")
+      if("${CMAKE_SIZEOF_VOID_P}" EQUAL "8")
+        list(APPEND _libdir "${ENV_SCALAPACK_DIR}/lib64")
+        list(APPEND _libdir "${ENV_SCALAPACK_DIR}/lib/intel64")
+      else()
+        list(APPEND _libdir "${ENV_SCALAPACK_DIR}/lib32")
+        list(APPEND _libdir "${ENV_SCALAPACK_DIR}/lib/ia32")
+      endif()
+    else()
+      if(ENV_MKLROOT)
+        list(APPEND _libdir "${ENV_MKLROOT}/lib")
+        if("${CMAKE_SIZEOF_VOID_P}" EQUAL "8")
+          list(APPEND _libdir "${ENV_MKLROOT}/lib64")
+          list(APPEND _libdir "${ENV_MKLROOT}/lib/intel64")
+        else()
+          list(APPEND _libdir "${ENV_MKLROOT}/lib32")
+          list(APPEND _libdir "${ENV_MKLROOT}/lib/ia32")
+        endif()
+      endif()
+      if(WIN32)
+        string(REPLACE ":" ";" _libdir2 "$ENV{LIB}")
+      elseif(APPLE)
+        string(REPLACE ":" ";" _libdir2 "$ENV{DYLD_LIBRARY_PATH}")
+      else()
+        string(REPLACE ":" ";" _libdir2 "$ENV{LD_LIBRARY_PATH}")
+      endif()
+      list(APPEND _libdir "${_libdir2}")
+      list(APPEND _libdir "${CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES}")
+      list(APPEND _libdir "${CMAKE_C_IMPLICIT_LINK_DIRECTORIES}")
+    endif()
+  endif()
+
+  if(SCALAPACK_VERBOSE)
+    message("${Cyan}Try to find SCALAPACK libraries: ${_list}")
+  endif()
+
+  foreach(_library ${_list})
+    set(_combined_name ${_combined_name}_${_library})
+
+    if(_libraries_work)
+      if(BLA_STATIC)
+        if(WIN32)
+          set(CMAKE_FIND_LIBRARY_SUFFIXES .lib ${CMAKE_FIND_LIBRARY_SUFFIXES})
+        endif(WIN32)
+        if(APPLE)
+          set(CMAKE_FIND_LIBRARY_SUFFIXES .lib ${CMAKE_FIND_LIBRARY_SUFFIXES})
+        else(APPLE)
+          set(CMAKE_FIND_LIBRARY_SUFFIXES .a ${CMAKE_FIND_LIBRARY_SUFFIXES})
+        endif(APPLE)
+      else(BLA_STATIC)
+        if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
+          # for ubuntu's libblas3gf and libscalapack3gf packages
+          set(CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES}
+                                          .so.3gf)
+        endif()
+      endif(BLA_STATIC)
+      find_library(
+        ${_prefix}_${_library}_LIBRARY
+        NAMES ${_library}
+        HINTS ${_libdir})
+      mark_as_advanced(${_prefix}_${_library}_LIBRARY)
+      # Print status if not found
+      # -------------------------
+      if(NOT ${_prefix}_${_library}_LIBRARY
+         AND NOT SCALAPACK_FIND_QUIETLY
+         AND SCALAPACK_VERBOSE)
+        print_find_library_blas_status(scalapack ${_library} ${_libdir})
+      endif()
+      set(${LIBRARIES} ${${LIBRARIES}} ${${_prefix}_${_library}_LIBRARY})
+      set(_libraries_work ${${_prefix}_${_library}_LIBRARY})
+    endif(_libraries_work)
+  endforeach(_library ${_list})
+
+  if(_libraries_work)
+    # Test this combination of libraries.
+    if(UNIX AND BLA_STATIC)
+      set(CMAKE_REQUIRED_LIBRARIES
+          ${_flags}
+          "-Wl,--start-group"
+          ${${LIBRARIES}}
+          ${_blaslapack}
+          "-Wl,--end-group"
+          ${_mpi}
+          ${_threads})
+    else(UNIX AND BLA_STATIC)
+      set(CMAKE_REQUIRED_LIBRARIES ${_flags} ${${LIBRARIES}} ${_blaslapack}
+                                   ${_mpi} ${_threads})
+    endif(UNIX AND BLA_STATIC)
+    if(SCALAPACK_VERBOSE)
+      message("${Cyan}SCALAPACK libs found. Try to compile symbol ${_name} with"
+              "following libraries: ${CMAKE_REQUIRED_LIBRARIES}")
+    endif()
+    if(NOT SCALAPACK_FOUND)
+      unset(${_prefix}${_combined_name}_WORKS CACHE)
+    endif()
+    if(NOT _LANGUAGES_ MATCHES Fortran)
+      check_function_exists("${_name}_" ${_prefix}${_combined_name}_WORKS)
+    else(NOT _LANGUAGES_ MATCHES Fortran)
+      check_fortran_function_exists(${_name} ${_prefix}${_combined_name}_WORKS)
+    endif(NOT _LANGUAGES_ MATCHES Fortran)
+    set(CMAKE_REQUIRED_LIBRARIES)
+    mark_as_advanced(${_prefix}${_combined_name}_WORKS)
+    set(_libraries_work ${${_prefix}${_combined_name}_WORKS})
+  endif(_libraries_work)
+
+  if(_libraries_work)
+    set(${LIBRARIES} ${${LIBRARIES}} ${_blaslapack} ${_mpi} ${_threads})
+  else(_libraries_work)
+    set(${LIBRARIES} FALSE)
+  endif(_libraries_work)
+
+endmacro(Check_Scalapack_Libraries)
+
+set(SCALAPACK_LINKER_FLAGS)
+set(SCALAPACK_LIBRARIES)
+set(SCALAPACK95_LIBRARIES)
+
+if(NOT BLAS_FOUND)
+  if(SCALAPACK_FIND_QUIETLY OR NOT SCALAPACK_FIND_REQUIRED)
+    find_package(BLAS)
+  else()
+    find_package(BLAS REQUIRED)
+  endif()
+endif()
+
+if(NOT LAPACK_FOUND)
+  if(SCALAPACK_FIND_QUIETLY OR NOT SCALAPACK_FIND_REQUIRED)
+    find_package(LAPACK)
+  else()
+    find_package(LAPACK REQUIRED)
+  endif()
+endif()
+
+if(NOT MPI_FOUND)
+  if(SCALAPACK_FIND_QUIETLY OR NOT SCALAPACK_FIND_REQUIRED)
+    find_package(MPI)
+  else()
+    find_package(MPI REQUIRED)
+  endif()
+endif()
+
+if(BLAS_FOUND
+   AND LAPACK_FOUND
+   AND MPI_FOUND)
+  set(SCALAPACK_LINKER_FLAGS ${BLAS_LINKER_FLAGS})
+  list(APPEND SCALAPACK_LINKER_FLAGS ${LAPACK_LINKER_FLAGS})
+  if($ENV{BLA_VENDOR} MATCHES ".+")
+    set(BLA_VENDOR $ENV{BLA_VENDOR})
+  else($ENV{BLA_VENDOR} MATCHES ".+")
+    if(NOT BLA_VENDOR)
+      set(BLA_VENDOR "All")
+    endif(NOT BLA_VENDOR)
+  endif($ENV{BLA_VENDOR} MATCHES ".+")
+
+  # Generic SCALAPACK library
+  if(BLA_VENDOR STREQUAL "Generic" OR BLA_VENDOR STREQUAL "All")
+    if(NOT SCALAPACK_LIBRARIES)
+      check_scalapack_libraries(
+        SCALAPACK_LIBRARIES
+        SCALAPACK
+        pdgemm
+        ""
+        "scalapack" # scalapack lib to look for
+        "${LAPACK_LIBRARIES};${BLAS_LIBRARIES}" # blas and lapack libs
+        "${MPI_Fortran_LIBRARIES}" # mpi libs
+        "" # threads libs
+      )
+    endif(NOT SCALAPACK_LIBRARIES)
+  endif()
+  # intel scalapack
+  if(BLA_VENDOR MATCHES "Intel" OR BLA_VENDOR STREQUAL "All")
+    if(UNIX AND NOT WIN32)
+      find_library(M_LIBRARY NAMES m)
+      mark_as_advanced(M_LIBRARY)
+      if(M_LIBRARY)
+        set(LM "-lm")
+      else()
+        set(LM "")
+      endif()
+    endif()
+    if(_LANGUAGES_ MATCHES C OR _LANGUAGES_ MATCHES CXX)
+      if(SCALAPACK_FIND_QUIETLY OR NOT SCALAPACK_FIND_REQUIRED)
+        find_package(Threads)
+      else()
+        find_package(Threads REQUIRED)
+      endif()
+
+      set(SCALAPACK_SEARCH_LIBS "")
+
+      if(BLA_F95)
+        set(SCALAPACK_mkl_SEARCH_SYMBOL "PDGEMM")
+        set(_LIBRARIES SCALAPACK95_LIBRARIES)
+        set(_BLAS_LIBRARIES ${BLAS95_LIBRARIES})
+        list(APPEND SCALAPACK_SEARCH_LIBS "mkl_scalapack_lp64")
+      else()
+        set(SCALAPACK_mkl_SEARCH_SYMBOL "pdgemm")
+        set(_LIBRARIES SCALAPACK_LIBRARIES)
+        set(_BLAS_LIBRARIES ${BLAS_LIBRARIES})
+        list(APPEND SCALAPACK_SEARCH_LIBS "mkl_scalapack_lp64")
+      endif()
+
+      # First try empty scalapack libs
+      if(NOT ${_LIBRARIES})
+        check_scalapack_libraries(
+          ${_LIBRARIES}
+          BLAS
+          ${SCALAPACK_mkl_SEARCH_SYMBOL}
+          ""
+          ""
+          "${_BLAS_LIBRARIES}"
+          ""
+          "${MPI_Fortran_LIBRARIES}")
+      endif()
+      # Then try the search libs
+      foreach(IT ${SCALAPACK_SEARCH_LIBS})
+        # First try mkl_blacs_openmpi (OpenMPI derived)
+        if(NOT ${_LIBRARIES})
+          check_scalapack_libraries(
+            ${_LIBRARIES}
+            BLAS
+            ${SCALAPACK_mkl_SEARCH_SYMBOL}
+            ""
+            "${IT};mkl_blacs_openmpi_lp64"
+            "${_BLAS_LIBRARIES}"
+            ""
+            "${MPI_Fortran_LIBRARIES}")
+        endif()
+        # First try mkl_blacs_intelmpi (MPICH derived)
+        if(NOT ${_LIBRARIES})
+          check_scalapack_libraries(
+            ${_LIBRARIES}
+            BLAS
+            ${SCALAPACK_mkl_SEARCH_SYMBOL}
+            ""
+            "${IT};mkl_blacs_intelmpi_lp64"
+            "${_BLAS_LIBRARIES}"
+            ""
+            "${MPI_Fortran_LIBRARIES}")
+        endif()
+      endforeach()
+    endif()
+  endif()
+else(
+  BLAS_FOUND
+  AND LAPACK_FOUND
+  AND MPI_FOUND)
+  message(STATUS "SCALAPACK requires BLAS, LAPACK, and MPI")
+endif(
+  BLAS_FOUND
+  AND LAPACK_FOUND
+  AND MPI_FOUND)
+
+if(BLA_F95)
+  if(SCALAPACK95_LIBRARIES)
+    set(SCALAPACK95_FOUND TRUE)
+  else(SCALAPACK95_LIBRARIES)
+    set(SCALAPACK95_FOUND FALSE)
+  endif(SCALAPACK95_LIBRARIES)
+  
+  if(NOT SCALAPACK_FIND_QUIETLY)
+    if(SCALAPACK95_FOUND)
+      message(STATUS "A library with SCALAPACK95 API found.")
+      message(STATUS "SCALAPACK_LIBRARIES ${SCALAPACK_LIBRARIES}")
+    else(SCALAPACK95_FOUND)
+      message(
+        WARNING
+          "BLA_VENDOR has been set to ${BLA_VENDOR} but SCALAPACK 95 libraries could not be found or check of symbols failed."
+          "\nPlease indicate where to find SCALAPACK libraries. You have three options:\n"
+          "- Option 1: Provide the installation directory of SCALAPACK library with cmake option: -DSCALAPACK_DIR=your/path/to/scalapack\n"
+          "- Option 2: Provide the directory where to find BLAS libraries with cmake option: -DBLAS_LIBDIR=your/path/to/blas/libs\n"
+          "- Option 3: Update your environment variable (Linux: LD_LIBRARY_PATH, Windows: LIB, Mac: DYLD_LIBRARY_PATH)\n"
+          "\nTo follow libraries detection more precisely you can activate a verbose mode with -DSCALAPACK_VERBOSE=ON at cmake configure."
+          "\nYou could also specify a BLAS vendor to look for by setting -DBLA_VENDOR=blas_vendor_name."
+          "\nList of possible BLAS vendor: Goto, ATLAS PhiPACK, CXML, DXML, SunPerf, SCSL, SGIMATH, IBMESSL, Intel10_32 (intel mkl v10 32 bit),"
+          "Intel10_64lp (intel mkl v10 64 bit, lp thread model, lp64 model), Intel10_64lp_seq (intel mkl v10 64 bit, sequential code, lp64 model),"
+          "Intel( older versions of mkl 32 and 64 bit), ACML, ACML_MP, ACML_GPU, Apple, NAS, Generic")
+    endif(NOT SCALAPACK_FIND_QUIETLY)
+    if(SCALAPACK_FIND_REQUIRED)
+      message(
+        FATAL_ERROR
+          "A required library with SCALAPACK95 API not found.\
+          Please specify library location: -DSCALAPACK_DIR=/your/path/to/scalapack")
+    else(SCALAPACK_FIND_REQUIRED)
+      if(NOT SCALAPACK_FIND_QUIETLY)
+        message(
+          STATUS
+            "A library with SCALAPACK95 API not found.\
+            Please specify library location: -DSCALAPACK_DIR=/your/path/to/scalapack")
+      endif(NOT SCALAPACK_FIND_QUIETLY)
+    endif(SCALAPACK_FIND_REQUIRED)
+  endif(SCALAPACK95_FOUND)
+
+  set(SCALAPACK_FOUND "${SCALAPACK95_FOUND}")
+  set(SCALAPACK_LIBRARIES "${SCALAPACK95_LIBRARIES}")
+else(BLA_F95)
+  if(SCALAPACK_LIBRARIES)
+    set(SCALAPACK_FOUND TRUE)
+  else(SCALAPACK_LIBRARIES)
+    set(SCALAPACK_FOUND FALSE)
+  endif(SCALAPACK_LIBRARIES)
+
+  if(NOT SCALAPACK_FOUND)
+    if(NOT SCALAPACK_FIND_QUIETLY)
+        message(WARNING
+            "BLA_VENDOR has been set to ${BLA_VENDOR} but SCALAPACK libraries could not be found or check of symbols failed."
+            "\nPlease indicate where to find SCALAPACK libraries. You have three options:\n"
+            "- Option 1: Provide the installation directory of SCALAPACK library with cmake option: -DSCALAPACK_DIR=your/path/to/scalapack\n"
+            "- Option 2: Provide the directory where to find BLAS libraries with cmake option: -DBLAS_LIBDIR=your/path/to/blas/libs\n"
+            "- Option 3: Update your environment variable (Linux: LD_LIBRARY_PATH, Windows: LIB, Mac: DYLD_LIBRARY_PATH)\n"
+            "\nTo follow libraries detection more precisely you can activate a verbose mode with -DSCALAPACK_VERBOSE=ON at cmake configure."
+            "\nYou could also specify a BLAS vendor to look for by setting -DBLA_VENDOR=blas_vendor_name."
+            "\nList of possible BLAS vendor: Goto, ATLAS PhiPACK, CXML, DXML, SunPerf, SCSL, SGIMATH, IBMESSL, Intel10_32 (intel mkl v10 32 bit),"
+            "Intel10_64lp (intel mkl v10 64 bit, lp thread model, lp64 model), Intel10_64lp_seq (intel mkl v10 64 bit, sequential code, lp64 model),"
+            "Intel( older versions of mkl 32 and 64 bit), ACML, ACML_MP, ACML_GPU, Apple, NAS, Generic")
+    endif(NOT SCALAPACK_FIND_QUIETLY)
+
+    if(SCALAPACK_FIND_REQUIRED)
+        message(
+            FATAL_ERROR
+                "A required library with SCALAPACK API not found.\
+                Please specify library location: -DSCALAPACK_DIR=/your/path/to/scalapack")
+    else(SCALAPACK_FIND_REQUIRED)
+        if(NOT SCALAPACK_FIND_QUIETLY)
+            message(STATUS
+                "A library with SCALAPACK API not found.\
+                Please specify library location: -DSCALAPACK_DIR=/your/path/to/scalapack")
+        endif(NOT SCALAPACK_FIND_QUIETLY)
+    endif(SCALAPACK_FIND_REQUIRED)
+  endif(NOT SCALAPACK_FOUND)
+endif(BLA_F95)
+
+set(CMAKE_FIND_LIBRARY_SUFFIXES ${_scalapack_ORIG_CMAKE_FIND_LIBRARY_SUFFIXES})
+
+if(SCALAPACK_LIBRARIES)
+  list(GET SCALAPACK_LIBRARIES 0 first_lib)
+  get_filename_component(first_lib_path "${first_lib}" PATH)
+  if(${first_lib_path} MATCHES "(/lib(32|64)?$)|(/lib/intel64$|/lib/ia32$)")
+    string(REGEX REPLACE "(/lib(32|64)?$)|(/lib/intel64$|/lib/ia32$)" ""
+                         not_cached_dir "${first_lib_path}")
+    set(SCALAPACK_DIR_FOUND
+        "${not_cached_dir}"
+        CACHE PATH "Installation directory of SCALAPACK library" FORCE)
+  else()
+    set(SCALAPACK_DIR_FOUND
+        "${first_lib_path}"
+        CACHE PATH "Installation directory of SCALAPACK library" FORCE)
+  endif()
+endif()
+mark_as_advanced(SCALAPACK_DIR)
+mark_as_advanced(SCALAPACK_DIR_FOUND)
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 9847408..49713f1 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -34,7 +34,7 @@ target_link_libraries(qe_wann2kcp_exe PRIVATE qe_koopmans_utils ${QE_LIBRARIES}
 ###########################################################
 set(src_epsilon_x epsilon.f90)
 qe_add_executable(qe_epsilon_exe ${src_epsilon_x})
-set_target_properties(qe_epsilon_exe PROPERTIES OUTPUT_NAME epsilon.x)
+set_target_properties(qe_epsilon_exe PROPERTIES OUTPUT_NAME epsilon_koopmans.x)
 target_link_libraries(qe_epsilon_exe PRIVATE qe_koopmans_utils ${QE_LIBRARIES} qe_fox qe_lapack qe_mpi_fortran qe_openmp_fortran qe_hdf5_fortran qe_ext_fft)
 
-qe_install_targets(qe_merge_evc_exe qe_wann2kcp_exe qe_epsilon_exe)
\ No newline at end of file
+qe_install_targets(qe_merge_evc_exe qe_wann2kcp_exe qe_epsilon_exe)
diff --git a/src/Makefile b/src/Makefile
index f840048..5890bdc 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -21,7 +21,7 @@ WAN2KCP_OBJS = modified_wannier.o read_wannier.o fft_supercell.o scell_wfc.o plo
 
 MODULES = $(PWOBJS) $(QEMODS)
 
-all: checkmake pwlib pplib epsilon.x wann2kcp.x merge_evc.x
+all: checkmake pwlib pplib epsilon_koopmans.x wann2kcp.x merge_evc.x
 
 checkmake:
 	- test -f $(QE_ROOT)/make.inc || (echo 'Could not find $(QE_ROOT)/make.inc. Please configure your Quantum ESPRESSO installation first.'; exit 1)
@@ -41,7 +41,7 @@ wann2kcp.x: wann2kcp.o $(WAN2KCP_OBJS) $(MODULES) $(LIBOBJS)
 		wann2kcp.o $(WAN2KCP_OBJS) $(MODULES) $(LIBOBJS) $(QELIBS)
 	- ( cd ../bin ; ln -fs ../src/$@ . )
 
-epsilon.x: epsilon.o $(MODULES) $(LIBOBJS)
+epsilon_koopmans.x: epsilon.o $(MODULES) $(LIBOBJS)
 	$(LD) $(LDFLAGS) -o $@ epsilon.o $(MODULES) \
 	$(LIBOBJS) $(QELIBS)
 	- ( cd ../bin ; ln -fs ../src/$@ . )
