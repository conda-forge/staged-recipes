# yaml-language-server: $schema=https://raw.githubusercontent.com/prefix-dev/recipe-format/main/schema.json
context:
  name: "MoarVM"
  version: "2025.06"

package:
  name: ${{ name|lower }}
  version: ${{ version }}

source:
  url: https://github.com/${{ name }}/${{ name }}/releases/download/${{ version }}/${{ name }}-${{ version }}.tar.gz
  sha256: e8d6b00cdb3f99022ade2a843a7a8ec87f66a38bb5655f85d50351c6b3b8d257

build:
  number: 0
  script:
    interpreter: perl
    content: |
      use strict;
      use warnings;
      use File::Basename;

      # Set up environment for Linux (needed for memmem)
      if ($^O eq 'linux') {
          $ENV{CFLAGS} = ($ENV{CFLAGS} // '') . ' -D_GNU_SOURCE';
      }

      # Handle compiler configuration per platform
      my $cc = $ENV{CC} // ($^O eq 'MSWin32' ? 'cl' : 'gcc');
      my $cc_basename = basename($cc);

      # Configure arguments - start with common ones
      my @configure_args = (
          'Configure.pl',
          '--c11-atomics',
          '--has-libtommath',
          '--has-mimalloc',
          '--has-libuv',
          '--has-libffi',
          "--prefix=$ENV{PREFIX}"
      );

      # Platform-specific compiler handling
      if ($^O eq 'MSWin32') {
          # On Windows, use explicit toolchain and compiler parameters
          print "Windows build - configuring for MSVC toolchain\n";

          # Determine the right toolchain and compiler
          if ($cc_basename =~ /^cl(\.exe)?$/i) {
              print "Using Visual Studio compiler (cl)\n";
              push @configure_args, '--toolchain=msvc', '--compiler=cl';
          } elsif ($cc_basename =~ /^clang-cl(\.exe)?$/i) {
              print "Using clang-cl compiler\n";
              push @configure_args, '--toolchain=msvc', '--compiler=cl';
          } elsif ($cc_basename =~ /^clang(\.exe)?$/i) {
              print "Using clang compiler\n";
              push @configure_args, '--toolchain=posix', '--compiler=clang';
          } else {
              print "Using gcc-compatible compiler\n";
              push @configure_args, '--toolchain=posix', '--compiler=gcc';
          }
      }
      elsif ($^O eq 'darwin') {
          # macOS - ensure we're using the right compiler and handle libtommath carefully
          print "macOS build - using compiler: $cc_basename\n";
          push @configure_args, "--cc=$cc_basename";

          # Check if we need to help with libtommath linking
          if ($ENV{BUILD_PREFIX}) {
              my $lib_dir = "$ENV{BUILD_PREFIX}/lib";
              my $bin_dir = "$ENV{BUILD_PREFIX}/bin";

              # Add library search paths - libtommath might be in lib or bin directory
              my $ldflags_additions = "";
              if (-d $lib_dir) {
                  print "Adding library search path: $lib_dir\n";
                  $ldflags_additions .= " -L$lib_dir";
              }
              if (-d $bin_dir) {
                  print "Adding library search path: $bin_dir\n";
                  $ldflags_additions .= " -L$bin_dir";
              }

              if ($ldflags_additions) {
                  $ENV{LDFLAGS} = ($ENV{LDFLAGS} // '') . $ldflags_additions . " -ltommath";
              }

              my $include_dir = "$ENV{BUILD_PREFIX}/include";
              if (-d $include_dir) {
                  print "Adding include search path: $include_dir\n";
                  $ENV{CPPFLAGS} = ($ENV{CPPFLAGS} // '') . " -I$include_dir";
              }
          }
      }
      else {
          # Linux and other Unix-like systems
          push @configure_args, "--cc=$cc_basename";
      }

      # Debug: Show environment and configuration
      print "Platform: $^O\n";
      print "Compiler: $cc (basename: $cc_basename)\n";
      print "PREFIX: $ENV{PREFIX}\n";
      print "BUILD_PREFIX: " . ($ENV{BUILD_PREFIX} // 'not set') . "\n";
      print "Environment CC: " . ($ENV{CC} // 'not set') . "\n";
      print "CFLAGS: " . ($ENV{CFLAGS} // 'not set') . "\n";
      print "CPPFLAGS: " . ($ENV{CPPFLAGS} // 'not set') . "\n";
      print "LDFLAGS: " . ($ENV{LDFLAGS} // 'not set') . "\n";
      print "Configure args: @configure_args\n";

      # Show what libraries we can find
      if ($ENV{BUILD_PREFIX}) {
          for my $dir_name ('lib', 'bin') {
              my $lib_dir = "$ENV{BUILD_PREFIX}/$dir_name";
              if (-d $lib_dir) {
                  print "Libraries in $lib_dir:\n";
                  opendir(my $dh, $lib_dir) or die "Cannot open $lib_dir: $!";
                  my @libs = grep { /^lib.*\.(a|so|dylib|dll)$/ } readdir($dh);
                  closedir($dh);
                  for my $lib (sort @libs) {
                      print "  $lib\n";
                  }
                  if (!@libs) {
                      print "  (no libraries found)\n";
                  }
              } else {
                  print "$lib_dir does not exist\n";
              }
          }
      }

      print "Running: perl @configure_args\n";
      system('perl', @configure_args) == 0
          or die "Configure failed: $?\n";

      # Build and install
      my $make_cmd = $^O eq 'MSWin32' ? 'nmake' : 'make';

      print "Running: $make_cmd install\n";
      system($make_cmd, 'install') == 0
          or die "Make install failed: $?\n";

      print "MoarVM build completed successfully\n";

requirements:
  build:
    - ${{ compiler("c") }}
    - ${{ stdlib("c") }}
    - make
    - perl
    - pkgconf
    - mimalloc
    - if: win
      then: zstd
  host:
    - libtommath
    - mimalloc
    - libuv
    - libffi
    - if: win
      then: zstd
  run_exports:
    - ${{ pin_subpackage("moarvm", exact=True) }}

tests:
  - script:
      - moar --version
      - moar --help
    requirements:
      run: moarvm

about:
  homepage: https://moarvm.org/
  license: Artistic-2.0
  license_file: LICENSE
  summary: A VM with adaptive optimization and JIT compilation, built for Rakudo
  description: |
    MoarVM (short for Metamodel On A Runtime Virtual Machine) is a runtime built for the 6model object system. It is primarily aimed at running NQP and Rakudo, but should be able to serve as a backend for any compilers built using the NQP compiler toolchain.
  repository: https://github.com/MoarVM/MoarVM
  documentation: https://github.com/MoarVM/MoarVM/tree/main/docs

extra:
  recipe-maintainers:
    - remimimimimi
