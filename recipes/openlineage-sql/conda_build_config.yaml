# exceptionally reinstate python 3.7 support, to be removed
# at any time, but ideally once upstream drops support itself
python:
  - 3.7.* *_cpython   # [not (osx and arm64 and win)]
  - 3.8.* *_cpython
  - 3.9.* *_cpython
  - 3.10.* *_cpython
  - 3.11.* *_cpython
python_impl:
  - cpython           # [not (osx and arm64 and win)]
  - cpython
  - cpython
  - cpython
  - cpython
numpy:
  - 1.20              # [not (osx and arm64 and win)]
  - 1.20
  - 1.20
  - 1.21
  - 1.23









## # This differs from target_platform in that it determines what subdir the compiler
## #    will target, not what subdir the compiler package will be itself.
## #    For example, we need a win-64 vs2008_win-32 package, so that we compile win-32
## #    code on win-64 miniconda.
cross_compiler_target_platform:  # [win]
  - win-64                     # [win]
c_compiler:
  - gcc                        # [linux]
  - clang                      # [osx]
  - vs2019                     # [win]
c_compiler_version:            # [unix]
  - 11                         # [linux]
  - 14                         # [osx]
  - 7                          # [os.environ.get("CF_CUDA_ENABLED", "False") == "True" and linux64]
  - 9                          # [os.environ.get("CF_CUDA_ENABLED", "False") == "True" and linux64]
  - 10                         # [os.environ.get("CF_CUDA_ENABLED", "False") == "True" and linux64]
  - 10                         # [os.environ.get("CF_CUDA_ENABLED", "False") == "True" and linux64]
cxx_compiler:
  - gxx                        # [linux]
  - clangxx                    # [osx]
  - vs2019                     # [win]
cxx_compiler_version:          # [unix]
  - 11                         # [linux]
  - 14                         # [osx]
  - 7                          # [os.environ.get("CF_CUDA_ENABLED", "False") == "True" and linux64]
  - 9                          # [os.environ.get("CF_CUDA_ENABLED", "False") == "True" and linux64]
  - 10                         # [os.environ.get("CF_CUDA_ENABLED", "False") == "True" and linux64]
  - 10                         # [os.environ.get("CF_CUDA_ENABLED", "False") == "True" and linux64]
llvm_openmp:                   # [osx]
  - 14                         # [osx]
fortran_compiler:              # [unix or win64]
  - gfortran                   # [linux64 or (osx and x86_64)]
  - gfortran                   # [aarch64 or ppc64le or armv7l or s390x]
  - flang                      # [win64]
fortran_compiler_version:      # [unix or win64]
  - 11                         # [linux]
  - 11                         # [osx]
  - 5                          # [win64]
  - 7                          # [os.environ.get("CF_CUDA_ENABLED", "False") == "True" and linux64]
  - 9                          # [os.environ.get("CF_CUDA_ENABLED", "False") == "True" and linux64]
  - 10                         # [os.environ.get("CF_CUDA_ENABLED", "False") == "True" and linux64]
  - 10                         # [os.environ.get("CF_CUDA_ENABLED", "False") == "True" and linux64]
m2w64_c_compiler:              # [win]
  - m2w64-toolchain            # [win]
m2w64_cxx_compiler:            # [win]
  - m2w64-toolchain            # [win]
m2w64_fortran_compiler:        # [win]
  - m2w64-toolchain            # [win]
CMAKE_GENERATOR:               # [win]
  - NMake Makefiles            # [win]

cuda_compiler:                 # [linux or win]
  - nvcc                       # [linux or win]
cuda_compiler_version:
  - None
  - 10.2                       # [(linux64 or win) and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
  - 11.0                       # [(linux64 or win) and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
  - 11.1                       # [(linux64 or win) and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
  - 11.2                       # [(linux64 or win) and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
cuda_compiler_version_min:
  - None                       # [osx]
  - 10.2                       # [linux64 or win]
  - 11.2                       # [linux and (ppc64le or aarch64)]
cudnn:
  - undefined
  - 7                          # [(linux64 or win) and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
  - 8                          # [(linux64 or win) and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
  - 8                          # [(linux64 or win) and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
  - 8                          # [(linux64 or win) and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]

_libgcc_mutex:
  - 0.1 conda_forge
#
# Go Compiler Options
#

# The basic go-compiler with CGO disabled,
# It generates fat binaries without libc dependencies
# The activation scripts will set your CC,CXX and related flags
# to invalid values.
go_compiler:
  - go-nocgo
# The go compiler build with CGO enabled.
# It can generate fat binaries that depend on conda's libc.
# You should use this compiler if the underlying
# program needs to link against other C libraries, in which
# case make sure to add  'c,cpp,fortran_compiler' for unix
# and the m2w64 equivalent for windows.
cgo_compiler:
  - go-cgo
# The following are helpful variables to simplify go meta.yaml files.
target_goos:
  - linux                      # [linux]
  - darwin                     # [osx]
  - windows                    # [win]
target_goarch:
  - amd64                      # [x86_64]
  - arm64                      # [arm64 or aarch64]
  - ppc64le                    # [ppc64le]
target_goexe:
  -                            # [unix]
  - .exe                       # [win]
target_gobin:
  - '${PREFIX}/bin/'           # [unix]
  - '%PREFIX%\bin\'            # [win]

# Rust Compiler Options
rust_compiler:
  - rust

macos_machine:                 # [osx]
  - x86_64-apple-darwin13.4.0  # [osx and x86_64]
  - arm64-apple-darwin20.0.0   # [osx and arm64]
MACOSX_DEPLOYMENT_TARGET:      # [osx]
  - 11.0                       # [osx and arm64]
  - 10.9                       # [osx and x86_64]
target_platform:               # [win]
  - win-64                     # [win]
VERBOSE_AT:
  - V=1
VERBOSE_CM:
  - VERBOSE=1

# dual build configuration
channel_sources:
  - conda-forge                                 # [not s390x]
  - https://conda-web.anaconda.org/conda-forge  # [s390x]

channel_targets:
  - conda-forge main

cdt_name:  # [linux]
  - cos6   # [linux64 and os.environ.get("DEFAULT_LINUX_VERSION", "cos6") == "cos6"]
  - cos7   # [linux64 and os.environ.get("DEFAULT_LINUX_VERSION", "cos6") == "cos7"]
  - cos7   # [linux and aarch64]
  - cos7   # [linux and ppc64le]
  - cos7   # [linux and armv7l]
  - cos7   # [linux and s390x]

  - cos6   # [linux64 and os.environ.get("CF_CUDA_ENABLED", "False") == "True" and os.environ.get("DEFAULT_LINUX_VERSION", "cos6") == "cos6"]
  - cos7   # [linux64 and os.environ.get("CF_CUDA_ENABLED", "False") == "True" and os.environ.get("DEFAULT_LINUX_VERSION", "cos6") == "cos7"]
  - cos7   # [linux64 and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
  - cos7   # [linux64 and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
  - cos7   # [linux64 and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]

docker_image:                                   # [os.environ.get("BUILD_PLATFORM", "").startswith("linux-")]
  - quay.io/condaforge/linux-anvil-cos7-x86_64  # [os.environ.get("BUILD_PLATFORM") == "linux-64"]
  - quay.io/condaforge/linux-anvil-aarch64      # [os.environ.get("BUILD_PLATFORM") == "linux-aarch64"]
  - quay.io/condaforge/linux-anvil-ppc64le      # [os.environ.get("BUILD_PLATFORM") == "linux-ppc64le"]
  - quay.io/condaforge/linux-anvil-armv7l       # [os.environ.get("BUILD_PLATFORM") == "linux-armv7l"]

  - quay.io/condaforge/linux-anvil-cos7-cuda:10.2  # [linux64 and os.environ.get("CF_CUDA_ENABLED", "False") == "True" and os.environ.get("BUILD_PLATFORM") == "linux-64"]
  - quay.io/condaforge/linux-anvil-cuda:11.0       # [linux64 and os.environ.get("CF_CUDA_ENABLED", "False") == "True" and os.environ.get("BUILD_PLATFORM") == "linux-64"]
  - quay.io/condaforge/linux-anvil-cuda:11.1       # [linux64 and os.environ.get("CF_CUDA_ENABLED", "False") == "True" and os.environ.get("BUILD_PLATFORM") == "linux-64"]
  - quay.io/condaforge/linux-anvil-cuda:11.2       # [linux64 and os.environ.get("CF_CUDA_ENABLED", "False") == "True" and os.environ.get("BUILD_PLATFORM") == "linux-64"]

zip_keys:
  -                             # [unix]
    - c_compiler_version        # [unix]
    - cxx_compiler_version      # [unix]
    - fortran_compiler_version  # [unix]
    - cudnn                     # [linux and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
    - cuda_compiler_version     # [linux and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
    - cdt_name                  # [linux and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
    - docker_image              # [linux and os.environ.get("CF_CUDA_ENABLED", "False") == "True" and os.environ.get("BUILD_PLATFORM", "").startswith("linux-")]
  -                             # [win64 and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
    - cudnn                     # [win64 and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
    - cuda_compiler_version     # [win64 and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
  -
    - python
    - numpy
    - python_impl
  # transition until arrow_cpp can be dropped for arrow 13.x
  -
    - arrow_cpp
    - libarrow
 
 
# aarch64 specifics because conda-build sets many things to centos 6
# this can probably be removed when conda-build gets updated defaults
# for aarch64
cdt_arch: aarch64                       # [aarch64]
BUILD: aarch64-conda_cos7-linux-gnu     # [aarch64]

# armv7l specifics because conda-build sets many things to centos 6
# this can probably be removed when conda-build gets updated defaults
# for aarch64
cdt_arch: armv7l                          # [armv7l]
BUILD: armv7-conda_cos7-linux-gnueabihf   # [armv7l]

pin_run_as_build:
  # boost is special, see https://github.com/conda-forge/boost-cpp-feedstock/pull/82
  boost:
    max_pin: x.x.x
  boost-cpp:
    max_pin: x.x.x
  # TODO: add run_exports to the following feedstocks
  flann:
    max_pin: x.x.x
  graphviz:
    max_pin: x
  libsvm:
    max_pin: x
  netcdf-cxx4:
    max_pin: x.x
  occt:
    max_pin: x.x
  poppler:
    max_pin: x.x
  r-base:
    max_pin: x.x
    min_pin: x.x
  vlfeat:
    max_pin: x.x.x

# Pinning packages

# blas
libblas:
  - 3.9 *netlib
libcblas:
  - 3.9 *netlib
liblapack:
  - 3.9 *netlib
liblapacke:
  - 3.9 *netlib
blas_impl:
  - openblas
  - mkl          # [x86 or x86_64]
  - blis         # [x86 or x86_64]

# keep in sync with libabseil{,_static}
abseil_cpp:
  - '20220623.0'
alsa_lib:
  - 1.2.8
antic:
  - 0.2
aom:
  - 3.5
arb:
  - '2.23'
arpack:
  - 3.7
# keep in sync with libarrow
arrow_cpp:
  - 9.0.0
  - 8.0.1
  - 7.0.1
  - 6.0.2
assimp:
  - 5.2.4
attr:
  - 2.5
aws_c_auth:
  - 0.6.21
aws_c_cal:
  - 0.5.20
aws_c_common:
  - 0.8.5
aws_c_event_stream:
  - 0.2.15
aws_c_http:
  - 0.6.27
aws_c_io:
  - 0.13.11
aws_c_mqtt:
  - 0.7.13
aws_c_s3:
  - 0.1.51
aws_c_sdkutils:
  - 0.1.7
aws_checksums:
  - 0.1.13
aws_crt_cpp:
  - 0.18.16
aws_sdk_cpp:
  - 1.9.375
boost:
  - 1.78.0
boost_cpp:
  - 1.78.0
bzip2:
  - 1
c_ares:
  - 1
cairo:
  - 1
capnproto:
  - 0.10.2
ccr:
  - 1.3
cfitsio:
  - 4.1.0
coin_or_cbc:
  - 2.10
coincbc:
  - 2.10
coin_or_cgl:
  - 0.60
coin_or_clp:
  - 1.17
coin_or_osi:
  - 0.108
coin_or_utils:
  - 2.11
console_bridge:
  - 1.0
cutensor:
  - 1
curl:
  - 7
davix:
  - '0.8'
dbus:
  - 1
eclib:
  - '20221012'
exiv2:
  - 0.27
expat:
  - 2
ffmpeg:
  - '4.4'
fftw:
  - 3
flann:
  - 1.9.1
fmt:
  - '9'
fontconfig:
  - 2
freetype:
  - 2
gct:
  - 6.2.1629922860
gf2x:
  - '1.3'
gdk_pixbuf:
  - 2
gnuradio_core:
  - 3.10.4
gnutls:
  - 3.7
gsl:
  - 2.7
gsoap:
  - 2.8.123
gstreamer:
  - '1.20'
gst_plugins_base:
  - '1.20'
gdal:
  - '3.5'
geos:
  - 3.11.1
geotiff:
  - 1.7.1
gfal2:
  - '2.21'
gflags:
  - 2.2
giflib:
  - 5.2
glew:
  - 2.1
glib:
  - '2'
glog:
  - '0.6'
glpk:
  - '5.0'
gmp:
  - 6
google_cloud_cpp:
  - '2.3.0'
google_cloud_cpp_common:
  - 0.25.0
googleapis_cpp:
  - '0.10'
graphviz:
  - '6'
# keep in sync with libgrpc
grpc_cpp:
  - '1.49'
harfbuzz:
  - '5'
hdf4:
  - 4.2.15
hdf5:
  - 1.12.1
icu:
  - '70'
imath:
  - '3.1'
ipopt:
  - 3.14.10
isl:
  - '0.25'
jasper:
  - '2'
jpeg:
  - 9
lcms:
  - 2
lerc:
  - '4'
libjpeg_turbo:
  - 2
libev:
  - 4.33
json_c:
  - '0.16'
jsoncpp:
  - 1.9.5
kealib:
  - '1.5'
krb5:
  - '1.19'
libabseil:
  - '20220623.0'
libabseil_static:
  - '20220623.0'
libarchive:
  - 3.5
# keep in sync with arrow_cpp (libarrow exists only from 10.x, but ensure consistency)
libarrow:
  - 9.0.0
  - 8.0.1
  - 7.0.1
  - 6.0.2
libavif:
  - 0.11.1
libblitz:
  - 1.0.2
libcint:
  - '5.1'
libcurl:
  - 7
libcrc32c:
  - 1.1
libdap4:
  - 3.20.6
libdeflate:
  - '1.14'
libeantic:
  - 1
libevent:
  - 2.1.10
libexactreal:
  - 2
libffi:
  - '3.3'
libflatsurf:
  - 3
libflint:
  - '2.9'
libgdal:
  - '3.5'
libgit2:
  - '1.5'
libgrpc:
  - '1.49'
libhugetlbfs:
  - 2
libhwy:
  - '1.0'
libiconv:
  - 1
libidn2:
  - 2
libintervalxt:
  - 3
libkml:
  - 1.3
libiio:
  - 0
libmatio:
  - 1.5.21
libmicrohttpd:
  - 0.9
libnetcdf:
  - 4.8.1
libopencv:
  - 4.6.0
libpcap:
  - '1.10'
libpng:
  - 1.6
libprotobuf:
  - '3.21'
librdkafka:
  - '1.9'
librsvg:
  - 2
libsecret:
  - 0.18
libsndfile:
  - 1.1
libspatialindex:
  - 1.9.3
libssh:
  - 0.10
libssh2:
  - 1
libsvm:
  - '325'
# keep libsqlite in sync with sqlite
libsqlite:
  - 3
libthrift:
  - 0.16.0
libtiff:
  - 4
libunwind:
  - '1.6'
libv8:
  - 8.9.83
libvips:
  - 8
libwebp:
  - 1
libwebp_base:
  - 1
libxml2:
  - 2.10
libxsmm:
  - 1
libuuid:
  - 2
libzip:
  - 1
log4cxx:
  - 0.11.0
lz4_c:
  - '1.9.3'
lzo:
  - 2
metis:
  - 5.1
mimalloc:
  - 2.0.7
mkl:
  - 2022
mkl_devel:
  - 2022
mpg123:
  - '1.31'
mpich:
  - 4
mpfr:
  - 4
mumps_mpi:
  - 5.2.1
mumps_seq:
  - 5.2.1
nccl:
  - 2
ncurses:
  - 6
netcdf_cxx4:
  - 4.3
netcdf_fortran:
  - 4.5
nettle:
  - '3.8'
nodejs:
  - '18'
  - '16'
  - '14'  # [not (osx and arm64)]
nss:
  - 3
nspr:
  - 4
nlopt:
  - '2.7'
ntl:
  - '11.4.3'
# we build for the oldest version possible of numpy for forward compatibility
occt:
  - 7.6
openblas:
  - 0.3.*
openexr:
  - '3.1'
openh264:
  - '2.3.1'
openjpeg:
  - '2'
openmpi:
  - 4
openssl:
  - 1.1.1
openturns:
  - '1.19'
orc:
  - 1.8.0
pango:
  - 1.50
pari:
  - 2.13.* *_pthread
perl:
  - 5.32.1
petsc:
  - '3.17'
petsc4py:
  - '3.17'
slepc:
  - '3.17'
slepc4py:
  - '3.17'
svt_av1:
  - 1.3.0
p11_kit:
  - '0.24'
pcre:
  - '8'
pcre2:
  - '10.40'
pixman:
  - 0
poco:
  - 1.12.4
poppler:
  - '22.04'
proj:
  - 9.1.0
pulseaudio:
  - 14.0
pybind11_abi:
  - 4
pytorch:
  - '1.12'
qt:
  - 5.12
qtkeychain:
  - '0.13'
re2:
  - 2022.06.01
readline:
  - "8"
rocksdb:
  - "6.10"
root_base:
  - 6.26.8
ruby:
  - 2.5
  - 2.6
r_base:
  - 4.1
  - 4.2   # [not win]
scotch:
  - 6.0.9
ptscotch:
  - 6.0.9
s2n:
  - 1.3.28
sdl2:
  - '2'
sdl2_image:
  - '2'
sdl2_mixer:
  - '2'
sdl2_net:
  - '2'
sdl2_ttf:
  - '2'
singular:
  - 4.2.1.p3
snappy:
  - 1
soapysdr:
  - '0.8'
sox:
  - 14.4.2
spdlog:
  - '1.11'
# keep sqlite in sync with libsqlite
sqlite:
  - 3
starlink_ast:
  - '9.2.7'
suitesparse:
  - 5
superlu_dist:
  - 7.1.1
tbb:
  - '2021'
tbb_devel:
  - '2021'
thrift_cpp:
  - 0.16.0
tinyxml2:
  - 9
tk:
  - 8.6                # [not ppc64le]
tiledb:
  - '2.11'
ucx:
  - 1.12.1
uhd:
  - 4.3.0
urdfdom:
  - 3.1
vc:                    # [win]
  - 14                 # [win]
vlfeat:
  - 0.9.21
volk:
  - '2.5'
vtk:
  - 9.1.0
wcslib:
  - '7.7'
wxwidgets:
  - '3.2'
x264:
  - '1!164.*'
x265:
  - '3.5'
xerces_c:
  - 3.2
xrootd:
  - '5'
xz:
  - 5
zeromq:
  - 4.3.4
zfp:
  - 1.0
zlib:
  - 1.2
zlib_ng:
  - 2.0
zstd:
  - '1.5'
