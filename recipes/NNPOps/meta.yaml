# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Jinja variables help maintain the recipe as you'll update the version only here.
# Using the name variable with the URL in line 14 is convenient
# when copying and pasting from another recipe, but not really needed.
{% set name = "nnpops" %}
{% set version = "0.1" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/openmm/NNPOps/archive/refs/tags/v{{ version }}.tar.gz
  sha256: 64eb48e4a2a642f5e951fe368c46bd41402ce68a89f2f56189728b4f551cbe9d

build:
  skip: true  # [not linux]
  skip: true  # [cuda_compiler_version == "None"]
  string: cuda{{ cuda_compiler_version | replace('.', '') }}py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}
  # Uncomment the following line if the package is pure Python and the recipe is exactly the same for all platforms.
  # It is okay if the dependencies are not built for all platforms/versions, although selectors are still not allowed.
  # See https://conda-forge.org/docs/maintainer/knowledge_base.html#noarch-python for more details.
  # noarch: python
  number: 0
  rpaths:
    - lib/
    - {{ SP_DIR }}/torch/lib
  missing_dso_whitelist:
    - '*/libcuda.*'  # [linux64 or ppc64le]
  #string: cuda{{ cuda_compiler_version | replace('.', '') }}py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != "None"]
  #string: cpu_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}                                      # [cuda_compiler_version == "None"]

  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  #script: "bash {{ RECIPE_DIR }}/build.sh"

requirements:
  build:
    # If your project compiles code (such as a C extension) then add the required compilers as separate entries here.
    # Compilers are named 'c', 'cxx' and 'fortran'.
    - {{ compiler('cxx') }}
      #- {{ compiler('cuda') }}  # [cuda_compiler_version not in (undefined, 'None')]
    - {{ compiler('cuda') }}
      #- {{ cdt('mesa-libgl-devel') }}  # [linux]a
      #- nvcc_linux-64 =10.2 
      #- gcc =8.*
      #- cudatoolkit-dev =10.2
    - make
    - cmake
    - pytest
    - mdtraj
    - pytorch
    - torchani
  host:
    - python
    - pytorch-gpu
    - torchani
    - mdtraj
  run:
    - python
    - pytorch-gpu
    - pytorch
    - torchani
    - mdtraj


test:
  imports:
    - NNPOps

about:
  home: https://github.com/openmm/NNPOps
  license: MIT
  license_family: MIT
  license_file: LICENSE
  summary: "High performance implementations of operations used in Neural Network Potentials"

extra:
  recipe-maintainers:
    - jchodera
    - mikemhenry
    - ijpulidos
    - peastman 
    - raimis
