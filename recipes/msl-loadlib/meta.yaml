{% set name = "msl-loadlib" %}
{% set version = "1.0.0" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.org/packages/source/{{ name[0] }}/{{ name }}/msl_loadlib-{{ version }}.tar.gz
  sha256: 7874e5a1aa5f894c4d44c26735e991d3e96d86bc5bf00bb83afa13beee2a2d96

build:
  entry_points:
    - freeze32 = msl.loadlib.freeze_server32:_cli
  noarch: python
  script: {{ PYTHON }} -m pip install . -vv --no-deps --no-build-isolation
  number: 0

requirements:
  host:
    - python >=3.8
    - hatchling
    - hatch-vcs
    - pip
  run:
    - python >=3.8

test:
  imports:
    - msl.loadlib
  commands:
    - pip check
    - freeze32 --help
  requires:
    - pip

about:
  summary: Load a library (and access a 32-bit library from 64-bit Python)
  home: https://github.com/MSLNZ/msl-loadlib
  doc_url: https://mslnz.github.io/msl-loadlib/latest/
  dev_url: https://github.com/MSLNZ/msl-loadlib
  license: MIT
  license_file: LICENSE.txt
  description: |
    This package loads a library in Python. It is basically just a thin wrapper
    around ctypes (for libraries that use the __cdecl or __stdcall calling
    convention), Python.NET (for libraries that use Microsoft .NET, CLR), Py4J
    (for Java .jar or .class files) and comtypes (for libraries that use the
    Component Object Model or ActiveX).

    However, the primary advantage is that it is possible to communicate with a
    32-bit library from 64-bit Python.

    msl-loadlib is a pure-python package, but Python.NET depends on the .NET
    Common Language Runtime (CLR) on Windows and Mono Runtime on Linux/macOS,
    and Py4J depends on having a Java Virtual Machine installed.

extra:
  recipe-maintainers:
    - jborbely
