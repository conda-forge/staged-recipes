From e93ff96907aa40b1441f6b79689415eb45f5e478 Mon Sep 17 00:00:00 2001
From: Daniel Ching <dching@nvidia.com>
Date: Thu, 31 Oct 2024 17:48:31 -0500
Subject: [PATCH 7/9] BLD: Let python versions be user-selectable

---
 cmake/Utils.cmake | 34 ++++++++++++++++++----------------
 1 file changed, 18 insertions(+), 16 deletions(-)

diff --git a/cmake/Utils.cmake b/cmake/Utils.cmake
index fb8110d..f247794 100644
--- a/cmake/Utils.cmake
+++ b/cmake/Utils.cmake
@@ -11,9 +11,9 @@
 # its affiliates is strictly prohibited.
 
 # this is needed because cmake caching behavior was
-# preventing finding multiple packages of python 
+# preventing finding multiple packages of python
 # using find_package. So everytime a new python version
-# needs to be found, UnsetPython needs to be called. 
+# needs to be found, UnsetPython needs to be called.
 function(UnsetPython)
     get_cmake_property(all_variables VARIABLES)
     foreach(var ${all_variables})
@@ -65,7 +65,7 @@ function(FindPython PYVER)
       message("Python version ${PYVER} not found.")
       set(PYTHON_EXISTS 1 PARENT_SCOPE)
   endif()
-endfunction()     
+endfunction()
 
 # Build a .so (or .pyd on windows) library variant for each python version provided in PYTHON_VERSIONS variable
 # if it is accesible during the build time. The library sufix is provided and specific for each python version
@@ -87,7 +87,7 @@ endfunction()
 function(build_per_python_lib)
     set(oneValueArgs TARGET_NAME OUTPUT_NAME OUTPUT_DIR PREFIX)
     set(multiValueArgs PRIV_LIBS PUBLIC_LIBS SRC EXCLUDE_LIBS)
-    
+
     cmake_parse_arguments(PARSE_ARGV 1 PYTHON_LIB_ARG "${options}" "${oneValueArgs}" "${multiValueArgs}")
 
     set(PYTHON_LIB_ARG_TARGET_NAME ${ARGV0})
@@ -106,10 +106,12 @@ function(build_per_python_lib)
     target_include_directories(${PYTHON_LIB_ARG_TARGET_NAME}_private
                                INTERFACE "${PYBIND11_INCLUDE_DIR}"
                                INTERFACE "${pybind11_INCLUDE_DIR}")
-                               
 
-    set (PYTHON_VERSIONS "3.8;3.9;3.10;3.11;3.12")
-    foreach(PYVER ${PYTHON_VERSIONS})
+    if(NOT DEFINED NVIMG_CODEC_PYTHON_VERSIONS)
+      set(NVIMG_CODEC_PYTHON_VERSIONS "3.8;3.9;3.10;3.11;3.12")
+    endif(NOT DEFINED NVIMG_CODEC_PYTHON_VERSIONS)
+
+    foreach(PYVER ${NVIMG_CODEC_PYTHON_VERSIONS})
 
         set(PYTHON_LIB_TARGET_FOR_PYVER "${PYTHON_LIB_ARG_TARGET_NAME}_${PYVER}")
         # check if listed python versions are accesible
@@ -136,12 +138,12 @@ function(build_per_python_lib)
             else()
               string(REPLACE "." "" PYVER_WIN "${PYVER}")
               set(PYTHON_SUFFIX ".cp${PYVER_WIN}-win_amd64")
-              
+
               set(PYTHON_INCLUDES ${Python_INCLUDE_DIRS})
-              
+
               set(PYTHON_LIBRARY ${Python_LIBRARIES})
             endif()
-            
+
             # split and make it a list
             string(REPLACE "-I" "" PYTHON_INCLUDES "${PYTHON_INCLUDES}")
             string(REPLACE "\n" "" PYTHON_INCLUDES "${PYTHON_INCLUDES}")
@@ -170,23 +172,23 @@ function(build_per_python_lib)
             # add interface dummy lib as a dependnecy to easilly propagate options we could set from the above
             target_link_libraries(${PYTHON_LIB_TARGET_FOR_PYVER} PUBLIC ${PYTHON_LIB_ARG_TARGET_NAME}_public)
             target_link_libraries(${PYTHON_LIB_TARGET_FOR_PYVER} PRIVATE ${PYTHON_LIB_ARG_TARGET_NAME}_private)
-            
+
             if (WIN32)
               target_link_libraries(${PYTHON_LIB_TARGET_FOR_PYVER} PUBLIC "${PYTHON_LIBRARY}")
             endif()
-            
+
             add_dependencies(${PYTHON_LIB_ARG_TARGET_NAME} ${PYTHON_LIB_TARGET_FOR_PYVER})
         endif()
 
     endforeach(PYVER)
-  if (WIN32)    
-    # Need to set back the python version which was found at 
+  if (WIN32)
+    # Need to set back the python version which was found at
     # the beginning of this CMakeLists
     UnsetPython()
     find_package(Python COMPONENTS Interpreter)
   endif()
 
-endfunction() 
+endfunction()
 
 
 function(parse_cuda_version CUDA_VERSION CUDA_VERSION_MAJOR_VAR CUDA_VERSION_MINOR_VAR CUDA_VERSION_PATCH_VAR CUDA_VERSION_SHORT_VAR CUDA_VERSION_SHORT_DIGIT_ONLY_VAR)
@@ -284,4 +286,4 @@ function(propagate_option BUILD_OPTION_NAME)
     message(STATUS "${BUILD_OPTION_NAME} -- OFF")
     add_definitions(-D${DEFINE_NAME}=0)
   endif()
-endfunction(propagate_option)
\ No newline at end of file
+endfunction(propagate_option)
-- 
2.34.1

