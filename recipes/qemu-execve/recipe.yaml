context:
  name: qemu-system
  version: "9.1.0"
  alpine_iso_version: "3.20.3"
  emulated_c_stdlib: "sysroot"
  emulated_c_stdlib_version: "2.17"
  qemu_include: "qemu-plugin.h"
  qemu_libexec: "qemu-bridge-helper"
  qemu_applications: "qemu.desktop"
  qemu_bins: ${{ [
      "trace-events-all",
      "bios.bin", "bios-256k.bin", "bios-microvm.bin", "qboot.rom", "vgabios.bin", "vgabios-cirrus.bin",
      "vgabios-stdvga.bin", "vgabios-vmware.bin", "vgabios-qxl.bin", "vgabios-virtio.bin", "vgabios-ramfb.bin",
      "vgabios-bochs-display.bin", "vgabios-ati.bin", "openbios-sparc32", "openbios-sparc64", "openbios-ppc",
      "QEMU,tcx.bin", "QEMU,cgthree.bin", "pxe-e1000.rom", "pxe-eepro100.rom", "pxe-ne2k_pci.rom", "pxe-pcnet.rom",
      "pxe-rtl8139.rom", "pxe-virtio.rom", "efi-e1000.rom", "efi-eepro100.rom", "efi-ne2k_pci.rom", "efi-pcnet.rom",
      "efi-rtl8139.rom", "efi-virtio.rom", "efi-e1000e.rom", "efi-vmxnet3.rom", "qemu-nsis.bmp", "multiboot.bin",
      "multiboot_dma.bin", "linuxboot.bin", "linuxboot_dma.bin", "kvmvapic.bin", "pvh.bin", "s390-ccw.img",
      "s390-netboot.img", "slof.bin", "skiboot.lid", "palcode-clipper", "u-boot.e500", "u-boot-sam460-20100605.bin",
      "qemu_vga.ndrv", "edk2-licenses.txt", "hppa-firmware.img", "hppa-firmware64.img",
      "opensbi-riscv32-generic-fw_dynamic.bin", "opensbi-riscv64-generic-fw_dynamic.bin", "npcm7xx_bootrom.bin",
      "vof.bin", "vof-nvram.bin", "bamboo.dtb", "canyonlands.dtb", "petalogix-s3adsp1800.dtb", "petalogix-ml605.dtb",
    ] | join(' ') }}
  qemu_keymaps: ${{ [
      "ar", "bepo", "cz", "da", "de", "de-ch", "en-gb", "en-us", "es", "et", "fi", "fo", "fr", "fr-be", "fr-ca",
      "fr-ch", "hr", "hu", "is", "it", "ja", "lt", "lv", "mk", "nl", "no", "pl", "pt", "pt-br", "ru", "th", "tr"
    ] | join(' ') }}
  qemu_system_share: ${{ [
      "edk2-aarch64-code.fd", "edk2-arm-code.fd", "edk2-arm-vars.fd", "edk2-riscv-code.fd", "edk2-riscv-vars.fd",
      "edk2-i386-code.fd", "edk2-i386-secure-code.fd", "edk2-i386-vars.fd", "edk2-x86_64-code.fd",
      "edk2-x86_64-secure-code.fd",
    ] | join(' ') }}
  qemu_system_firmware: ${{ [
      "50-edk2-i386-secure.json", "50-edk2-x86_64-secure.json", "60-edk2-aarch64.json", "60-edk2-arm.json",
      "60-edk2-i386.json", "60-edk2-x86_64.json",
    ] | join(' ') }}
  qemu_system_execs: ${{ [
      "qemu-system-aarch64", "qemu-system-cris", "qemu-system-m68k", "qemu-system-mips64", "qemu-system-ppc64",
      "qemu-system-ppc", "qemu-system-rx", "qemu-system-sparc", "qemu-system-xtensa",
      "qemu-system-alpha", "qemu-system-hppa", "qemu-system-microblaze", "qemu-system-mips64el",
      "qemu-system-s390x", "qemu-system-sparc64", "qemu-system-xtensaeb", "qemu-system-arm",
      "qemu-system-i386", "qemu-system-microblazeel", "qemu-system-mipsel", "qemu-system-riscv32", "qemu-system-sh4",
      "qemu-system-tricore", "qemu-system-avr",
      "qemu-system-loongarch64", "qemu-system-mips", "qemu-system-or1k", "qemu-system-riscv64", "qemu-system-sh4eb",
      "qemu-system-x86_64"
    ] | join(' ') }}
  qemu_system_tools: ${{ [
      "elf2dmp", "qemu-io", "qemu-edid", "qemu-nbd", 
      "qemu-img", "qemu-storage-daemon"
    ] | join(' ') }}
  qemu_system_tools_linux: ${{ [
      "qemu-ga", "qemu-vmsr-helper", "qemu-pr-helper"
    ] | join(' ') }}
  qemu_system_icons: ${{ [
      "128x128/apps/qemu.png", "16x16/apps/qemu.png", "24x24/apps/qemu.png", "64x64/apps/qemu.png",
      "256x256/apps/qemu.png", "32x32/apps/qemu.bmp", "32x32/apps/qemu.png", "48x48/apps/qemu.png",
      "512x512/apps/qemu.png", "scalable/apps/qemu.svg"
    ] | join(' ') }}
  qemu_system_locale: ${{ [
      "bg", "de_DE", "fr_FR", "hu", "it", "sv", "tr", "uk", "zh_CN"
    ] | join(' ') }}
  conda_local_install_dir: "_conda_install"

package:
  name: qemu-system
  version: ${{ version }}

source:
  - url: https://gitlab.com/qemu-project/qemu/-/archive/v9.1.0/qemu-v${{ version }}.tar.gz
    sha256: 7a0d0e6b7e955d03c0d418025d8551146dbd4ec0128c1fb7dec791b94de7bbb7
    target_directory: qemu_source
    patches:
      - if: linux
        then:
          - patches/0002-linux-set-MAP_FIXED_NOREPLACE.patch
      - if: osx
        then:
          - patches/0002-osx-attr-meson.build.patch
          - patches/0003-osx-block_file-posix.c.patch
          - patches/0004-osx-audio_coreaudio.m.patch
      - if: win
        then:
          - patches/0002-win-configure-pyvenv.patch
          - patches/0003-win-dbg-MESONINTROSPECT.patch
          - patches/0004-win-fix-PYTHON-var-Makefile.patch
          - patches/0005-win-fix-tracetool-path.patch

  # - url: https://dl-cdn.alpinelinux.org/alpine/latest-stable/releases/aarch64/alpine-minirootfs-3.20.3-aarch64.tar.gz  # [osx]
  #   sha256: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855  # [osx]
  - if: osx
    then:
      - url: https://dl-cdn.alpinelinux.org/alpine/latest-stable/releases/aarch64/alpine-virt-${{ alpine_iso_version }}-aarch64.iso
        sha256: dbd0c2eaa0bfa39e18d075dae07760a9055ffdee0a338c8a35059413b0f76fec
      - url: https://releases.linaro.org/components/kernel/uefi-linaro/latest/release/qemu64/QEMU_EFI.fd
        sha256: 42f915c44de6858f69ae6f1ffc9eaa3884d1b2ca97a7537d81312fb0dfd712cd

build:
  number: 0
  skip:
    - win
  script:
    - export ALPINE_ISO_VERSION=${{ alpine_iso_version }}
    - ${RECIPE_DIR}/helpers/build-${{ target_platform | split('-') |first }}.${{ 'bat' if win else 'sh' }} ${{ conda_local_build_dir }} ${{ conda_local_install_dir }}
    - ${RECIPE_DIR}/helpers/install_resources.py "${{ conda_local_install_dir }}" "bin" "${{ qemu_system_tools }}"
    - ${RECIPE_DIR}/helpers/install_resources.py "${{ conda_local_install_dir }}" "bin" "${{ qemu_system_execs }}"
    - ${RECIPE_DIR}/helpers/install_resources.py "${{ conda_local_install_dir }}" "include" "${{ qemu_include }}"
    - ${RECIPE_DIR}/helpers/install_resources.py "${{ conda_local_install_dir }}" "libexec" "${{ qemu_libexec }}"
    - ${RECIPE_DIR}/helpers/install_resources.py "${{ conda_local_install_dir }}" "share/applications" "${{ qemu_applications }}"
    - ${RECIPE_DIR}/helpers/install_resources.py "${{ conda_local_install_dir }}" "share/qemu" "${{ qemu_bins }}"
    - ${RECIPE_DIR}/helpers/install_resources.py "${{ conda_local_install_dir }}" "share/qemu/keymaps" "${{ qemu_keymaps }}"
    - ${RECIPE_DIR}/helpers/install_resources.py "${{ conda_local_install_dir }}" "share/qemu" "${{ qemu_system_share }}"
    - ${RECIPE_DIR}/helpers/install_resources.py "${{ conda_local_install_dir }}" "share/qemu/firmware" "${{ qemu_system_firmware }}"
    - ${RECIPE_DIR}/helpers/install_resources.py "${{ conda_local_install_dir }}" "share/icons/hicolor" "${{ qemu_system_icons }}"
    - ${RECIPE_DIR}/helpers/install_resources.py "${{ conda_local_install_dir }}" "share/locale" "${{ qemu_system_locale }}"
    - if: linux
      then:
        - ${RECIPE_DIR}/helpers/install_resources.py "${{ conda_local_install_dir }}" "bin" "${{ qemu_system_tools_linux }}"
    # Verify that all locally installed resources have been installed
    - ${RECIPE_DIR}/helpers/uninstalled_resources.py "${{ conda_local_install_dir }}"
# ${RECIPE_DIR}/helpers/install-share.${{ 'bat' if win else 'sh' }}
# ${RECIPE_DIR}/helpers/install-tools.${{ 'bat' if win else 'sh' }}
# ${RECIPE_DIR}/helpers/install-execs.${{ 'bat' if win else 'sh' }}

requirements:
  build:
    - cmake
    # QEMU needs:
    # https://gitlab.com/qemu-project/berkeley-softfloat-3.git (not in conda-forge ... yet?)
    # https://gitlab.com/qemu-project/berkeley-testfloat-3.git (not in conda-forge ... yet?)
    # https://gitlab.com/qemu-project/keycodemapdb.git (not in conda-forge ... yet?)
    # ... and a few more
    - git
    - ninja
    - pkg-config
    - if: unix
      then:
        - ${{ compiler("c") }}
        - ${{ stdlib("c") }}
        - autoconf
        - automake
        - libtool
        - meson
        - patchelf
        - python-qemu-qmp
    - if: osx
      then:
        - clang_osx-arm64
    - if: win
      then:
        - ${{ compiler("m2w64_c") }}
        - ${{ stdlib("m2w64_c") }}
        - binutils
        - gettext
        - m2-autoconf
        - m2-automake-wrapper
        - m2-findutils
        - m2-grep
        - m2-libtool
        - m2-make
        - m2-which
        - packaging
  host:
    - capstone
    - epoxy
    - gnutls
    - glib
    - glfw
    - gtk3
    - gmp
    - libcurl
    - libgcrypt
    - libgsasl
    - libjpeg-turbo
    - libpng
    - libusb
    - lzfse
    - lzo
    - nettle
    - openssh
    - pixman
    # - python ==3.12
    - sdl2
    - sdl2_image
    - snappy
    - sphinx >=3.4.3
    - sphinx-rtd-theme >=0.5
    - zlib
    - if: unix
      then:
        - dtc
        - libfdt
    - if: linux
      then:
        - alsa-lib
        - jack
        - keyutils
        - libaio
        - libegl-devel
        - libnuma
        # - libseccomp  : causes error: 'CLONE_NEWCGROUP' undeclared
        - libslirp
        - libudev1
        - liburing
        - libxkbcommon
    - if: osx
      then:
        - llvmdev
        - zstd
    - if: win
      then:
        - bzip2
  run:
    - capstone
    - lzfse
    - if: unix
      then:
        - libfdt
    - if: linux
      then:
        - libnuma

tests:
  - script:
      - helpers/verify_installed_resources.py "bin" "${{ qemu_system_tools }}"
      - helpers/verify_installed_resources.py "bin" "${{ qemu_system_execs }}"
      - helpers/verify_installed_resources.py "include" "${{ qemu_include }}"
      - helpers/verify_installed_resources.py "libexec" "${{ qemu_libexec }}"
      - helpers/verify_installed_resources.py "share/applications" "${{ qemu_applications }}"
      - helpers/verify_installed_resources.py "share/qemu" "${{ qemu_bins }}"
      - helpers/verify_installed_resources.py "share/qemu/keymaps" "${{ qemu_keymaps }}"
      - helpers/verify_installed_resources.py "share/qemu" "${{ qemu_system_share }}"
      - helpers/verify_installed_resources.py "share/qemu/firmware" "${{ qemu_system_firmware }}"
      - helpers/verify_installed_resources.py "share/icons/hicolor" "${{ qemu_system_icons }}"
      - helpers/verify_installed_resources.py "share/locale" "${{ qemu_system_locale }}"
      - if: linux
        then:
          - helpers/verify_installed_resources.py "bin" "${{ qemu_system_tools_linux }}"

      - qemu-system-x86_64 --help
    requirements:
      run:
        - python >=3.10
    files:
      recipe:
        - helpers/verify_installed_resources.py
  - script:
      - ls -l
      - ls -l _conda_build/tests/ || true
      - pushd _conda_build/tests/qemu-iotests && ./check -r -qcow2 && popd || true
      - pushd _conda_build/ && make check && popd || true
    files:
      source:
        - _conda_build/Makefile
        - _conda_build/tests/
    requirements:
      run:
        - make


about:
  homepage: https://gitlab.com/qemu-project/qemu
  summary: 'QEMU is a generic and open source machine & userspace emulator and virtualizer.'
  description: |
    QEMU is capable of emulating a complete machine in software without any
    need for hardware virtualization support. By using dynamic translation,
    it achieves very good performance. QEMU can also integrate with the Xen
    and KVM hypervisors to provide emulated hardware while allowing the
    hypervisor to manage the CPU. With hypervisor support, QEMU can achieve
    near native performance for CPUs. When QEMU emulates CPUs directly it is
    capable of running operating systems made for one machine (e.g. an ARMv7
    board) on a different machine (e.g. an x86_64 PC board).
    
    QEMU is also capable of providing userspace API virtualization for Linux
    and BSD kernel interfaces. This allows binaries compiled against one
    architecture ABI (e.g. the Linux PPC64 ABI) to be run on a host using a
    different architecture ABI (e.g. the Linux x86_64 ABI). This does not
    involve any hardware emulation, simply CPU and syscall emulation.
    
    QEMU aims to fit into a variety of use cases. It can be invoked directly
    by users wishing to have full control over its behaviour and settings.
    It also aims to facilitate integration into higher level management
    layers, by providing a stable command line interface and monitor API.
    It is commonly invoked indirectly via the libvirt library when using
    open source applicationss such as oVirt, OpenStack and virt-manager.
    QEMU as a whole is released under the GNU General Public License,
    version 2. For full licensing details, consult the LICENSE file.  license: GPL-2.0-only
  license_file:
    - qemu_source/COPYING
    - qemu_source/COPYING.LIB
    - qemu_source/LICENSE
  documentation: https://www.qemu.org/documentation/
  repository: https://gitlab.com/qemu-project/qemu

extra:
  recipe-maintainers:
    -  MementoRC
  feedstock-name: qemu-system
