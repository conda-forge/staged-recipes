# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Jinja variables help maintain the recipe as you'll update the version only here.
{% set name = "canmatrix" %}
{% set version = "0.6" %}
{% set sha256 = "0b5f25e7c20965db3dc31a33468b1694a31e8fb39f53a0c46072e68c87cf60cb" %}
# sha256 is the prefered checksum -- you can get it for a file with:
#  `openssl sha256 <file name>`.
# You may need the openssl package, available on conda-forge
#  `conda install openssl -c conda-forge``

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  fn: {{ name }}-{{ version }}.tar.gz
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  # If getting the source from GitHub remove the line above
  # uncomment the line below and modify as needed
  # url: https://github.com/simplejson/{{ name }}/archive/{{ version }}.tar.gz
  sha256: {{ sha256 }}

build:
  # Uncomment the following line if the package is pure python and the recipe is exactly the same for all platforms.
  # It is okay if the dependencies are not built for all platforms/versions, although selectors are still not allowed.
  # See https://conda-forge.org/docs/meta.html#building-noarch-packages for more details.
  noarch: python
  number: 0
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  script: python -m pip install --no-deps --ignore-installed .

requirements:
  build:
    - python
    - pip
    # if your project compiles code (such as a C extension) then add `toolchain` as a build requirement.
  run:
    - python

test:
  # Some package might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  imports:
    - xlwt
    - xlrd
    - xlsxwriter
    - pyyaml
    - lxml
    - future

about:
  home: https://github.com/ebroecker/canmatrix
  # Remember to specify the license variants for BSD, Apache, GPL, and LGLP.
  # Prefer the short version, e.g: GPL-2.0 instead of GNU General Public License version 2.0
  # See https://opensource.org/licenses/alphabetical
  license: BSD-2-Clause
  # The license_family, i.e. "BSD" if license is "BSD-3-Clause". (optional)
  license_family: BSD
  # It is strongly encouraged to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # See http://conda.pydata.org/docs/building/meta-yaml.html#license-file
  license_file: LICENSE
  summary: 'Converting Can (Controller Area Network) Database Formats .arxml .dbc .dbf .kcd ... '

  # The remaining entries in this section are optional, but recommended
  description: |
    Canmatrix implements a "Python Can Matrix Object" which describes the can-communication and the needed objects (Boardunits, Frames, Signals, Values, ...) 
    Canmatrix also includes two Tools (canconvert and cancompare) for converting and comparing CAN databases.
    
    There are several importers (read) and exporters (write) for this object.
    
    supported file formats for import:
    
        .dbc candb / Vector
        .dbf Busmaster (open source!)
        .kcd kayak (open source!)
        .arxml autosar system description
        .yaml dump of the python object
        .xls(x) excel xls-import, works with .xls-file generated by this lib
        .sym peak pcan can description
    
    supported file formats for export:
    
        .dbc
        .dbf
        .kcd
        .xls(x)
        .json Canard (open source!)
        .arxml (very basic implementation)
        .yaml (dump of the python object)
        .sym
        .xml fibex

  doc_url: 
  dev_url: https://github.com/ebroecker/canmatrix

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - ebroecker
    - altendky
    - danielhrisca
