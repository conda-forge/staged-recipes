From 321586c4a90b77196344750003ec272328de5811 Mon Sep 17 00:00:00 2001
From: Joris Vaillant <joris.vaillant@inria.fr>
Date: Tue, 10 Sep 2024 14:48:16 +0200
Subject: [PATCH] Install bindings on Windows and allow __init__.py to search
 shared library in standard bin directory

---
 python/setup.py                 |  6 ++++-
 python/tracy_client/__init__.py | 42 ++++++++++++++++++++++++++++++++-
 2 files changed, 46 insertions(+), 2 deletions(-)

diff --git a/python/setup.py b/python/setup.py
index 07d568ad..b6389484 100644
--- a/python/setup.py
+++ b/python/setup.py
@@ -5,6 +5,7 @@ import os
 import shutil
 
 from typing import List
+import platform
 
 from setuptools import setup, find_namespace_packages, Extension
 from setuptools.command.build_ext import build_ext
@@ -26,7 +27,10 @@ class DummyBuild(build_ext):
         extdir = os.path.abspath(os.path.dirname(self.get_ext_fullpath(ext.name)))
         extdir = os.path.join(extdir, MODULE_NAME)
 
-        for entry in find_files("*cpython*"):
+        pattern = "*cpython*"
+        if platform.system() == "Windows":
+            pattern = "*cp*win_*"
+        for entry in find_files(pattern):
             shutil.copy(
                 os.path.abspath(entry),
                 os.path.join(extdir, os.path.basename(entry)),
diff --git a/python/tracy_client/__init__.py b/python/tracy_client/__init__.py
index dda15386..1e715c7a 100644
--- a/python/tracy_client/__init__.py
+++ b/python/tracy_client/__init__.py
@@ -1,3 +1,43 @@
 # -*- coding: utf-8 -*-
 
-from tracy_client.tracy import *
+try:
+    from tracy_client.tracy import *
+except ImportError:
+    import platform
+
+    if platform.system() == "Windows":
+        import os
+        import contextlib
+
+        class DllDirectoryManager(contextlib.AbstractContextManager):
+            """Restore DllDirectory state after importing Python module"""
+
+            def add_dll_directory(self, dll_dir: str):
+                # add_dll_directory can fail on relative path and non
+                # existing path.
+                # Since we don't know all the fail criterion we just ignore
+                # thrown exception
+                try:
+                    self.dll_dirs.append(os.add_dll_directory(dll_dir))
+                except OSError:
+                    pass
+
+            def __enter__(self):
+                self.dll_dirs = []
+                return self
+
+            def __exit__(self, *exc_details):
+                for d in self.dll_dirs:
+                    d.close()
+        with DllDirectoryManager() as dll_dir_manager:
+
+            # Standard site-packages to bin path
+            RELATIVE_DLL_PATH = "..\\..\\..\\bin"
+            dll_paths = [os.path.join(
+                os.path.dirname(__file__), RELATIVE_DLL_PATH)]
+            for p in dll_paths:
+                dll_dir_manager.add_dll_directory(p)
+            from tracy_client.tracy import *
+
+    else:
+        raise
-- 
2.34.1

