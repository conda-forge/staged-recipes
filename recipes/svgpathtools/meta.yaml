{% set name = "svgpathtools" %}
{% set version = "1.4" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/teseoch/svgpathtools/archive/{{ version }}.tar.gz
  sha256: 9e3548d3312241b09cd595dca3e23c2a3c54dfee8439d29d9e6b46ca4c773d1b

build:
  noarch: python
  number: 0
  script: "{{ PYTHON }} -m pip install . -vv"

requirements:
  build:
  host:
    - python
    - pip
    - numpy
    - svgwrite
  run:
    - python
    - {{ pin_compatible('numpy') }}
    - svgwrite

test:
  imports:
    - svgpathtools

about:
  home: https://github.com/teseoch/svgpathtools
  license: MIT
  license_family: MIT
  summary: 'A collection of tools for manipulating and analyzing SVG Path objects and Bezier curves.'

  # The remaining entries in this section are optional, but recommended.
  description: |
    svgpathtools contains functions designed to **easily read, write and
    display SVG files** as well as *a large selection of
    geometrically-oriented tools* to **transform and analyze path
    elements**.

    Additionally, the submodule *bezier.py* contains tools for for working
    with general **nth order Bezier curves stored as n-tuples**.

    Some included tools:

    -  **read**, **write**, and **display** SVG files containing Path (and other) SVG elements
    -  convert Bézier path segments to **numpy.poly1d** (polynomial) objects
    -  convert polynomials (in standard form) to their Bézier form
    -  compute **tangent vectors** and (right-hand rule) **normal vectors**
    -  compute **curvature**
    -  break discontinuous paths into their **continuous subpaths**.
    -  efficiently compute **intersections** between paths and/or segments
    -  find a **bounding box** for a path or segment
    -  **reverse** segment/path orientation
    -  **crop** and **split** paths and segments
    -  **smooth** paths (i.e. smooth away kinks to make paths differentiable)
    -  **transition maps** from path domain to segment domain and back (T2t and t2T)
    -  compute **area** enclosed by a closed path
    -  compute **arc length**
    -  compute **inverse arc length**
    -  convert RGB color tuples to hexadecimal color strings and back an optional C extension for a serious speed boost.
  doc_url: https://github.com/teseoch/svgpathtools
  dev_url: https://github.com/teseoch/svgpathtools

extra:
  recipe-maintainers:
    - teseoch
