diff --git cppad_lib/cppad_colpack.cpp cppad_lib/cppad_colpack.cpp
index dc3327053..739363292 100644
--- cppad_lib/cppad_colpack.cpp
+++ cppad_lib/cppad_colpack.cpp
@@ -17,7 +17,7 @@ in the Eclipse Public License, Version 2.0 are satisfied:
 
 # if CPPAD_HAS_COLPACK == 0
 namespace CppAD { namespace local {
-    CPPAD_LIB_EXPORT void this_routine_should_never_get_called(void)
+    void this_routine_should_never_get_called(void)
     {   CPPAD_ASSERT_UNKNOWN(false); }
 } }
 # else // CPPAD_HAS_COLPACK
@@ -52,7 +52,7 @@ the entry with index (i, adolc_pattern[i][k]) is a non-zero
 in the sparsity pattern for the matrix.
 */
 // ----------------------------------------------------------------------
-CPPAD_LIB_EXPORT void cppad_colpack_general(
+void cppad_colpack_general(
     CppAD::vector<size_t>&               color         ,
     size_t                               m             ,
     size_t                               n             ,
@@ -164,7 +164,7 @@ For i = 0 , ... , m-1, and for k = 1, ... ,adolc_pattern[i][0],
 the entry with index (i, adolc_pattern[i][k]) is
 in the sparsity pattern for the symmetric matrix.
 */
-CPPAD_LIB_EXPORT void cppad_colpack_symmetric(
+void cppad_colpack_symmetric(
     CppAD::vector<size_t>&               color         ,
     size_t                               m             ,
     const CppAD::vector<unsigned int*>&  adolc_pattern )
diff --git cppad_lib/json_lexer.cpp cppad_lib/json_lexer.cpp
index 22645e682..efff2bdd0 100644
--- cppad_lib/json_lexer.cpp
+++ cppad_lib/json_lexer.cpp
@@ -221,7 +221,7 @@ void json_lexer::next_non_neg_int(void)
         ok = index_ < json_.size();
     }
     if( ok )
-        ok = std::isdigit( json_[index_] );
+        ok = isdigit( json_[index_] );
     if( ! ok )
     {   std::string expected_token = "non-negative integer";
         std::string found = "'";
@@ -253,7 +253,7 @@ void json_lexer::next_float(void)
     }
     if( ok )
     {   char ch = json_[index_];
-        ok = std::isdigit(ch);
+        ok = isdigit(ch);
         ok |= (ch == '.') | (ch == '+') | (ch == '-');
         ok |= (ch == 'e') | (ch == 'E');
     }
diff --git cppad_lib/json_parser.cpp cppad_lib/json_parser.cpp
index fac417d9f..ac0910cee 100644
--- cppad_lib/json_parser.cpp
+++ cppad_lib/json_parser.cpp
@@ -20,7 +20,7 @@ in the Eclipse Public License, Version 2.0 are satisfied:
 // documentation for this routine is in the file below
 # include <cppad/local/graph/json_parser.hpp>
 
-CPPAD_LIB_EXPORT void CppAD::local::graph::json_parser(
+void CppAD::local::graph::json_parser(
     const std::string& json      ,
     cpp_graph&         graph_obj )
 {   using std::string;
diff --git cppad_lib/json_writer.cpp cppad_lib/json_writer.cpp
index 250345c6e..add4b20a9 100644
--- cppad_lib/json_writer.cpp
+++ cppad_lib/json_writer.cpp
@@ -17,7 +17,7 @@ in the Eclipse Public License, Version 2.0 are satisfied:
 // documentation for this routine is in the file below
 # include <cppad/local/graph/json_writer.hpp>
 
-CPPAD_LIB_EXPORT void CppAD::local::graph::json_writer(
+void CppAD::local::graph::json_writer(
     std::string&                              json                   ,
     const cpp_graph&                          graph_obj              )
 {   using std::string;
diff --git include/cppad/local/cppad_colpack.hpp include/cppad/local/cppad_colpack.hpp
index ee96ab5fe..e3332a804 100644
--- include/cppad/local/cppad_colpack.hpp
+++ include/cppad/local/cppad_colpack.hpp
@@ -11,9 +11,14 @@ Secondary License when the conditions for such availability set forth
 in the Eclipse Public License, Version 2.0 are satisfied:
       GNU General Public License, Version 2.0 or later.
 ---------------------------------------------------------------------------- */
-# if CPPAD_HAS_COLPACK
 
 namespace CppAD { namespace local { // BEGIN_CPPAD_LOCAL_NAMESPACE
+
+# if ! CPPAD_HAS_COLPACK
+
+CPPAD_LIB_EXPORT void this_routine_should_never_get_called(void);
+
+# else
 /*!
 \file cppad_colpack.hpp
 External interface to Colpack routines used by cppad.
@@ -59,7 +64,7 @@ it is not the case that both
 This routine tries to minimize, with respect to the choice of colors,
 the number of colors.
 */
-extern void cppad_colpack_general(
+CPPAD_LIB_EXPORT void cppad_colpack_general(
           CppAD::vector<size_t>&         color         ,
     size_t                               m             ,
     size_t                               n             ,
@@ -91,14 +96,14 @@ The properties of this coloring have not yet been determined; see
 Efficient Computation of Sparse Hessians Using Coloring
 and Automatic Differentiation (pdf/ad/gebemedhin14.pdf)
 */
-extern void cppad_colpack_symmetric(
+CPPAD_LIB_EXPORT void cppad_colpack_symmetric(
           CppAD::vector<size_t>&         color         ,
     size_t                               n             ,
     const CppAD::vector<unsigned int*>&  adolc_pattern
 );
 
-} } // END_CPPAD_LOCAL_NAMESPACE
-
 # endif
+
+} } // END_CPPAD_LOCAL_NAMESPACE
 # endif
 
diff --git include/cppad/local/graph/json_lexer.hpp include/cppad/local/graph/json_lexer.hpp
index 11873ce54..671e62fc7 100644
--- include/cppad/local/graph/json_lexer.hpp
+++ include/cppad/local/graph/json_lexer.hpp
@@ -14,12 +14,13 @@ CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-19 Bradley M. Bell
 
 # include <string>
 # include <cppad/core/cppad_assert.hpp>
+# include <cppad/local/define.hpp>
 
 // BEGIN_NAMESPACE_CPPAD_LOCAL_GRAPH
 namespace CppAD { namespace local { namespace graph {
 
 // ===========================================================================
-class json_lexer {
+class CPPAD_LIB_EXPORT json_lexer {
 // ===========================================================================
 
 /*
diff --git include/cppad/local/graph/json_parser.hpp include/cppad/local/graph/json_parser.hpp
index 17bcc7c7e..39cc61fa6 100644
--- include/cppad/local/graph/json_parser.hpp
+++ include/cppad/local/graph/json_parser.hpp
@@ -14,6 +14,7 @@ CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-19 Bradley M. Bell
 -------------------------------------------------------------------------- */
 
 # include <string>
+# include <cppad/local/define.hpp>
 # include <cppad/utility/vector.hpp>
 # include <cppad/local/graph/cpp_graph_op.hpp>
 # include <cppad/core/graph/cpp_graph.hpp>
@@ -42,7 +43,7 @@ Upon return it is a $cref cpp_ad_graph$$ representation of this function.
 $head Prototype$$
 $srccode%hpp% */
 namespace CppAD { namespace local { namespace graph {
-    void json_parser(
+    CPPAD_LIB_EXPORT void json_parser(
         const std::string&  json      ,
         cpp_graph&          graph_obj
     );
diff --git include/cppad/local/graph/json_writer.hpp include/cppad/local/graph/json_writer.hpp
index 36a4cb39f..7f3fd9b85 100644
--- include/cppad/local/graph/json_writer.hpp
+++ include/cppad/local/graph/json_writer.hpp
@@ -14,6 +14,7 @@ CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-19 Bradley M. Bell
 -------------------------------------------------------------------------- */
 
 # include <string>
+# include <cppad/local/define.hpp>
 # include <cppad/utility/vector.hpp>
 # include <cppad/local/graph/cpp_graph_op.hpp>
 # include <cppad/utility/to_string.hpp>
@@ -41,7 +42,7 @@ This is a $code cpp_graph$$ object.
 $head Prototype$$
 $srccode%hpp% */
 namespace CppAD { namespace local { namespace graph {
-    void json_writer(
+    CPPAD_LIB_EXPORT void json_writer(
         std::string&       json        ,
         const cpp_graph&   graph_obj
     );
