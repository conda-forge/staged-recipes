{% set name = "decorator" %}
{% set version = "4.0.11" %}
{% set hash_type = "sha256" %}
{% set hash = "953d6bf082b100f43229cf547f4f97f97e970f5ad645ee7601d55ff87afdfe76" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  fn: {{ name }}-{{ version }}.tar.gz
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  {{ hash_type }}: {{ hash }}

build:
  number: 0
  script: python setup.py install --single-version-externally-managed --record=record.txt

requirements:
  build:
    - python
    - setuptools
  run:
    - python

test:
  imports:
    - decorator

about:
  home: http://pythonhosted.org/decorator
  license_family: BSD
  license: BSD 2-Clause
  license_file: LICENSE.txt
  summary: Better living through Python with decorators.
  description: |
    The decorator module is over ten years old, but still alive and kicking.
    It is used by several frameworks (IPython, scipy, authkit, pylons, pycuda,
    sugar, ...) and has been stable for a long time. It is your best option
    if you want to preserve the signature of decorated functions in a
    consistent way across Python releases. 
  dev_url: https://github.com/micheles/decorator
  doc_url: http://pythonhosted.org/decorator

extra:
  recipe-maintainers:
    - goanpeca
