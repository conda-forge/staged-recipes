# This example shows how to define a recipe using the new YAML based recipe format introduced by 
# CEP 13.

# For more information about this format see: https://prefix-dev.github.io/rattler-build/latest/reference/recipe_file/

# The main differences with the old format is that no preprocessing is required for the file to be valid YAML.
# This means:
# - No "selectors", use YAML if-then-else expressions instead (https://prefix-dev.github.io/rattler-build/latest/selectors/)
# - Jinja expressions are formatted with a leading `$` to make them valid YAML

# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Define variables in this section that you can use in other parts.
context:
  name: simplejson
  version: "3.8.2"

package:
  name: ${{ name|lower }}
  version: ${{ version }}

source:
  url: https://pypi.org/packages/source/${{ name[0] }}/${{ name }}/${{ name }}-${{ version }}.tar.gz
  # If getting the source from GitHub, remove the line above,
  # uncomment the line below, and modify as needed. Use releases if available:
  # url: https://github.com/simplejson/simplejson/releases/download/${{ version }}/simplejson-${{ version }}.tar.gz
  # and otherwise fall back to archive:
  # url: https://github.com/simplejson/simplejson/archive/v${{ version }}.tar.gz
  sha256: d58439c548433adcda98e695be53e526ba940a4b9c44fb9a05d92cd495cdd47f
  # sha256 is the preferred checksum -- you can get it for a file with:
  #  `openssl sha256 <file name>`,
  # or, in one go without keeping the file with:
  # `curl -L <url> | sha256
  # You may need the packages or openssl and/or curl, available on conda-forge:
  #  `conda install openssl curl -c conda-forge``

build:
  # Uncomment the following line if the package is pure Python and the recipe is exactly the same for all platforms.
  # It is okay if the dependencies are not built for all platforms/versions, although selectors are still not allowed.
  # See https://conda-forge.org/docs/maintainer/knowledge_base.html#noarch-python for more details.
  # noarch: python
  # If the installation is complex, or different between Unix and Windows, use separate build.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Uncomment the following lines to limit to Python 3.5 and newer (for example)
  # skip:
  #   - match(python, "<3.5")
  # or the following to limit to Windows.
  # skip:
  #   - win
  script: python -m pip install . -vv
  number: 0

requirements:
  build:
    # If your project compiles code (such as a C extension) then add the required compilers as separate entries here.
    # Compiler names include 'c', 'cxx' and 'fortran', among others.
    - ${{ compiler('c') }}
    - ${{ stdlib('c') }}  # If you need any compiler, add the C standard library ("stdlib") too
  host:
    - python
    - pip
    - setuptools
  run:
    - python

tests:
  # Some packages might need a `test/commands` key to check CLI.
  - python:
      # A list of modules that the test will try to import
      imports:
      - simplejson
      - simplejson.tests
      # Also run `pip check` to verify the integrity 
      pip_check: true

about:
  homepage: https://github.com/simplejson/simplejson
  summary: 'Simple, fast, extensible JSON encoder/decoder for Python'
  description: |
    simplejson is a simple, fast, complete, correct and extensible
    JSON <https://json.org> encoder and decoder for Python 2.5+ and
    Python 3.3+. It is pure Python code with no dependencies, but includes
    an optional C extension for a serious speed boost.
  # Remember to specify the license variants for BSD, Apache, GPL, and LGPL.
  # Use the SPDX identifier, e.g: GPL-2.0-only instead of GNU General Public License version 2.0
  # See https://spdx.org/licenses/
  license: MIT
  # It is required to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # Please also note that some projects have multiple license files which all need to be added using a valid yaml list.
  # See https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#license-file
  license_file: LICENSE.txt
  # The documentation and repository URLs are optional.
  documentation: https://simplejson.readthedocs.io/
  repository: https://github.com/simplejson/simplejson

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - LisaSimpson
    - LandoCalrissian
