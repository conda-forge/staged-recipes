{% set name = "qemu-system" %}
{% set version = "9.1.0" %}

{% set qemu_system_share = [
    "edk2-aarch64-code.fd", "edk2-arm-code.fd", "edk2-arm-vars.fd", "edk2-riscv-code.fd", "edk2-riscv-vars.fd",
    "edk2-i386-code.fd", "edk2-i386-secure-code.fd", "edk2-i386-vars.fd", "edk2-x86_64-code.fd",
    "edk2-x86_64-secure-code.fd"
  ]
%}
{% set qemu_system_firmware = [
    "50-edk2-i386-secure.json", "50-edk2-x86_64-secure.json", "60-edk2-aarch64.json", "60-edk2-arm.json",
    "60-edk2-i386.json", "60-edk2-x86_64.json"
  ]
%}
{% set qemu_system_tools = [
      "elf2dmp", "qemu-io", "qemu-edid", "qemu-nbd", 
      "qemu-img", "qemu-storage-daemon"
    ]
%}
{% set qemu_system_tools_linux = [
    "qemu-ga", "qemu-vmsr-helper", "qemu-pr-helper"
  ]
%}
{% set qemu_system_icons = [
    "128x128/apps/qemu.png", "16x16/apps/qemu.png", "24x24/apps/qemu.png", "64x64/apps/qemu.png",
    "256x256/apps/qemu.png", "32x32/apps/qemu.bmp", "32x32/apps/qemu.png", "48x48/apps/qemu.png",
    "512x512/apps/qemu.png", "scalable/apps/qemu.svg"
  ]
%}
{% set qemu_system_locale = [
    "bg", "de_DE", "fr_FR", "hu", "it", "sv", "tr", "uk", "zh_CN"
  ]
%}

package:
  name: qemu-system-split
  version: {{ version }}

source:
  - url: https://gitlab.com/qemu-project/qemu/-/archive/v{{ version }}/qemu-v{{ version }}.tar.gz
    sha256: 7a0d0e6b7e955d03c0d418025d8551146dbd4ec0128c1fb7dec791b94de7bbb7
    folder: qemu_source
    patches:
      - patches/0002-osx-attr-meson.build.patch  # [osx]
      - patches/0003-osx-block_file-posix.c.patch  # [osx]
      - patches/0004-osx-audio_coreaudio.m.patch  # [osx]
      - patches/0002-win-configure-pyvenv.patch  # [win]
      - patches/0003-win-dbg-MESONINTROSPECT.patch  # [win]
      - patches/0004-win-fix-PYTHON-var-Makefile.patch  # [win]
      - patches/0005-win-fix-tracetool-path.patch  # [win]

build:
  number: 0
  # skip: True  # [win]
  script_env:
    - CONDA_QEMU_INSTALL_DIR=${PREFIX}

requirements:
  build:
    - git
    - ninja
    - pkg-config

    - {{ compiler("c") }}  # [linux or osx]
    - {{ stdlib("c") }}  # [linux or osx]
    - autoconf  # [linux or osx]
    - automake  # [linux or osx]
    - libtool  # [linux or osx]
    - meson  # [linux or osx]

    - clang_osx-arm64  # [osx]

    - {{ compiler("m2w64_c") }}  # [win]
    - {{ stdlib("m2w64_c") }}  # [win]
    # - m2w64-binutils  # [win]
    - gettext  # [win]
    - m2-autoconf  # [win]
    - m2-automake-wrapper  # [win]
    - m2-findutils  # [win]
    - m2-grep  # [win]
    - m2-libtool  # [win]
    - m2-make  # [win]
    - m2-which  # [win]
    - packaging  # [win]
  host:
    - bzip2
    - epoxy
    - glib
    - glfw
    - gtk3
    - libcurl
    - libjpeg-turbo
    - libpng
    - libusb
    - lzfse
    - lzo
    - pixman
    - sdl2
    - sdl2_image
    - snappy
    - sphinx >=3.4.3
    - sphinx-rtd-theme >=0.5
    - zlib

    - dtc  # [unix]
    - gmp  # [unix]
    - gnutls  # [unix]
    - libcapstone  # [unix]
    - libgcrypt  # [unix]
    - libgsasl  # [unix]
    - libfdt  # [unix]
    - nettle  # [unix]
    - openssh  # [unix]

    - alsa-lib  # [linux]
    - jack  # [linux]
    - keyutils  # [linux]
    - libaio  # [linux]
    - libegl-devel  # [linux]
    - libnuma  # [linux]
    # - libseccomp  # [linux]  error: 'CLONE_NEWCGROUP' undeclared
    - libslirp  # [linux]
    - libudev1  # [linux]
    - liburing  # [linux]
    - libxkbcommon  # [linux]

    - llvmdev  # [osx]
    - zstd  # [osx]

    - m2-libgnutls  # [win]
    - m2-libgcrypt  # [win]
    - m2-libnettle  # [win]
    - m2-openssh  # [win]
outputs:
  - name: qemu-system-shared-resources
    files:
      {% for file in qemu_system_share %}
      - share/qemu/{{ file }}
      {% endfor %}

      {% for file in qemu_system_firmware %}
      - share/qemu/firmware/{{ file }}
      {% endfor %}

      {% for file in qemu_system_icons %}
      - share/icons/hicolor/{{ file }}
      {% endfor %}

      - share/applications/qemu.desktop
    requirements:
      build:
        - {{ compiler("c") }}
        - {{ stdlib("c") }}
      host:
      run:
        - bzip2
        - libcurl
        - lzfse
        - zstd

        - dtc  # [unix]
        - gnutls  # [unix]
        - openssh  # [unix]

        - keyutils  # [linux]
        - libaio  # [linux]
        - libnuma  # [linux]
        - libslirp  # [linux]
        - liburing  # [linux]

        - libfdt  # [osx]
        - llvmdev  # [osx]

        - m2-libgnutls  # [win]
        - m2-openssh  # [win]
    test:
      commands:
        - echo "No tests yet"


  - name: qemu-system-tools
    files:
      {% for file in qemu_system_tools %}
      - bin/{{ file }}
      {% endfor %}

      {% for file in qemu_system_tools_linux %}
      - bin/{{ file }}  # [linux]
      {% endfor %}

      - libexec/qemu-bridge-helper  # [linux]
    requirements:
      build:
        - {{ compiler("c") }}
        - {{ stdlib("c") }}
      host:
        - {{ pin_subpackage("qemu-system-shared-resources", exact=true) }}
        - bzip2
        - libglib
        - libcurl
        - lzfse
        - zstd
        - zlib

        - gnutls  # [unix]
        - openssh  # [unix]

        - libaio  # [linux]
        - libnuma  # [linux]
        - liburing  # [linux]

        - m2-libgnutls  # [win]
        - m2-openssh  # [win]
      run:
        - {{ pin_subpackage("qemu-system-shared-resources", exact=true) }}
        - bzip2
        - libglib
        - libcurl
        - lzfse
        - zstd

        - gnutls  # [unix]
        - openssh  # [unix]

        - libaio  # [linux]
        - libnuma  # [linux]
        - liburing  # [linux]

        - m2-libgnutls  # [win]
        - m2-openssh  # [win]
    test:
      commands:
        {% for file in qemu_system_tools %}
        - test -f ${PREFIX}/bin/{{ file }}  # [unix]
        - if not exist %PREFIX%\\bin\\{{ file }} echo "File not found"  # [not unix]
        - {{ file }} --version || true
        {% endfor %}

        {% for file in qemu_system_tools_linux %}
        - test -f ${PREFIX}/bin/{{ file }}  # [linux]
        {% endfor %}

        - ${PREFIX}/libexec/qemu-bridge-helper --version || true  # [linux]


  - name: qemu-system-{{ qemu_system_execs }}
    files:
      - bin/qemu-system-{{ qemu_system_execs }}
    requirements:
      build:
        - {{ compiler("c") }}
        - {{ stdlib("c") }}
      host:
        - epoxy
        - glib
        - libcurl
        - libjpeg-turbo
        - libpng
        - libusb
        - lzfse
        - lzo
        - pixman
        - sdl2
        - snappy
        - zlib
        - zstd

        - gnutls  # [unix]
        - libcapstone  # [unix]
        - libfdt  # [unix]
        - ncurses  # [unix]
        - openssh  # [unix]

        - alsa-lib  # [linux]
        - jack  # [linux]
        - keyutils  # [linux]
        - libaio  # [linux]
        - libnuma  # [linux]
        - libslirp  # [linux]
        - liburing  # [linux]
        - pulseaudio-client  # [linux]

        - m2-libgnutls  # [win]
        - m2-openssh  # [win]
      run:
        - {{ pin_subpackage("qemu-system-shared-resources", exact=true) }}
        - bzip2
        - libglib
        - libiconv
        - libcurl
        - libjpeg-turbo
        - libpng
        - lzfse
        - lzo
        - pixman
        - sdl2
        - snappy
        - zstd

        - gnutls  # [unix]
        - libcapstone  # [unix]
        - libfdt  # [unix]
        - ncurses  # [unix]
        - openssh  # [unix]

        - alsa-lib  # [linux]
        - epoxy  # [linux]
        - jack  # [linux]
        - keyutils  # [linux]
        - libaio  # [linux]
        - libnuma  # [linux]
        - libslirp  # [linux]
        - liburing  # [linux]
        - pulseaudio-client  # [linux]

        - m2-libgnutls  # [win]
        - m2-openssh  # [win]
    test:
      commands:
        - test -f $PREFIX/bin/qemu-system-{{ qemu_system_execs }}  # [linux or osx]
        - qemu-system-{{ qemu_system_execs }} --version


about:
  home: https://gitlab.com/qemu-project/qemu
  summary: 'QEMU is a generic and open source machine & userspace emulator and virtualizer.'
  description: |
    QEMU is capable of emulating a complete machine in software without any
    need for hardware virtualization support. By using dynamic translation,
    it achieves very good performance. QEMU can also integrate with the Xen
    and KVM hypervisors to provide emulated hardware while allowing the
    hypervisor to manage the CPU. With hypervisor support, QEMU can achieve
    near native performance for CPUs. When QEMU emulates CPUs directly it is
    capable of running operating systems made for one machine (e.g. an ARMv7
    board) on a different machine (e.g. an x86_64 PC board).
    
    QEMU is also capable of providing userspace API virtualization for Linux
    and BSD kernel interfaces. This allows binaries compiled against one
    architecture ABI (e.g. the Linux PPC64 ABI) to be run on a host using a
    different architecture ABI (e.g. the Linux x86_64 ABI). This does not
    involve any hardware emulation, simply CPU and syscall emulation.
    
    QEMU aims to fit into a variety of use cases. It can be invoked directly
    by users wishing to have full control over its behaviour and settings.
    It also aims to facilitate integration into higher level management
    layers, by providing a stable command line interface and monitor API.
    It is commonly invoked indirectly via the libvirt library when using
    open source applicationss such as oVirt, OpenStack and virt-manager.
    QEMU as a whole is released under the GNU General Public License,
    version 2. For full licensing details, consult the LICENSE file.
  license: GPL-2.0-only
  license_file:
    - qemu_source/COPYING
    - qemu_source/COPYING.LIB
    - qemu_source/LICENSE

extra:
  recipe-maintainers:
    -  MementoRC
  feedstock-name: qemu-system
