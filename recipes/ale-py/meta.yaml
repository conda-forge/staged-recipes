# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Jinja variables help maintain the recipe as you'll update the version only here.
# Using the name variable with the URL in line 14 is convenient
# when copying and pasting from another recipe, but not really needed.
{% set name = "ale-py" %}
{% set version = "0.7.2" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/mgbellemare/Arcade-Learning-Environment/archive/refs/tags/v{{ version }}.tar.gz
  # url: https://github.com/openai/{{ name }}/archive/refs/tags/{{ version }}.tar.gz
  # url: https://pypi.org/project/ale-py/0.7.2/#files/ale_py-0.7.2-cp310-cp310-macosx_10_15_x86_64.whl
  # url: https://pypi.io/packages/py2.py3/a/{{ name }}/{{ name }}-{{ version }}-cp310-cp310-macosx_10_15_x86_64.whl
  # url: https://pypi.io/packages/py2.py3/p/{{ name }}/{{ name }}-{{ version }}-py2.py3-none-any.whl
  # url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  # If getting the source from GitHub, remove the line above,
  # uncomment the line below, and modify as needed. Use releases if available:
  # url: https://github.com/simplejson/simplejson/releases/download/{{ version }}/simplejson-{{ version }}.tar.gz
  # and otherwise fall back to archive:
  # url: https://github.com/simplejson/simplejson/archive/v{{ version }}.tar.gz
  sha256: b2b9c33292ea3386af61371d94ab0c5d07c61010754f0dc4447f0b14b71303e9
  # sha256 is the preferred checksum -- you can get it for a file with:
  #  `openssl sha256 <file name>`.
  # You may need the openssl package, available on conda-forge:
  #  `conda install openssl -c conda-forge``

build:
  # Uncomment the following line if the package is pure Python and the recipe is exactly the same for all platforms.
  # It is okay if the dependencies are not built for all platforms/versions, although selectors are still not allowed.
  # See https://conda-forge.org/docs/maintainer/knowledge_base.html#noarch-python for more details.
  # noarch: python
  number: 0
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  script: "{{ PYTHON }} -m pip install . -vv"

requirements:
  build:
    # If your project compiles code (such as a C extension) then add the required compilers as separate entries here.
    # Compilers are named 'c', 'cxx' and 'fortran'.
    - {{ compiler('cxx') }}
    - cmake
    - sdl2
    - make  # [not win]
    - ninja  # [win]
  host:
    - python
    - pip
  run:
    - python
    - libzlib

test:
  # Some packages might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  imports:
    - ale_py
    # - simplejson
    # - simplejson.tests
  # For python packages, it is useful to run pip check. However, sometimes the
  # metadata used by pip is out of date. Thus this section is optional if it is
  # failing.
  requires:
    - pip
  commands:
    - pip check

about:
  home: https://github.com/mgbellemare/Arcade-Learning-Environment
  # Remember to specify the license variants for BSD, Apache, GPL, and LGPL.
  # Use the SPDX identifier, e.g: GPL-2.0-only instead of GNU General Public License version 2.0
  # See https://spdx.org/licenses/
  license: GPL-2.0-only
  # The license_family, i.e. "BSD" if license is "BSD-3-Clause". (optional)
  license_family: GPL
  # It is strongly encouraged to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # See https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#license-file
  license_file: LICENSE.txt
  summary: 'Simple, fast, extensible JSON encoder/decoder for Python'
  # The remaining entries in this section are optional, but recommended.
  description: |
    The Arcade Learning Environment (ALE) is a simple framework that allows 
    researchers and hobbyists to develop AI agents for Atari 2600 games.
  doc_url: https://github.com/mgbellemare/Arcade-Learning-Environment#readme
  dev_url: https://github.com/mgbellemare/Arcade-Learning-Environment

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - mxr-conda
    - dsangillo
