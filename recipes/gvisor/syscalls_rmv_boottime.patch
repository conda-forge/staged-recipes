diff --git a/pkg/sentry/syscalls/linux/sys_time.go b/pkg/sentry/syscalls/linux/sys_time.go
index 2d2aa08..5a22492 100644
--- a/pkg/sentry/syscalls/linux/sys_time.go
+++ b/pkg/sentry/syscalls/linux/sys_time.go
@@ -122,15 +122,8 @@ func getClock(t *kernel.Task, clockID int32) (ktime.Clock, error) {
 	switch clockID {
 	case linux.CLOCK_REALTIME, linux.CLOCK_REALTIME_COARSE:
 		return t.Kernel().RealtimeClock(), nil
-	case linux.CLOCK_MONOTONIC, linux.CLOCK_MONOTONIC_COARSE,
-		linux.CLOCK_MONOTONIC_RAW, linux.CLOCK_BOOTTIME:
+	case linux.CLOCK_MONOTONIC, linux.CLOCK_MONOTONIC_COARSE, linux.CLOCK_MONOTONIC_RAW:
 		// CLOCK_MONOTONIC approximates CLOCK_MONOTONIC_RAW.
-		// CLOCK_BOOTTIME is internally mapped to CLOCK_MONOTONIC, as:
-		// - CLOCK_BOOTTIME should behave as CLOCK_MONOTONIC while also
-		//   including suspend time.
-		// - gVisor has no concept of suspend/resume.
-		// - CLOCK_MONOTONIC already includes save/restore time, which is
-		//   the closest to suspend time.
 		return t.Kernel().MonotonicClock(), nil
 	case linux.CLOCK_PROCESS_CPUTIME_ID:
 		return t.ThreadGroup().CPUClock(), nil
diff --git a/pkg/sentry/syscalls/linux/sys_timerfd.go b/pkg/sentry/syscalls/linux/sys_timerfd.go
index cf49b43..1ce5ce4 100644
--- a/pkg/sentry/syscalls/linux/sys_timerfd.go
+++ b/pkg/sentry/syscalls/linux/sys_timerfd.go
@@ -37,7 +37,7 @@ func TimerfdCreate(t *kernel.Task, args arch.SyscallArguments) (uintptr, *kernel
 	switch clockID {
 	case linux.CLOCK_REALTIME:
 		c = t.Kernel().RealtimeClock()
-	case linux.CLOCK_MONOTONIC, linux.CLOCK_BOOTTIME:
+	case linux.CLOCK_MONOTONIC:
 		c = t.Kernel().MonotonicClock()
 	default:
 		return 0, nil, syserror.EINVAL
diff --git a/test/syscalls/linux/clock_gettime.cc b/test/syscalls/linux/clock_gettime.cc
index 7f60150..13fa79d 100644
--- a/test/syscalls/linux/clock_gettime.cc
+++ b/test/syscalls/linux/clock_gettime.cc
@@ -128,9 +128,6 @@ std::string PrintClockId(::testing::TestParamInfo<clockid_t> info) {
       return "CLOCK_MONOTONIC_COARSE";
     case CLOCK_MONOTONIC_RAW:
       return "CLOCK_MONOTONIC_RAW";
-    case CLOCK_BOOTTIME:
-      // CLOCK_BOOTTIME is a monotonic clock.
-      return "CLOCK_BOOTTIME";
     default:
       return absl::StrCat(info.param);
   }
@@ -139,13 +136,15 @@ std::string PrintClockId(::testing::TestParamInfo<clockid_t> info) {
 INSTANTIATE_TEST_SUITE_P(ClockGettime, MonotonicClockTest,
                          ::testing::Values(CLOCK_MONOTONIC,
                                            CLOCK_MONOTONIC_COARSE,
-                                           CLOCK_MONOTONIC_RAW, CLOCK_BOOTTIME),
+                                           CLOCK_MONOTONIC_RAW),
                          PrintClockId);
 
 TEST(ClockGettime, UnimplementedReturnsEINVAL) {
   SKIP_IF(!IsRunningOnGvisor());
 
   struct timespec tp;
+  EXPECT_THAT(clock_gettime(CLOCK_BOOTTIME, &tp),
+              SyscallFailsWithErrno(EINVAL));
   EXPECT_THAT(clock_gettime(CLOCK_REALTIME_ALARM, &tp),
               SyscallFailsWithErrno(EINVAL));
   EXPECT_THAT(clock_gettime(CLOCK_BOOTTIME_ALARM, &tp),
diff --git a/test/syscalls/linux/timerfd.cc b/test/syscalls/linux/timerfd.cc
index 86ed87b..28f522a 100644
--- a/test/syscalls/linux/timerfd.cc
+++ b/test/syscalls/linux/timerfd.cc
@@ -45,7 +45,6 @@ PosixErrorOr<FileDescriptor> TimerfdCreate(int clockid, int flags) {
 // - Because clock_gettime(CLOCK_MONOTONIC) is implemented through the VDSO,
 // it technically uses a closely-related, but distinct, time domain from the
 // CLOCK_MONOTONIC used to trigger timerfd expirations. The same applies to
-// CLOCK_BOOTTIME which is an alias for CLOCK_MONOTONIC.
 absl::Duration TimerSlack() { return absl::Milliseconds(500); }
 
 class TimerfdTest : public ::testing::TestWithParam<int> {};
@@ -220,15 +219,13 @@ std::string PrintClockId(::testing::TestParamInfo<int> info) {
   switch (info.param) {
     case CLOCK_MONOTONIC:
       return "CLOCK_MONOTONIC";
-    case CLOCK_BOOTTIME:
-      return "CLOCK_BOOTTIME";
     default:
       return absl::StrCat(info.param);
   }
 }
 
 INSTANTIATE_TEST_SUITE_P(AllTimerTypes, TimerfdTest,
-                         ::testing::Values(CLOCK_MONOTONIC, CLOCK_BOOTTIME),
+                         ::testing::Values(CLOCK_MONOTONIC),
                          PrintClockId);
 
 TEST(TimerfdClockRealtimeTest, ClockRealtime) {
diff --git a/test/syscalls/linux/vdso_clock_gettime.cc b/test/syscalls/linux/vdso_clock_gettime.cc
index ce1899f..05f3771 100644
--- a/test/syscalls/linux/vdso_clock_gettime.cc
+++ b/test/syscalls/linux/vdso_clock_gettime.cc
@@ -40,8 +40,6 @@ std::string PrintClockId(::testing::TestParamInfo<clockid_t> info) {
       return "CLOCK_MONOTONIC";
     case CLOCK_REALTIME:
       return "CLOCK_REALTIME";
-    case CLOCK_BOOTTIME:
-      return "CLOCK_BOOTTIME";
     default:
       return absl::StrCat(info.param);
   }
@@ -98,8 +96,7 @@ TEST_P(CorrectVDSOClockTest, IsCorrect) {
 }
 
 INSTANTIATE_TEST_SUITE_P(ClockGettime, CorrectVDSOClockTest,
-                         ::testing::Values(CLOCK_MONOTONIC, CLOCK_REALTIME,
-                                           CLOCK_BOOTTIME),
+                         ::testing::Values(CLOCK_MONOTONIC, CLOCK_REALTIME),
                          PrintClockId);
 
 }  // namespace
diff --git a/vdso/syscalls.h b/vdso/syscalls.h
index b6d15a7..04cebd7 100644
--- a/vdso/syscalls.h
+++ b/vdso/syscalls.h
@@ -25,6 +25,7 @@
 #include <fcntl.h>
 #include <stddef.h>
 #include <sys/types.h>
+#include <asm-generic/unistd.h>
 
 namespace vdso {
 
diff --git a/vdso/vdso.cc b/vdso/vdso.cc
index c2585d5..6265ad2 100644
--- a/vdso/vdso.cc
+++ b/vdso/vdso.cc
@@ -33,8 +33,6 @@ int __common_clock_gettime(clockid_t clock, struct timespec* ts) {
       ret = ClockRealtime(ts);
       break;
 
-    case CLOCK_BOOTTIME:
-      // Fallthrough, CLOCK_BOOTTIME is an alias for CLOCK_MONOTONIC
     case CLOCK_MONOTONIC:
       ret = ClockMonotonic(ts);
       break;
@@ -124,12 +122,7 @@ extern "C" int __kernel_clock_getres(clockid_t clock, struct timespec* res) {
 
   switch (clock) {
     case CLOCK_REALTIME:
-    case CLOCK_MONOTONIC:
-    case CLOCK_BOOTTIME: {
-      if (res == nullptr) {
-        return 0;
-      }
-
+    case CLOCK_MONOTONIC: {
       res->tv_sec = 0;
       res->tv_nsec = 1;
       break;
