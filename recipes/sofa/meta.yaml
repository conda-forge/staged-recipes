{% set name = "sofa" %}
{% set version = "23.12.99" %}

package:
  name: {{ name|lower }}-split
  version: {{ version }}

source:
  # - url: https://github.com/sofa-framework/sofa/archive/refs/tags/v{{ version }}.tar.gz 
    # sha256: 5c56148d094bbb69bd576941d6e2a023327105af248b40d30274afa498489e6e
  path: ../../../../../sofa-dev-master/src/sofa
  patches:
    # The WinDepPack (Windows Dependency Package) of Sofa is not used in a conda environment as 
    # dependencies are handled as conda packages. This seems to break the installation of Sofa and the 
    # further compilation of external Sofa plugins. For the current release, WinDepPack usage is forced
    # in the cmake files as long Sofa is built on Windows. A solution must be investigated with the 
    # dev team to have the capability to at least disable it.
    - patches/0002-Remove-WinDepPack.patch
    # Some components that are part of the main SOFA code tree have to be compiled separately
    # as conda packages split the sofa-core part from GUI related components. SOFA CMakeFiles
    # needs to be patched to allow isolated compilation.
    - patches/0007-Allow-components-to-be-compiled-out-of-SOFA.patch

build:
  number: 0
  skip: true  # [osx]

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - cmake
    - make                           # [unix]
    - ninja                          # [win]
  host:
    - zlib
    - tinyxml2
    - eigen
    - libboost-devel
    - cxxopts
  run:
    - eigen
    - libboost-devel
    
outputs:
  - name: libsofa-core
    script: install-core.bat  # [win]
    script: install-core.sh   # [not win]
    build:
      run_exports:
        - {{ pin_subpackage("libsofa-core", max_pin='x.x.x') }}
    requirements:
      build:
       # for strong run-exports ?
        - {{ compiler('cxx') }}

    test:
      commands:
        - test -f $PREFIX/lib/libSofa.Core${SHLIB_EXT}.{{ version }}  # [unix]
        - if not exist %LIBRARY_PREFIX%\bin\Sofa.Core.dll exit 1      # [win]

  - name: libsofa-core-devel
    script: install-core.bat  # [win]
    script: install-core.sh   # [not win]
    build:
      run_exports:
        # Run exports should require only the library binaries,
        # not headers or cmake configuration files
        - {{ pin_subpackage("libsofa-core", max_pin='x.x.x') }}
    requirements:
      host:
        - {{ pin_subpackage("libsofa-core", exact=True) }}
        - tinyxml2
      run:
        - {{ pin_subpackage("libsofa-core", exact=True) }}

    test:
      commands:
        - test -f $PREFIX/include/Sofa.Core/sofa/core/init.h                                     # [unix]
        - test -f $PREFIX/lib/cmake/Sofa.Core/Sofa.CoreConfig.cmake                              # [unix]
        - test -f $PREFIX/lib/cmake/Sofa.Core/Sofa.CoreConfigVersion.cmake                       # [unix]
        - if not exist %LIBRARY_PREFIX%\include\Sofa.Core\sofa\core\init.h exit 1                # [win]
        - if not exist %LIBRARY_PREFIX%\lib\cmake\Sofa.Core\Sofa.CoreConfig.cmake exit 1         # [win]
        - if not exist %LIBRARY_PREFIX%\lib\cmake\Sofa.Core\Sofa.CoreConfigVersion.cmake exit 1  # [win]
        - if not exist %LIBRARY_PREFIX%\lib\Sofa.Core.lib exit 1                                 # [win]

  - name: sofa-gl
    script: build-sofa-gl.sh     # [unix]
    # TODO
    script: build-sofa-gl.bat    # [win]
    build:
      run_exports:
        - {{ pin_subpackage("sofa-gl", max_pin='x.x.x') }}
    requirements:
      build:
        - {{ compiler('cxx') }}
        - cmake
        - make                           # [unix]
        - ninja                          # [win]
        - {{ cdt('mesa-libgl-devel') }}  # [linux]
      host:
        - {{ pin_subpackage('libsofa-core-devel', exact=True) }}
        - glew
        - libboost-devel
        - eigen
        - libglu  # [linux]
      run:
        - libglu  # [linux]

    # test:
    #   commands:
    #     - test -f $PREFIX/include/Sofa.Core/sofa/core/init.h                                     # [unix]
    #     - test -f $PREFIX/lib/cmake/Sofa.Core/Sofa.CoreConfig.cmake                              # [unix]
    #     - test -f $PREFIX/lib/cmake/Sofa.Core/Sofa.CoreConfigVersion.cmake                       # [unix]
    #     - if not exist %LIBRARY_PREFIX%\include\Sofa.Core\sofa\core\init.h exit 1                # [win]
    #     - if not exist %LIBRARY_PREFIX%\lib\cmake\Sofa.Core\Sofa.CoreConfig.cmake exit 1         # [win]
    #     - if not exist %LIBRARY_PREFIX%\lib\cmake\Sofa.Core\Sofa.CoreConfigVersion.cmake exit 1  # [win]
    #     - if not exist %LIBRARY_PREFIX%\lib\Sofa.Core.lib exit 1      # [win]

  - name: sofa-gui-qt
    script: build-sofa-gui-qt.sh     # [unix]
    # TODO
    script: build-sofa-gui-qt.bat    # [win]
    build:
      run_exports:
        - {{ pin_subpackage("sofa-gui-qt", max_pin='x.x.x') }}
    requirements:
      build:
        - {{ compiler('cxx') }}
        - cmake
        - make                           # [unix]
        - ninja                          # [win]
        - {{ cdt('mesa-libgl-devel') }}  # [linux]
      host:
        - {{ pin_subpackage('libsofa-core-devel', exact=True) }}
        - {{ pin_subpackage('sofa-gl', exact=True) }}
        - qt-main
        - ffmpeg
        - libboost-devel
        - libqglviewer
        - eigen
        - cxxopts
about:
  home: https://www.sofa-framework.org/
  summary: Real-time multi-physics simulation with an emphasis on medical simulation and robotics.
  license: LGPL-2.1-or-later
  license_family: LGPL
  license_file:
    - LICENSE.LGPL.txt
    - extlibs/difflib/LICENSE.MIT
    - extlibs/json/LICENSE.MIT
    - extlibs/stb/LICENSE.MIT
    - applications/plugins/CImgPlugin/extlibs/CImg/Licence_CeCILL_V2-en.txt

  doc_url: https://www.sofa-framework.org/community/doc/
  dev_url: https://github.com/sofa-framework/sofa

extra:
  recipe-maintainers:
    - olivier-roussel
    - hugtalbot
