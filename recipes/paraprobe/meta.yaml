# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe
# If your package is python based, we recommend using Grayskull to generate it instead:
# https://github.com/conda-incubator/grayskull

# Jinja variables help maintain the recipe as you'll update the version only here.
# Using the name variable with the URL in line 14 is convenient
# when copying and pasting from another recipe, but not really needed.
{% set name = "paraprobe" %}
{% set version = "v0.3" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  - url: https://gitlab.com/{{ name }}/{{ name }}-toolbox/-/archive/{{ version }}/{{ name }}-toolbox-{{ version }}.tar.gz
    sha256: b7aba8d5d56117390ba6231c4599131019090a919ec48f84f556f49fdc41057a
    folder: paraprobe-toolbox
    patches:
      - paraprobe.patch
  - fn: v0.4.6.tar.gz
    url: https://github.com/chr1shr/voro/archive/refs/tags/v0.4.6.tar.gz
    folder: voro++
    sha256: e1eb9c1f5a393604f2ca56e935b7e850644f7a3a18f5a85a5b2617f51fc70343




build:
  number: 0
  skip: True  # [win and py<38]
  skip: True  # [win and py<38]
  {% if mpi != "nompi" %}
  {% set mpi_prefix = "mpi_" + mpi %}
  {% else %}
  {% set mpi_prefix = "nompi" %}
  {% endif %}

requirements:
  build:
    # If your project compiles code (such as a C extension) then add the required compilers as separate entries here.
    # Compilers are named 'c', 'cxx' and 'fortran'.
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - cmake
    - make
    - pkg-config
    - git
    - m4

  host:
    - python
    - cython
    - setuptools
    - {{ mpi }}
    - gmp
    - mpfr
    - libhwloc
    - libgomp
    - hdf5
    - hdf5 * {{ mpi_prefix }}_*
    - tetgen
    - fftw
    - boost
    - eigen
    - voro
    - cgal
    - libaec
    - numpy >=1.17
  run:
    - python
    - setuptools
    - scikit-learn ==1.0.2
    - ase ==3.22.1
    - ipywidgets ==7.6.3
    - h5py ==3.6.0
    - jupyterlab[full] ==3.0.0
    - punx ==0.3.0
    - nexpy ==0.14.4
    - silx[full] ==1.0.0
    - numpy >=1.17

test:
  # Some packages might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  imports:
    - paraprobe_parmsetup
    - paraprobe_transcoder
  # For python packages, it is useful to run pip check. However, sometimes the
  # metadata used by pip is out of date. Thus this section is optional if it is
  # failing.
  commands:
    - paraprobe_ranger

about:
  home: https://gitlab.com/paraprobe/paraprobe-toolbox
  summary: 'Paraprobe Tools'
  #description: |
  #  simplejson is a simple, fast, complete, correct and extensible
  #  JSON <https://json.org> encoder and decoder for Python 2.5+ and
  #  Python 3.3+. It is pure Python code with no dependencies, but includes
  #  an optional C extension for a serious speed boost.
  # Remember to specify the license variants for BSD, Apache, GPL, and LGPL.
  # Use the SPDX identifier, e.g: GPL-2.0-only instead of GNU General Public License version 2.0
  # See https://spdx.org/licenses/
  license: GPL-2.0-only
  # The license_family, i.e. "BSD" if license is "BSD-3-Clause". 
  # Optional
  license_family: GPL
  # It is required to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # Please also note that some projects have multiple license files which all need to be added using a valid yaml list.
  # See https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#license-file
  license_file: LICENSE
  # The doc_url and dev_url are optional.
  doc_url: https://gitlab.com/paraprobe/paraprobe-toolbox
  dev_url: https://gitlab.com/paraprobe/paraprobe-toolbox

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - srmnitc
